{"version":3,"file":"parser.js","sourceRoot":"","sources":["parser.ts"],"names":[],"mappings":"AAQA,OAAO,EAAE,MAAM,YAAY,CAAC;AAO5B,MAAM,UAAU,mBAAmB,CACjC,WAA0B,EAC1B,oBAA6B;IAE7B,MAAM,UAAU,GAAa,EAAE,CAAC;IAChC,MAAM,SAAS,GAAG,CAAC,IAAa,EAAE,EAAE;QAClC,IAAI,EAAE,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,CAAC;YAEjE,IACE,oBAAoB;gBACpB,CAAC,CAAC,EAAE,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,YAAY,EAAE,UAAU,CAAC;oBAC9D,CAAC,EAAE,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,EACpD,CAAC;gBACD,OAAO;YACT,CAAC;YAED,IAAI,IAAI,CAAC,eAAe,KAAK,SAAS,IAAI,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC;gBACnF,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAC7C,CAAC;QACH,CAAC;QACD,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IACnC,CAAC,CAAC;IAEF,EAAE,CAAC,YAAY,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;IAExC,OAAO,UAAU,CAAC;AACpB,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport ts from 'typescript';\n\n/**\n * Finds all module references in the specified source file.\n * @param node Source file which should be parsed.\n * @returns List of import specifiers in the source file.\n */\nexport function getModuleReferences(\n  initialNode: ts.SourceFile,\n  ignoreTypeOnlyChecks: boolean,\n): string[] {\n  const references: string[] = [];\n  const visitNode = (node: ts.Node) => {\n    if (ts.isImportDeclaration(node) || ts.isExportDeclaration(node)) {\n      // When ignoreTypeOnlyChecks are enabled, if the declaration is found to be type only, it is skipped.\n      if (\n        ignoreTypeOnlyChecks &&\n        ((ts.isImportDeclaration(node) && node.importClause?.isTypeOnly) ||\n          (ts.isExportDeclaration(node) && node.isTypeOnly))\n      ) {\n        return;\n      }\n\n      if (node.moduleSpecifier !== undefined && ts.isStringLiteral(node.moduleSpecifier)) {\n        references.push(node.moduleSpecifier.text);\n      }\n    }\n    ts.forEachChild(node, visitNode);\n  };\n\n  ts.forEachChild(initialNode, visitNode);\n\n  return references;\n}\n"]}