/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { getConfig } from '../../../utils/config.js';
import { bold, green, Log } from '../../../utils/logging.js';
import { Spinner } from '../../../utils/spinner.js';
import { assertValidReleaseConfig } from '../../config/index.js';
import { NpmCommand } from '../../versioning/npm-command.js';
function builder(args) {
    return args.positional('tagName', {
        type: 'string',
        demandOption: true,
        description: 'Name of the NPM dist tag.',
    });
}
/** Yargs command handler for deleting an NPM dist tag. */
async function handler(args) {
    const { tagName } = args;
    const config = await getConfig();
    assertValidReleaseConfig(config);
    const { npmPackages, publishRegistry } = config.release;
    Log.debug(`Deleting "${tagName}" NPM dist tag for release packages.`);
    const spinner = new Spinner('');
    for (const pkg of npmPackages) {
        spinner.update(`Deleting NPM dist tag for "${pkg.name}"`);
        try {
            await NpmCommand.deleteDistTagForPackage(pkg.name, tagName, publishRegistry);
            Log.debug(`Successfully deleted "${tagName}" NPM dist tag for "${pkg.name}".`);
        }
        catch (e) {
            spinner.complete();
            Log.error(e);
            Log.error(`  ✘   An error occurred while deleting the NPM dist tag for "${pkg.name}".`);
            process.exit(1);
        }
    }
    spinner.complete();
    Log.info(green(`  ✓   Deleted "${bold(tagName)}" NPM dist tag for all packages.`));
}
/** CLI command module for deleting an NPM dist tag. */
export const ReleaseNpmDistTagDeleteCommand = {
    builder,
    handler,
    command: 'delete <tag-name>',
    describe: 'Deletes a given NPM dist tag for all release packages.',
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbmctZGV2L3JlbGVhc2UvbnBtLWRpc3QtdGFnL2RlbGV0ZS9jbGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBU0gsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBRW5ELE9BQU8sRUFBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQzNELE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRCxPQUFPLEVBQUMsd0JBQXdCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUMvRCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFPM0QsU0FBUyxPQUFPLENBQUMsSUFBVTtJQUN6QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFO1FBQ2hDLElBQUksRUFBRSxRQUFRO1FBQ2QsWUFBWSxFQUFFLElBQUk7UUFDbEIsV0FBVyxFQUFFLDJCQUEyQjtLQUN6QyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsMERBQTBEO0FBQzFELEtBQUssVUFBVSxPQUFPLENBQUMsSUFBK0M7SUFDcEUsTUFBTSxFQUFDLE9BQU8sRUFBQyxHQUFHLElBQUksQ0FBQztJQUN2QixNQUFNLE1BQU0sR0FBRyxNQUFNLFNBQVMsRUFBRSxDQUFDO0lBQ2pDLHdCQUF3QixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pDLE1BQU0sRUFBQyxXQUFXLEVBQUUsZUFBZSxFQUFDLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUV0RCxHQUFHLENBQUMsS0FBSyxDQUFDLGFBQWEsT0FBTyxzQ0FBc0MsQ0FBQyxDQUFDO0lBQ3RFLE1BQU0sT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRWhDLEtBQUssTUFBTSxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7UUFDOUIsT0FBTyxDQUFDLE1BQU0sQ0FBQyw4QkFBOEIsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7UUFFMUQsSUFBSSxDQUFDO1lBQ0gsTUFBTSxVQUFVLENBQUMsdUJBQXVCLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsZUFBZSxDQUFDLENBQUM7WUFDN0UsR0FBRyxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsT0FBTyx1QkFBdUIsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUM7UUFDakYsQ0FBQztRQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDWCxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDbkIsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNiLEdBQUcsQ0FBQyxLQUFLLENBQUMsZ0VBQWdFLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDO1lBQ3hGLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEIsQ0FBQztJQUNILENBQUM7SUFFRCxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDbkIsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLElBQUksQ0FBQyxPQUFPLENBQUMsa0NBQWtDLENBQUMsQ0FBQyxDQUFDO0FBQ3JGLENBQUM7QUFFRCx1REFBdUQ7QUFDdkQsTUFBTSxDQUFDLE1BQU0sOEJBQThCLEdBQXNEO0lBQy9GLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTyxFQUFFLG1CQUFtQjtJQUM1QixRQUFRLEVBQUUsd0RBQXdEO0NBQ25FLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQ1xuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuLy8gLS0tLSAqKklNUE9SVEFOVCoqIC0tLS1cbi8vIFRoaXMgY29tbWFuZCBpcyBwYXJ0IG9mIG91ciBleHRlcm5hbCBjb21tYW5kcyBpbnZva2VkIGJ5IHRoZSByZWxlYXNlIHB1Ymxpc2hcbi8vIGNvbW1hbmQuIEJlZm9yZSBtYWtpbmcgY2hhbmdlcywga2VlcCBpbiBtaW5kIHRoYXQgbW9yZSByZWNlbnQgYG5nLWRldmAgdmVyc2lvbnNcbi8vIGNhbiBzdGlsbCBpbnZva2UgdGhpcyBjb21tYW5kLlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmltcG9ydCB7QXJndW1lbnRzLCBBcmd2LCBDb21tYW5kTW9kdWxlfSBmcm9tICd5YXJncyc7XG5pbXBvcnQge2dldENvbmZpZ30gZnJvbSAnLi4vLi4vLi4vdXRpbHMvY29uZmlnLmpzJztcblxuaW1wb3J0IHtib2xkLCBncmVlbiwgTG9nfSBmcm9tICcuLi8uLi8uLi91dGlscy9sb2dnaW5nLmpzJztcbmltcG9ydCB7U3Bpbm5lcn0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvc3Bpbm5lci5qcyc7XG5pbXBvcnQge2Fzc2VydFZhbGlkUmVsZWFzZUNvbmZpZ30gZnJvbSAnLi4vLi4vY29uZmlnL2luZGV4LmpzJztcbmltcG9ydCB7TnBtQ29tbWFuZH0gZnJvbSAnLi4vLi4vdmVyc2lvbmluZy9ucG0tY29tbWFuZC5qcyc7XG5cbi8qKiBDb21tYW5kIGxpbmUgb3B0aW9ucyBmb3IgZGVsZXRpbmcgYSBOUE0gZGlzdCB0YWcuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlbGVhc2VOcG1EaXN0VGFnRGVsZXRlT3B0aW9ucyB7XG4gIHRhZ05hbWU6IHN0cmluZztcbn1cblxuZnVuY3Rpb24gYnVpbGRlcihhcmdzOiBBcmd2KTogQXJndjxSZWxlYXNlTnBtRGlzdFRhZ0RlbGV0ZU9wdGlvbnM+IHtcbiAgcmV0dXJuIGFyZ3MucG9zaXRpb25hbCgndGFnTmFtZScsIHtcbiAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICBkZW1hbmRPcHRpb246IHRydWUsXG4gICAgZGVzY3JpcHRpb246ICdOYW1lIG9mIHRoZSBOUE0gZGlzdCB0YWcuJyxcbiAgfSk7XG59XG5cbi8qKiBZYXJncyBjb21tYW5kIGhhbmRsZXIgZm9yIGRlbGV0aW5nIGFuIE5QTSBkaXN0IHRhZy4gKi9cbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIoYXJnczogQXJndW1lbnRzPFJlbGVhc2VOcG1EaXN0VGFnRGVsZXRlT3B0aW9ucz4pIHtcbiAgY29uc3Qge3RhZ05hbWV9ID0gYXJncztcbiAgY29uc3QgY29uZmlnID0gYXdhaXQgZ2V0Q29uZmlnKCk7XG4gIGFzc2VydFZhbGlkUmVsZWFzZUNvbmZpZyhjb25maWcpO1xuICBjb25zdCB7bnBtUGFja2FnZXMsIHB1Ymxpc2hSZWdpc3RyeX0gPSBjb25maWcucmVsZWFzZTtcblxuICBMb2cuZGVidWcoYERlbGV0aW5nIFwiJHt0YWdOYW1lfVwiIE5QTSBkaXN0IHRhZyBmb3IgcmVsZWFzZSBwYWNrYWdlcy5gKTtcbiAgY29uc3Qgc3Bpbm5lciA9IG5ldyBTcGlubmVyKCcnKTtcblxuICBmb3IgKGNvbnN0IHBrZyBvZiBucG1QYWNrYWdlcykge1xuICAgIHNwaW5uZXIudXBkYXRlKGBEZWxldGluZyBOUE0gZGlzdCB0YWcgZm9yIFwiJHtwa2cubmFtZX1cImApO1xuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IE5wbUNvbW1hbmQuZGVsZXRlRGlzdFRhZ0ZvclBhY2thZ2UocGtnLm5hbWUsIHRhZ05hbWUsIHB1Ymxpc2hSZWdpc3RyeSk7XG4gICAgICBMb2cuZGVidWcoYFN1Y2Nlc3NmdWxseSBkZWxldGVkIFwiJHt0YWdOYW1lfVwiIE5QTSBkaXN0IHRhZyBmb3IgXCIke3BrZy5uYW1lfVwiLmApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHNwaW5uZXIuY29tcGxldGUoKTtcbiAgICAgIExvZy5lcnJvcihlKTtcbiAgICAgIExvZy5lcnJvcihgICDinJggICBBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBkZWxldGluZyB0aGUgTlBNIGRpc3QgdGFnIGZvciBcIiR7cGtnLm5hbWV9XCIuYCk7XG4gICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgfVxuICB9XG5cbiAgc3Bpbm5lci5jb21wbGV0ZSgpO1xuICBMb2cuaW5mbyhncmVlbihgICDinJMgICBEZWxldGVkIFwiJHtib2xkKHRhZ05hbWUpfVwiIE5QTSBkaXN0IHRhZyBmb3IgYWxsIHBhY2thZ2VzLmApKTtcbn1cblxuLyoqIENMSSBjb21tYW5kIG1vZHVsZSBmb3IgZGVsZXRpbmcgYW4gTlBNIGRpc3QgdGFnLiAqL1xuZXhwb3J0IGNvbnN0IFJlbGVhc2VOcG1EaXN0VGFnRGVsZXRlQ29tbWFuZDogQ29tbWFuZE1vZHVsZTx7fSwgUmVsZWFzZU5wbURpc3RUYWdEZWxldGVPcHRpb25zPiA9IHtcbiAgYnVpbGRlcixcbiAgaGFuZGxlcixcbiAgY29tbWFuZDogJ2RlbGV0ZSA8dGFnLW5hbWU+JyxcbiAgZGVzY3JpYmU6ICdEZWxldGVzIGEgZ2l2ZW4gTlBNIGRpc3QgdGFnIGZvciBhbGwgcmVsZWFzZSBwYWNrYWdlcy4nLFxufTtcbiJdfQ==