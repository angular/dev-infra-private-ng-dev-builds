{"version":3,"file":"env-stamp.js","sourceRoot":"","sources":["env-stamp.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as fs from 'fs';\n\nimport {GitClient} from '../../utils/git/git-client.js';\nimport semver from 'semver';\nimport {createExperimentalSemver} from '../../release/versioning/experimental-versions.js';\nimport {join} from 'path';\n\nexport type EnvStampMode = 'snapshot' | 'release';\n\n/** Log the environment variables expected by Bazel for stamping. */\nexport async function printEnvStamp(mode: EnvStampMode, includeVersion: boolean) {\n  const git = await GitClient.get();\n\n  console.info(`BUILD_SCM_BRANCH ${getCurrentBranch(git)}`);\n  console.info(`BUILD_SCM_COMMIT_SHA ${getCurrentSha(git)}`);\n  console.info(`BUILD_SCM_HASH ${getCurrentSha(git)}`);\n  console.info(`BUILD_SCM_ABBREV_HASH ${getCurrentAbbrevSha(git)}`);\n  console.info(`BUILD_SCM_BRANCH ${getCurrentBranchOrRevision(git)}`);\n  console.info(`BUILD_SCM_LOCAL_CHANGES ${hasLocalChanges(git)}`);\n  console.info(`BUILD_SCM_USER ${getCurrentGitUser(git)}`);\n\n  if (includeVersion === true) {\n    const {version, experimentalVersion} = getSCMVersions(git, mode);\n    // Note: We need to use the `STABLE_` prefix to tell Bazel that these\n    // variables are changing rarely, and if they do- the targets relying\n    // on it should be rebuilt. e.g. the NPM package would need to be re-assembled.\n    // https://bazel.build/docs/user-manual#workspace-status-command.\n    console.info(`STABLE_PROJECT_VERSION ${version}`);\n    console.info(`STABLE_PROJECT_EXPERIMENTAL_VERSION ${experimentalVersion}`);\n  }\n}\n\n/** Whether the repo has local changes. */\nfunction hasLocalChanges(git: GitClient) {\n  try {\n    return git.hasUncommittedChanges();\n  } catch {\n    return true;\n  }\n}\n\n/**\n * Get the versions for generated packages. The stamped versions are always based\n * on the workspace version. Relying on tags is less reliable because tags can be\n * modified easily in an untracked/uncontrolled way, and are less predictable with\n * regards to the source control revision currently being checked out.\n *\n * A concrete use-case: The release tool tags the versioning commit only after building\n * and publishing to NPM, causing snapshot-docs deployment to display versions from\n * a previous version because the CI push for the bump commits executes earlier.\n *\n * In snapshot mode, we will include the current SHA along with the workspace version.\n */\nfunction getSCMVersions(\n  git: GitClient,\n  mode: EnvStampMode,\n): {version: string; experimentalVersion: string} {\n  const version = getVersionFromWorkspacePackageJson(git).format();\n  const experimentalVersion = createExperimentalSemver(version).format();\n\n  if (mode === 'release') {\n    return {\n      version,\n      experimentalVersion,\n    };\n  }\n\n  const headShaAbbreviated = getCurrentSha(git).slice(0, 7);\n  const localChanges = hasLocalChanges(git) ? '-with-local-changes' : '';\n\n  return {\n    version: `${version}+sha-${headShaAbbreviated}${localChanges}`,\n    experimentalVersion: `${experimentalVersion}+sha-${headShaAbbreviated}${localChanges}`,\n  };\n}\n\n/** Get the current SHA of HEAD. */\nfunction getCurrentSha(git: GitClient) {\n  try {\n    return git.run(['rev-parse', 'HEAD']).stdout.trim();\n  } catch {\n    return '';\n  }\n}\n\n/** Get the current abbreviated SHA of HEAD. */\nfunction getCurrentAbbrevSha(git: GitClient) {\n  try {\n    return git.run(['rev-parse', '--short', 'HEAD']).stdout.trim();\n  } catch {\n    return '';\n  }\n}\n\n/** Get the current branch or revision of HEAD. */\nfunction getCurrentBranchOrRevision(git: GitClient) {\n  try {\n    return git.getCurrentBranchOrRevision();\n  } catch {\n    return '';\n  }\n}\n\n/** Get the currently checked out branch. */\nfunction getCurrentBranch(git: GitClient) {\n  try {\n    return git.run(['symbolic-ref', '--short', 'HEAD']).stdout.trim();\n  } catch {\n    return '';\n  }\n}\n\n/** Get the current git user based on the git config. */\nfunction getCurrentGitUser(git: GitClient) {\n  try {\n    let userName = git.runGraceful(['config', 'user.name']).stdout.trim() || 'Unknown User';\n    let userEmail = git.runGraceful(['config', 'user.email']).stdout.trim() || 'unknown_email';\n    return `${userName} <${userEmail}>`;\n  } catch {\n    return '';\n  }\n}\n\n/** Gets the `version` from the workspace top-level `package.json` file. */\nfunction getVersionFromWorkspacePackageJson(git: GitClient): semver.SemVer {\n  const packageJsonPath = join(git.baseDir, 'package.json');\n  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8')) as {\n    version: string | undefined;\n  };\n\n  if (packageJson.version === undefined) {\n    throw new Error(`No workspace version found in: ${packageJsonPath}`);\n  }\n\n  return new semver.SemVer(packageJson.version);\n}\n"]}