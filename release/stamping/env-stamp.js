/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as fs from 'fs';
import { GitClient } from '../../utils/git/git-client.js';
import semver from 'semver';
import { createExperimentalSemver } from '../../release/versioning/experimental-versions.js';
import { join } from 'path';
/** Log the environment variables expected by Bazel for stamping. */
export async function printEnvStamp(mode, includeVersion) {
    const git = await GitClient.get();
    console.info(`BUILD_SCM_BRANCH ${getCurrentBranch(git)}`);
    console.info(`BUILD_SCM_COMMIT_SHA ${getCurrentSha(git)}`);
    console.info(`BUILD_SCM_HASH ${getCurrentSha(git)}`);
    console.info(`BUILD_SCM_ABBREV_HASH ${getCurrentAbbrevSha(git)}`);
    console.info(`BUILD_SCM_BRANCH ${getCurrentBranchOrRevision(git)}`);
    console.info(`BUILD_SCM_LOCAL_CHANGES ${hasLocalChanges(git)}`);
    console.info(`BUILD_SCM_USER ${getCurrentGitUser(git)}`);
    if (includeVersion === true) {
        const { version, experimentalVersion } = getSCMVersions(git, mode);
        // Note: We need to use the `STABLE_` prefix to tell Bazel that these
        // variables are changing rarely, and if they do- the targets relying
        // on it should be rebuilt. e.g. the NPM package would need to be re-assembled.
        // https://bazel.build/docs/user-manual#workspace-status-command.
        console.info(`STABLE_PROJECT_VERSION ${version}`);
        console.info(`STABLE_PROJECT_EXPERIMENTAL_VERSION ${experimentalVersion}`);
    }
}
/** Whether the repo has local changes. */
function hasLocalChanges(git) {
    try {
        return git.hasUncommittedChanges();
    }
    catch {
        return true;
    }
}
/**
 * Get the versions for generated packages. The stamped versions are always based
 * on the workspace version. Relying on tags is less reliable because tags can be
 * modified easily in an untracked/uncontrolled way, and are less predictable with
 * regards to the source control revision currently being checked out.
 *
 * A concrete use-case: The release tool tags the versioning commit only after building
 * and publishing to NPM, causing snapshot-docs deployment to display versions from
 * a previous version because the CI push for the bump commits executes earlier.
 *
 * In snapshot mode, we will include the current SHA along with the workspace version.
 */
function getSCMVersions(git, mode) {
    const version = getVersionFromWorkspacePackageJson(git).format();
    const experimentalVersion = createExperimentalSemver(version).format();
    if (mode === 'release') {
        return {
            version,
            experimentalVersion,
        };
    }
    const headShaAbbreviated = getCurrentSha(git).slice(0, 7);
    const localChanges = hasLocalChanges(git) ? '-with-local-changes' : '';
    return {
        version: `${version}+sha-${headShaAbbreviated}${localChanges}`,
        experimentalVersion: `${experimentalVersion}+sha-${headShaAbbreviated}${localChanges}`,
    };
}
/** Get the current SHA of HEAD. */
function getCurrentSha(git) {
    try {
        return git.run(['rev-parse', 'HEAD']).stdout.trim();
    }
    catch {
        return '';
    }
}
/** Get the current abbreviated SHA of HEAD. */
function getCurrentAbbrevSha(git) {
    try {
        return git.run(['rev-parse', '--short', 'HEAD']).stdout.trim();
    }
    catch {
        return '';
    }
}
/** Get the current branch or revision of HEAD. */
function getCurrentBranchOrRevision(git) {
    try {
        return git.getCurrentBranchOrRevision();
    }
    catch {
        return '';
    }
}
/** Get the currently checked out branch. */
function getCurrentBranch(git) {
    try {
        return git.run(['symbolic-ref', '--short', 'HEAD']).stdout.trim();
    }
    catch {
        return '';
    }
}
/** Get the current git user based on the git config. */
function getCurrentGitUser(git) {
    try {
        let userName = git.runGraceful(['config', 'user.name']).stdout.trim() || 'Unknown User';
        let userEmail = git.runGraceful(['config', 'user.email']).stdout.trim() || 'unknown_email';
        return `${userName} <${userEmail}>`;
    }
    catch {
        return '';
    }
}
/** Gets the `version` from the workspace top-level `package.json` file. */
function getVersionFromWorkspacePackageJson(git) {
    const packageJsonPath = join(git.baseDir, 'package.json');
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    if (packageJson.version === undefined) {
        throw new Error(`No workspace version found in: ${packageJsonPath}`);
    }
    return new semver.SemVer(packageJson.version);
}
//# sourceMappingURL=data:application/json;base64,