{"version":3,"file":"cli.js","sourceRoot":"","sources":["cli.ts"],"names":[],"mappings":"AAQA,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,OAAO,GAAG,MAAM,KAAK,CAAC;AAGtB,OAAO,EAAC,aAAa,EAAe,MAAM,gBAAgB,CAAC;AAc3D,SAAS,OAAO,CAAC,IAAU;IACzB,OAAO,IAAI;SACR,MAAM,CAAC,MAAM,EAAE;QACd,YAAY,EAAE,IAAI;QAClB,WAAW,EAAE,iEAAiE;QAC9E,OAAO,EAAE,CAAC,UAAmB,EAAE,SAAkB,CAAC;KACnD,CAAC;SACD,MAAM,CAAC,gBAAgB,EAAE;QACxB,IAAI,EAAE,SAAS;QACf,WAAW,EAAE,sDAAsD;QACnE,OAAO,EAAE,IAAI;KACd,CAAC;SACD,MAAM,CAAC,0BAA0B,EAAE;QAClC,IAAI,EAAE,QAAQ;QACd,WAAW,EACT,mEAAmE;YACnE,qCAAqC;KACxC,CAAC,CAAC;AACP,CAAC;AAED,KAAK,UAAU,OAAO,CAAC,EAAC,IAAI,EAAE,cAAc,EAAE,wBAAwB,EAAqB;IACzF,MAAM,aAAa,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;IAI1C,IAAI,wBAAwB,KAAK,SAAS,EAAE,CAAC;QAC3C,MAAM,SAAS,GAAG,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC,CAAC;QAC5E,MAAM,eAAe,GAAG,CAAC,MAAM,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAE1D,CAAC;QACF,MAAM,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC;AACH,CAAC;AAGD,MAAM,CAAC,MAAM,oBAAoB,GAA+B;IAC9D,OAAO;IACP,OAAO;IACP,OAAO,EAAE,iBAAiB;IAC1B,QAAQ,EAAE,4CAA4C;CACvD,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport path from 'path';\nimport url from 'url';\nimport {Argv, Arguments, CommandModule} from 'yargs';\n\nimport {printEnvStamp, EnvStampMode} from './env-stamp.js';\n\n/**\n * Type describing a custom stamping function that\n * can be exposed through the `--additional-stamping-script`.\n */\nexport type EnvStampCustomPrintFn = (mode: EnvStampMode) => Promise<void>;\n\nexport interface Options {\n  mode: EnvStampMode;\n  includeVersion: boolean;\n  additionalStampingScript: string | undefined;\n}\n\nfunction builder(args: Argv): Argv<Options> {\n  return args\n    .option('mode', {\n      demandOption: true,\n      description: 'Whether the env-stamp should be built for a snapshot or release',\n      choices: ['snapshot' as const, 'release' as const],\n    })\n    .option('includeVersion', {\n      type: 'boolean',\n      description: 'Whether the version should be included in the stamp.',\n      default: true,\n    })\n    .option('additionalStampingScript', {\n      type: 'string',\n      description:\n        'Working-dir relative or absolute path to an ESM script which can ' +\n        'print additional stamping variables',\n    });\n}\n\nasync function handler({mode, includeVersion, additionalStampingScript}: Arguments<Options>) {\n  await printEnvStamp(mode, includeVersion);\n\n  // Support for additional stamping. We import the script and call the default\n  // function while providing the stamping mode.\n  if (additionalStampingScript !== undefined) {\n    const scriptURL = url.pathToFileURL(path.resolve(additionalStampingScript));\n    const stampingExports = (await import(scriptURL.toString())) as {\n      default: EnvStampCustomPrintFn;\n    };\n    await stampingExports.default(mode);\n  }\n}\n\n/** CLI command module for building the environment stamp. */\nexport const BuildEnvStampCommand: CommandModule<{}, Options> = {\n  builder,\n  handler,\n  command: 'build-env-stamp',\n  describe: 'Build the environment stamping information',\n};\n"]}