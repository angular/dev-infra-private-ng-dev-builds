{"version":3,"file":"get-commits-in-range.js","sourceRoot":"","sources":["get-commits-in-range.ts"],"names":[],"mappings":"AASA,OAAO,EAEL,sBAAsB,EACtB,qBAAqB,GACtB,MAAM,kCAAkC,CAAC;AAC1C,OAAO,EAAC,gCAAgC,EAAC,MAAM,uBAAuB,CAAC;AAuBvE,MAAM,UAAU,8BAA8B,CAC5C,MAAiB,EACjB,OAAe,EACf,OAAe;IAEf,MAAM,OAAO,GAAuB,EAAE,CAAC;IACvC,MAAM,cAAc,GAAG,4BAA4B,CAAC,MAAM,EAAE,GAAG,OAAO,KAAK,OAAO,EAAE,CAAC,CAAC;IACtF,MAAM,cAAc,GAAG,4BAA4B,CAAC,MAAM,EAAE,GAAG,OAAO,KAAK,OAAO,EAAE,CAAC,CAAC;IAKtF,MAAM,sBAAsB,GAAG,IAAI,GAAG,EAAkB,CAAC;IAEzD,KAAK,MAAM,MAAM,IAAI,cAAc,EAAE,CAAC;QACpC,MAAM,EAAE,GAAG,gCAAgC,CAAC,MAAM,CAAC,CAAC;QACpD,MAAM,iBAAiB,GAAG,sBAAsB,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QAC9D,sBAAsB,CAAC,GAAG,CAAC,EAAE,EAAE,iBAAiB,GAAG,CAAC,CAAC,CAAC;IACxD,CAAC;IAED,KAAK,MAAM,MAAM,IAAI,cAAc,EAAE,CAAC;QACpC,MAAM,EAAE,GAAG,gCAAgC,CAAC,MAAM,CAAC,CAAC;QACpD,MAAM,iBAAiB,GAAG,sBAAsB,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QAO9D,IAAI,iBAAiB,GAAG,CAAC,EAAE,CAAC;YAC1B,sBAAsB,CAAC,GAAG,CAAC,EAAE,EAAE,iBAAiB,GAAG,CAAC,CAAC,CAAC;YACtD,SAAS;QACX,CAAC;QAED,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACvB,CAAC;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAGD,MAAM,UAAU,4BAA4B,CAC1C,MAAiB,EACjB,aAAqB;IAErB,MAAM,cAAc,GAAG,6BAA6B,CAAC;IACrD,MAAM,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC;QACxB,KAAK;QACL,YAAY,sBAAsB,GAAG,cAAc,EAAE;QACrD,aAAa;KACd,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC,MAAM;SACjB,KAAK,CAAC,cAAc,CAAC;SACrB,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;SACjC,GAAG,CAAC,oBAAoB,CAAC;SACzB,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,qBAAqB,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;AACxE,CAAC;AAQD,SAAS,oBAAoB,CAAC,OAAe;IAC3C,OAAO,OAAO,CAAC,OAAO,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAC;AACtD,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {GitClient} from '../../../utils/git/git-client.js';\nimport {\n  CommitFromGitLog,\n  gitLogFormatForParsing,\n  parseCommitFromGitLog,\n} from '../../../commit-message/parse.js';\nimport {computeUniqueIdFromCommitMessage} from './unique-commit-id.js';\n\n/**\n * Gets all commits the head branch contains, but the base branch does not include.\n * This follows the same semantics as Git's double-dot revision range.\n *\n * i.e. `<baseRef>..<headRef>` revision range as per Git.\n * https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection.\n *\n * Branches in the Angular organization are diverging quickly due to multiple factors\n * concerning the versioning and merging. i.e. Commits are cherry-picked into branches,\n * resulting in different SHAs for each branch. Additionally, branches diverge quickly\n * because changes can be made only for specific branches (e.g. a master-only change).\n *\n * In order to allow for comparisons that follow similar semantics as Git's double-dot\n * revision range syntax, the logic re-implementing the semantics need to account for\n * the mentioned semi-diverged branches. We achieve this by excluding commits in the\n * head branch which have a similarly-named commit in the base branch. We cannot rely on\n * SHAs for determining common commits between the two branches (as explained above).\n *\n * More details can be found in the `get-commits-in-range.png` file which illustrates a\n * scenario where commits from the patch branch need to be excluded from the main branch.\n */\nexport function getCommitsForRangeWithDeduping(\n  client: GitClient,\n  baseRef: string,\n  headRef: string,\n): CommitFromGitLog[] {\n  const commits: CommitFromGitLog[] = [];\n  const commitsForHead = fetchCommitsForRevisionRange(client, `${baseRef}..${headRef}`);\n  const commitsForBase = fetchCommitsForRevisionRange(client, `${headRef}..${baseRef}`);\n\n  // Map that keeps track of commits within the base branch. Commits are\n  // stored with an unique id based on the commit message. If a similarly-named\n  // commit appears multiple times, the value number will reflect that.\n  const knownCommitsOnlyInBase = new Map<string, number>();\n\n  for (const commit of commitsForBase) {\n    const id = computeUniqueIdFromCommitMessage(commit);\n    const numSimilarCommits = knownCommitsOnlyInBase.get(id) ?? 0;\n    knownCommitsOnlyInBase.set(id, numSimilarCommits + 1);\n  }\n\n  for (const commit of commitsForHead) {\n    const id = computeUniqueIdFromCommitMessage(commit);\n    const numSimilarCommits = knownCommitsOnlyInBase.get(id) ?? 0;\n\n    // If there is a similar commit in the base branch, the current commit in the head branch\n    // needs to be skipped. We keep track of the number of similar commits so that we do not\n    // accidentally \"dedupe\" a commit. e.g. consider a case where commit `X` lands in the\n    // patch branch and next branch. Then a similar similarly named commits lands only in the\n    // next branch. We would not want to omit that one as it is not part of the patch branch.\n    if (numSimilarCommits > 0) {\n      knownCommitsOnlyInBase.set(id, numSimilarCommits - 1);\n      continue;\n    }\n\n    commits.push(commit);\n  }\n  return commits;\n}\n\n/** Fetches commits for the given revision range using `git log`. */\nexport function fetchCommitsForRevisionRange(\n  client: GitClient,\n  revisionRange: string,\n): CommitFromGitLog[] {\n  const splitDelimiter = '-------------ɵɵ------------';\n  const output = client.run([\n    'log',\n    `--format=${gitLogFormatForParsing}${splitDelimiter}`,\n    revisionRange,\n  ]);\n\n  return output.stdout\n    .split(splitDelimiter)\n    .filter((entry) => !!entry.trim())\n    .map(santizeCommitMessage)\n    .map((entry) => parseCommitFromGitLog(Buffer.from(entry, 'utf-8')));\n}\n\n/**\n * Santized a raw Github message to avoid unintended results in github rendered contexts.\n *\n * Currently sanitization does:\n *  - Removes unexpected references to users\n */\nfunction santizeCommitMessage(content: string): string {\n  return content.replace(/ (@[A-z0-9]+) /g, ' `$1` ');\n}\n"]}