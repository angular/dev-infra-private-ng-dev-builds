{"version":3,"file":"release-notes.js","sourceRoot":"","sources":["release-notes.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {render} from 'ejs';\nimport semver from 'semver';\nimport {CommitFromGitLog} from '../../commit-message/parse.js';\n\nimport {formatFiles} from '../../format/format.js';\nimport {GitClient} from '../../utils/git/git-client.js';\nimport {assertValidReleaseConfig, ReleaseConfig} from '../config/index.js';\nimport {RenderContext} from './context.js';\n\nimport changelogTemplate from './templates/changelog.js';\nimport githubReleaseTemplate from './templates/github-release.js';\nimport {getCommitsForRangeWithDeduping} from './commits/get-commits-in-range.js';\nimport {getConfig, NgDevConfig} from '../../utils/config.js';\nimport {assertValidFormatConfig} from '../../format/config.js';\nimport {Changelog} from './changelog.js';\nimport {Prompt} from '../../utils/prompt.js';\n\n/** Workspace-relative path for the changelog file. */\nexport const workspaceRelativeChangelogPath = 'CHANGELOG.md';\n\n/** Release note generation. */\nexport class ReleaseNotes {\n  static async forRange(git: GitClient, version: semver.SemVer, baseRef: string, headRef: string) {\n    const config = await getConfig([assertValidReleaseConfig]);\n    const commits = getCommitsForRangeWithDeduping(git, baseRef, headRef);\n    return new ReleaseNotes(config, version, commits, git);\n  }\n\n  /** The RenderContext to be used during rendering. */\n  private renderContext: RenderContext | undefined;\n\n  /** The title to use for the release. */\n  private title: string | false | undefined;\n\n  protected constructor(\n    public config: NgDevConfig<{release: ReleaseConfig}>,\n    public version: semver.SemVer,\n    private commits: CommitFromGitLog[],\n    private git: GitClient,\n  ) {}\n\n  /** Retrieve the release note generated for a Github Release. */\n  async getGithubReleaseEntry(): Promise<string> {\n    return render(githubReleaseTemplate, await this.generateRenderContext(), {\n      rmWhitespace: true,\n    });\n  }\n\n  /** Retrieve the release note generated for a CHANGELOG entry. */\n  async getChangelogEntry() {\n    return render(changelogTemplate, await this.generateRenderContext(), {rmWhitespace: true});\n  }\n\n  /**\n   * Prepend generated release note to the CHANGELOG.md file in the base directory of the repository\n   * provided by the GitClient. Removes entries for related prerelease entries as appropriate.\n   */\n  async prependEntryToChangelogFile() {\n    // When the version for the entry is a non-prelease (i.e. 1.0.0 rather than 1.0.0-next.1), the\n    // pre-release entries for the version should be removed from the changelog.\n    if (semver.prerelease(this.version) === null) {\n      Changelog.removePrereleaseEntriesForVersion(this.git, this.version);\n    }\n    Changelog.prependEntryToChangelogFile(this.git, await this.getChangelogEntry());\n\n    // TODO(josephperrott): Remove file formatting calls.\n    //   Upon reaching a standardized formatting for markdown files, rather than calling a formatter\n    //   for all creation of changelogs, we instead will confirm in our testing that the new changes\n    //   created for changelogs meet on standardized markdown formats via unit testing.\n    try {\n      assertValidFormatConfig(await this.config);\n      await formatFiles([Changelog.getChangelogFilePaths(this.git).filePath]);\n    } catch {\n      // If the formatting is either unavailable or fails, continue on with the unformatted result.\n    }\n  }\n\n  /** Retrieve the number of commits included in the release notes after filtering and deduping. */\n  async getCommitCountInReleaseNotes() {\n    const context = await this.generateRenderContext();\n    return context.commits.filter(context.includeInReleaseNotes()).length;\n  }\n\n  /**\n   * Gets the URL fragment for the release notes. The URL fragment identifier\n   * can be used to point to a specific changelog entry through an URL.\n   */\n  async getUrlFragmentForRelease() {\n    return (await this.generateRenderContext()).urlFragmentForRelease;\n  }\n\n  /**\n   * Prompt the user for a title for the release, if the project's configuration is defined to use a\n   * title.\n   */\n  async promptForReleaseTitle() {\n    const notesConfig = await this._getNotesConfig();\n\n    if (this.title === undefined) {\n      if (notesConfig.useReleaseTitle) {\n        this.title = await Prompt.input({message: 'Please provide a title for the release:'});\n      } else {\n        this.title = false;\n      }\n    }\n    return this.title;\n  }\n\n  /** Build the render context data object for constructing the RenderContext instance. */\n  private async generateRenderContext(): Promise<RenderContext> {\n    const notesConfig = await this._getNotesConfig();\n\n    if (!this.renderContext) {\n      this.renderContext = new RenderContext({\n        commits: this.commits,\n        github: this.git.remoteConfig,\n        version: this.version.format(),\n        groupOrder: notesConfig.groupOrder,\n        hiddenScopes: notesConfig.hiddenScopes,\n        categorizeCommit: notesConfig.categorizeCommit,\n        title: await this.promptForReleaseTitle(),\n      });\n    }\n    return this.renderContext;\n  }\n\n  /** Gets the configuration for the release notes. */\n  private async _getNotesConfig() {\n    return (await this.config).release.releaseNotes ?? {};\n  }\n}\n"]}