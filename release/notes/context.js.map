{"version":3,"file":"context.js","sourceRoot":"","sources":["context.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {COMMIT_TYPES, ReleaseNotesLevel} from '../../commit-message/config.js';\nimport {CommitFromGitLog} from '../../commit-message/parse.js';\nimport {GithubConfig} from '../../utils/config.js';\nimport {ReleaseNotesConfig} from '../config/index.js';\nimport {compareString} from '../../utils/locale.js';\n\n/** List of types to be included in the release notes. */\nconst typesToIncludeInReleaseNotes = Object.values(COMMIT_TYPES)\n  .filter((type) => type.releaseNotesLevel === ReleaseNotesLevel.Visible)\n  .map((type) => type.name);\n\n/** Data used for context during rendering. */\nexport interface RenderContextData {\n  title: string | false;\n  groupOrder: ReleaseNotesConfig['groupOrder'];\n  hiddenScopes: ReleaseNotesConfig['hiddenScopes'];\n  categorizeCommit: ReleaseNotesConfig['categorizeCommit'];\n  commits: CommitFromGitLog[];\n  version: string;\n  github: GithubConfig;\n  date?: Date;\n}\n\n/** Interface describing an categorized commit. */\nexport interface CategorizedCommit extends CommitFromGitLog {\n  groupName: string;\n  description: string;\n}\n\n/** Context class used for rendering release notes. */\nexport class RenderContext {\n  /** An array of group names in sort order if defined. */\n  private readonly groupOrder = this.data.groupOrder || [];\n  /** An array of scopes to hide from the release entry output. */\n  private readonly hiddenScopes = this.data.hiddenScopes || [];\n  /** The title of the release, or `false` if no title should be used. */\n  readonly title = this.data.title;\n  /** The version of the release. */\n  readonly version = this.data.version;\n  /** The date stamp string for use in the release notes entry. */\n  readonly dateStamp = buildDateStamp(this.data.date);\n  /** URL fragment that is used to create an anchor for the release. */\n  readonly urlFragmentForRelease = this.data.version;\n  /** List of categorized commits in the release period. */\n  readonly commits = this._categorizeCommits(this.data.commits);\n\n  constructor(private readonly data: RenderContextData) {}\n\n  /** Gets a list of categorized commits from all commits in the release period. */\n  _categorizeCommits(commits: CommitFromGitLog[]): CategorizedCommit[] {\n    return commits.map((commit) => {\n      const {description, groupName} = this.data.categorizeCommit?.(commit) ?? {};\n      return {\n        groupName: groupName ?? commit.scope,\n        description: description ?? commit.subject,\n        ...commit,\n      };\n    });\n  }\n\n  /**\n   * Comparator used for sorting commits within a release notes group. Commits\n   * are sorted alphabetically based on their type. Commits having the same type\n   * will be sorted alphabetically based on their determined description\n   */\n  private _commitsWithinGroupComparator = (a: CategorizedCommit, b: CategorizedCommit): number => {\n    const typeCompareOrder = compareString(a.type, b.type);\n    if (typeCompareOrder === 0) {\n      return compareString(a.description, b.description);\n    }\n    return typeCompareOrder;\n  };\n\n  /**\n   * Organizes and sorts the commits into groups of commits.\n   *\n   * Groups are sorted either by default `Array.sort` order, or using the provided group order from\n   * the configuration. Commits are order in the same order within each groups commit list as they\n   * appear in the provided list of commits.\n   * */\n  asCommitGroups(commits: CategorizedCommit[]) {\n    /** The discovered groups to organize into. */\n    const groups = new Map<string, CategorizedCommit[]>();\n\n    // Place each commit in the list into its group.\n    commits.forEach((commit) => {\n      const key = commit.groupName;\n      const groupCommits = groups.get(key) || [];\n      groups.set(key, groupCommits);\n      groupCommits.push(commit);\n    });\n\n    /**\n     * List of discovered commit groups which are sorted in alphanumeric order\n     * based on the group title.\n     */\n    const commitGroups = Array.from(groups.entries())\n      .map(([title, groupCommits]) => ({\n        title,\n        commits: groupCommits.sort(this._commitsWithinGroupComparator),\n      }))\n      .sort((a, b) => compareString(a.title, b.title));\n\n    // If the configuration provides a sorting order, updated the sorted list of group keys to\n    // satisfy the order of the groups provided in the list with any groups not found in the list at\n    // the end of the sorted list.\n    if (this.groupOrder.length) {\n      for (const groupTitle of this.groupOrder.reverse()) {\n        const currentIdx = commitGroups.findIndex((k) => k.title === groupTitle);\n        if (currentIdx !== -1) {\n          const removedGroups = commitGroups.splice(currentIdx, 1);\n          commitGroups.splice(0, 0, ...removedGroups);\n        }\n      }\n    }\n    return commitGroups;\n  }\n\n  /** Whether the specified commit contains breaking changes. */\n  hasBreakingChanges(commit: CategorizedCommit) {\n    return commit.breakingChanges.length !== 0;\n  }\n\n  /** Whether the specified commit contains deprecations. */\n  hasDeprecations(commit: CategorizedCommit) {\n    return commit.deprecations.length !== 0;\n  }\n\n  /**\n   * A filter function for filtering a list of commits to only include commits which\n   * should appear in release notes.\n   */\n  includeInReleaseNotes() {\n    return (commit: CategorizedCommit) => {\n      if (this.hiddenScopes.includes(commit.scope)) {\n        return false;\n      }\n\n      // Commits which contain breaking changes or deprecations are always included\n      // in release notes. The breaking change or deprecations will already be listed\n      // in a dedicated section but it is still valuable to include the actual commit.\n      if (this.hasBreakingChanges(commit) || this.hasDeprecations(commit)) {\n        return true;\n      }\n\n      return typesToIncludeInReleaseNotes.includes(commit.type);\n    };\n  }\n\n  /**\n   * A filter function for filtering a list of commits to only include commits which contain a\n   * unique value for the provided field across all commits in the list.\n   */\n  unique(field: keyof CategorizedCommit) {\n    const set = new Set<CategorizedCommit[typeof field]>();\n    return (commit: CategorizedCommit) => {\n      const include = !set.has(commit[field]);\n      set.add(commit[field]);\n      return include;\n    };\n  }\n\n  /**\n   * Convert a commit object to a Markdown link.\n   */\n  commitToLink(commit: CategorizedCommit): string {\n    const url = `https://github.com/${this.data.github.owner}/${this.data.github.name}/commit/${commit.hash}`;\n    return `[${commit.shortHash}](${url})`;\n  }\n\n  /**\n   * Convert a pull request number to a Markdown link.\n   */\n  pullRequestToLink(prNumber: number): string {\n    const url = `https://github.com/${this.data.github.owner}/${this.data.github.name}/pull/${prNumber}`;\n    return `[#${prNumber}](${url})`;\n  }\n\n  /**\n   * Transform a given string by replacing any pull request references with their\n   * equivalent markdown links.\n   *\n   * This is useful for the changelog output. Github transforms pull request references\n   * automatically in release note entries, issues and pull requests, but not for plain\n   * markdown files (like the changelog file).\n   */\n  convertPullRequestReferencesToLinks(content: string): string {\n    return content.replace(/#(\\d+)/g, (_, g) => this.pullRequestToLink(Number(g)));\n  }\n\n  /**\n   * Bulletize a paragraph.\n   */\n  bulletizeText(text: string): string {\n    return '- ' + text.replace(/\\n/g, '\\n  ');\n  }\n\n  /**\n   * Convert a commit object to a Markdown linked badged.\n   */\n  commitToBadge(commit: CategorizedCommit): string {\n    let color = 'yellow';\n    switch (commit.type) {\n      case 'fix':\n        color = 'green';\n        break;\n      case 'feat':\n        color = 'blue';\n        break;\n      case 'perf':\n        color = 'orange';\n        break;\n    }\n    const url = `https://github.com/${this.data.github.owner}/${this.data.github.name}/commit/${commit.hash}`;\n    const imgSrc = `https://img.shields.io/badge/${commit.shortHash}-${commit.type}-${color}`;\n    return `[![${commit.type} - ${commit.shortHash}](${imgSrc})](${url})`;\n  }\n}\n\n/**\n * Builds a date stamp for stamping in release notes.\n *\n * Uses the current date, or a provided date in the format of YYYY-MM-DD, i.e. 1970-11-05.\n */\nexport function buildDateStamp(date = new Date()) {\n  const year = `${date.getFullYear()}`;\n  const month = `${date.getMonth() + 1}`.padStart(2, '0');\n  const day = `${date.getDate()}`.padStart(2, '0');\n\n  return [year, month, day].join('-');\n}\n"]}