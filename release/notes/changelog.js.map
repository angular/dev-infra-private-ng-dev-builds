{"version":3,"file":"changelog.js","sourceRoot":"","sources":["changelog.ts"],"names":[],"mappings":"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","sourcesContent":["import {existsSync, readFileSync, writeFileSync} from 'fs';\nimport {join} from 'path';\nimport semver from 'semver';\nimport {GitClient} from '../../utils/git/git-client.js';\n\n/** Project-relative path for the changelog file. */\nconst changelogPath = 'CHANGELOG.md';\n\n/** Project-relative path for the changelog archive file. */\nconst changelogArchivePath = 'CHANGELOG_ARCHIVE.md';\n\n/** A marker used to split a CHANGELOG.md file into individual entries. */\nexport const splitMarker = '<!-- CHANGELOG SPLIT MARKER -->';\n\n/**\n * A string to use between each changelog entry when joining them together.\n *\n * Since all every changelog entry's content is trimmed, when joining back together, two new lines\n * must be placed around the splitMarker to create a one line buffer around the comment in the\n * markdown.\n * i.e.\n * <changelog entry content>\n *\n * <!-- CHANGELOG SPLIT MARKER -->\n *\n * <changelog entry content>\n */\nconst joinMarker = `\\n\\n${splitMarker}\\n\\n`;\n\n/** A RegExp matcher to extract the version of a changelog entry from the entry content. */\nconst versionAnchorMatcher = new RegExp(`<a name=\"(.*)\"></a>`);\n\n/** An individual changelog entry. */\ninterface ChangelogEntry {\n  content: string;\n  version: semver.SemVer;\n}\n\nexport class Changelog {\n  /** Prepend a changelog entry to the current changelog file. */\n  static prependEntryToChangelogFile(git: GitClient, entry: string) {\n    const changelog = new this(git);\n    changelog.prependEntryToChangelogFile(entry);\n  }\n\n  /**\n   * Move all changelog entries from the CHANGELOG.md file for versions prior to the provided\n   * version to the changelog archive.\n   *\n   * Versions should be used to determine which entries are moved to archive as versions are the\n   * most accurate piece of context found within a changelog entry to determine its relationship to\n   * other changelog entries.  This allows for example, moving all changelog entries out of the\n   * main changelog when a version moves out of support.\n   */\n  static moveEntriesPriorToVersionToArchive(git: GitClient, version: semver.SemVer) {\n    const changelog = new this(git);\n    changelog.moveEntriesPriorToVersionToArchive(version);\n  }\n\n  /**\n   * Remove all changelog entries from the CHANGELOG.md file for versions which are prereleases\n   * for the provided version. This is expected to be done on each major and minor release to remove\n   * the changelog entries which will be made redundant by the first major/minor changelog for a\n   * version.\n   */\n  static removePrereleaseEntriesForVersion(git: GitClient, version: semver.SemVer) {\n    const changelog = new this(git);\n    changelog.removePrereleaseEntriesForVersion(version);\n  }\n\n  // TODO(josephperrott): Remove this after it is unused.\n  /** Retrieve the file paths for the changelog files. */\n  static getChangelogFilePaths(git: GitClient) {\n    return new this(git);\n  }\n\n  /** The absolute path to the changelog file. */\n  readonly filePath = join(this.git.baseDir, changelogPath);\n  /** The absolute path to the changelog archive file. */\n  readonly archiveFilePath = join(this.git.baseDir, changelogArchivePath);\n  /**\n   * The changelog entries in the CHANGELOG.md file.\n   * Delays reading the CHANGELOG.md file until it is actually used.\n   */\n  private get entries() {\n    if (this._entries === undefined) {\n      return (this._entries = this.getEntriesFor(this.filePath));\n    }\n    return this._entries;\n  }\n  private _entries: undefined | ChangelogEntry[] = undefined;\n  /**\n   * The changelog entries in the CHANGELOG_ARCHIVE.md file.\n   * Delays reading the CHANGELOG_ARCHIVE.md file until it is actually used.\n   */\n  private get archiveEntries() {\n    if (this._archiveEntries === undefined) {\n      return (this._archiveEntries = this.getEntriesFor(this.archiveFilePath));\n    }\n    return this._archiveEntries;\n  }\n  private _archiveEntries: undefined | ChangelogEntry[] = undefined;\n\n  private constructor(private git: GitClient) {}\n\n  /** Prepend a changelog entry to the changelog. */\n  private prependEntryToChangelogFile(entry: string) {\n    this.entries.unshift(parseChangelogEntry(entry));\n    this.writeToChangelogFile();\n  }\n\n  /**\n   * Remove all changelog entries from the CHANGELOG.md file for versions which are prereleases\n   * for the provided version. This is expected to be done on each major and minor release to remove\n   * the changelog entries which will be made redundant by the first major/minor changelog for a\n   * version.\n   */\n  private removePrereleaseEntriesForVersion(version: semver.SemVer) {\n    this._entries = this.entries.filter((entry: ChangelogEntry) => {\n      // For entries which are a prerelease, ensure that at least one segment of the version is\n      // divergent from the version we are checking against.\n      if (entry.version.prerelease.length !== 0) {\n        return (\n          version.major !== entry.version.major ||\n          version.minor !== entry.version.minor ||\n          version.patch !== entry.version.patch\n        );\n      }\n      return true;\n    });\n    this.writeToChangelogFile();\n  }\n\n  /**\n   * Move all changelog entries from the CHANGELOG.md file for versions prior to the provided\n   * version to the changelog archive.\n   *\n   * Versions should be used to determine which entries are moved to archive as versions are the\n   * most accurate piece of context found within a changelog entry to determine its relationship to\n   * other changelog entries.  This allows for example, moving all changelog entries out of the\n   * main changelog when a version moves out of support.\n   */\n  private moveEntriesPriorToVersionToArchive(version: semver.SemVer) {\n    [...this.entries].reverse().forEach((entry: ChangelogEntry) => {\n      if (semver.lt(entry.version, version)) {\n        this.archiveEntries.unshift(entry);\n        this.entries.splice(this.entries.indexOf(entry), 1);\n      }\n    });\n\n    this.writeToChangelogFile();\n    if (this.archiveEntries.length) {\n      this.writeToChangelogArchiveFile();\n    }\n  }\n\n  /** Update the changelog archive file with the known changelog archive entries. */\n  private writeToChangelogArchiveFile(): void {\n    const changelogArchive = this.archiveEntries.map((entry) => entry.content).join(joinMarker);\n    writeFileSync(this.archiveFilePath, changelogArchive);\n  }\n\n  /** Update the changelog file with the known changelog entries. */\n  private writeToChangelogFile(): void {\n    const changelog = this.entries.map((entry) => entry.content).join(joinMarker);\n    writeFileSync(this.filePath, changelog, {});\n  }\n\n  /**\n   * Retrieve the changelog entries for the provide changelog path, if the file does not exist an\n   * empty array is returned.\n   */\n  private getEntriesFor(path: string): ChangelogEntry[] {\n    if (!existsSync(path)) {\n      return [];\n    }\n\n    return (\n      readFileSync(path, {encoding: 'utf8'})\n        // Use the versionMarker as the separator for .split().\n        .split(splitMarker)\n        // If the `split()` method finds the separator at the beginning or end of a string, it\n        // includes an empty string at the respective locaiton, so we filter to remove all of these\n        // potential empty strings.\n        .filter((entry) => entry.trim().length !== 0)\n        // Create a ChangelogEntry for each of the string entry.\n        .map(parseChangelogEntry)\n    );\n  }\n}\n\n/** Parse the provided string into a ChangelogEntry object. */\nfunction parseChangelogEntry(content: string): ChangelogEntry {\n  const versionMatcherResult = versionAnchorMatcher.exec(content);\n  if (versionMatcherResult === null) {\n    throw Error(`Unable to determine version for changelog entry: ${content}`);\n  }\n  const version = semver.parse(versionMatcherResult[1]);\n\n  if (version === null) {\n    throw Error(\n      `Unable to determine version for changelog entry, with tag: ${versionMatcherResult[1]}`,\n    );\n  }\n\n  return {\n    content: content.trim(),\n    version,\n  };\n}\n"]}