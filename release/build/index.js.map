{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"AAQA,OAAO,EAAC,OAAO,EAAE,IAAI,EAAC,MAAM,MAAM,CAAC;AACnC,OAAO,EAAC,aAAa,EAAC,MAAM,KAAK,CAAC;AAClC,OAAO,EAAC,IAAI,EAAC,MAAM,eAAe,CAAC;AAGnC,MAAM,OAAgB,WAAW;IAQ/B,MAAM,CAAC,KAAK,CAAC,WAAW;QACtB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC7B,MAAM,YAAY,GAAG,IAAI,CAAC,wBAAwB,EAAE,EAAE;gBAIpD,KAAK,EAAE,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC;aAChC,CAAC,CAAC;YACH,IAAI,aAAa,GAA0B,IAAI,CAAC;YAIhD,YAAY,CAAC,EAAE,CACb,SAAS,EACT,CAAC,aAA6B,EAAE,EAAE,CAAC,CAAC,aAAa,GAAG,aAAa,CAAC,CACnE,CAAC;YAGF,YAAY,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAGD,SAAS,wBAAwB;IAK/B,MAAM,UAAU,GAAG,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3D,OAAO,IAAI,CAAC,UAAU,EAAE,kCAAkC,CAAC,CAAC;AAC9D,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {dirname, join} from 'path';\nimport {fileURLToPath} from 'url';\nimport {fork} from 'child_process';\nimport {BuiltPackage} from '../config/index.js';\n\nexport abstract class BuildWorker {\n  /**\n   * Builds the release output without polluting the process stdout. Build scripts commonly\n   * print messages to stderr or stdout. This is fine in most cases, but sometimes other tooling\n   * reserves stdout for data transfer (e.g. when `ng release build --json` is invoked). To not\n   * pollute the stdout in such cases, we launch a child process for building the release packages\n   * and redirect all stdout output to the stderr channel (which can be read in the terminal).\n   */\n  static async invokeBuild(): Promise<BuiltPackage[] | null> {\n    return new Promise((resolve) => {\n      const buildProcess = fork(getBuildWorkerScriptPath(), {\n        // The stdio option is set to redirect any \"stdout\" output directly to the \"stderr\" file\n        // descriptor. An additional \"ipc\" file descriptor is created to support communication with\n        // the build process. https://nodejs.org/api/child_process.html#child_process_options_stdio.\n        stdio: ['inherit', 2, 2, 'ipc'],\n      });\n      let builtPackages: BuiltPackage[] | null = null;\n\n      // The child process will pass the `buildPackages()` output through the\n      // IPC channel. We keep track of it so that we can use it as resolve value.\n      buildProcess.on(\n        'message',\n        (buildResponse: BuiltPackage[]) => (builtPackages = buildResponse),\n      );\n\n      // On child process exit, resolve the promise with the received output.\n      buildProcess.on('exit', () => resolve(builtPackages));\n    });\n  }\n}\n\n/** Gets the absolute file path to the build worker script. */\nfunction getBuildWorkerScriptPath(): string {\n  // This file is getting bundled and ends up in `<pkg-root>/bundles/<chunk>`. We also\n  // bundle the build worker script as another entry-point and can reference\n  // it relatively as the path is preserved inside `bundles/`.\n  // *Note*: Relying on package resolution is problematic within ESM and with `local-dev.sh`\n  const bundlesDir = dirname(fileURLToPath(import.meta.url));\n  return join(bundlesDir, './release/build/build-worker.mjs');\n}\n"]}