{"version":3,"file":"cli.js","sourceRoot":"","sources":["cli.ts"],"names":[],"mappings":"AAgBA,OAAO,EAAC,SAAS,EAAC,MAAM,uBAAuB,CAAC;AAChD,OAAO,EAAC,KAAK,EAAE,GAAG,EAAC,MAAM,wBAAwB,CAAC;AAClD,OAAO,EAAC,wBAAwB,EAAe,MAAM,oBAAoB,CAAC;AAE1E,OAAO,EAAC,WAAW,EAAC,MAAM,YAAY,CAAC;AAgBvC,SAAS,OAAO,CAAC,IAAU;IACzB,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;QACzB,IAAI,EAAE,SAAS;QACf,WAAW,EAAE,iEAAiE;QAC9E,OAAO,EAAE,KAAK;KACf,CAAC,CAAC;AACL,CAAC;AAGD,KAAK,UAAU,OAAO,CAAC,IAAoC;IACzD,MAAM,MAAM,GAAG,MAAM,SAAS,EAAE,CAAC;IACjC,wBAAwB,CAAC,MAAM,CAAC,CAAC;IACjC,MAAM,EAAC,WAAW,EAAC,GAAG,MAAM,CAAC,OAAO,CAAC;IACrC,IAAI,aAAa,GAAG,MAAM,WAAW,CAAC,WAAW,EAAE,CAAC;IAGpD,IAAI,aAAa,KAAK,IAAI,EAAE,CAAC;QAC3B,GAAG,CAAC,KAAK,CAAC,kEAAkE,CAAC,CAAC;QAC9E,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC;IAID,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QAC/B,GAAG,CAAC,KAAK,CAAC,mEAAmE,CAAC,CAAC;QAC/E,GAAG,CAAC,KAAK,CAAC,0DAA0D,CAAC,CAAC;QACtE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC;IAED,MAAM,eAAe,GAAG,WAAW,CAAC,MAAM,CACxC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,aAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,IAAI,CAAC,CAC1D,CAAC;IAIF,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QAC/B,GAAG,CAAC,KAAK,CAAC,0DAA0D,CAAC,CAAC;QACtE,eAAe,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,WAAW,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QACnE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC;IAED,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;QACd,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAyB,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IACvF,CAAC;SAAM,CAAC;QACN,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC,CAAC;QACjD,aAAa,CAAC,OAAO,CAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IACxE,CAAC;AACH,CAAC;AAGD,MAAM,CAAC,MAAM,yBAAyB,GAA2C;IAC/E,OAAO;IACP,OAAO;IACP,OAAO,EAAE,OAAO;IAChB,QAAQ,EAAE,mDAAmD;CAC9D,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// ---- **IMPORTANT** ----\n// This command is part of our external commands invoked by the release publish\n// command. Before making changes, keep in mind that more recent `ng-dev` versions\n// can still invoke this command.\n// ------------------------\n\nimport {Argv, Arguments, CommandModule} from 'yargs';\n\nimport {getConfig} from '../../utils/config.js';\nimport {green, Log} from '../../utils/logging.js';\nimport {assertValidReleaseConfig, BuiltPackage} from '../config/index.js';\n\nimport {BuildWorker} from './index.js';\n\n/**\n * Type describing the JSON output of this command.\n *\n * @important When changing this, make sure the release action\n *   invocation is updated as well.\n */\nexport type ReleaseBuildJsonStdout = BuiltPackage[];\n\n/** Command line options for building a release. */\nexport interface ReleaseBuildOptions {\n  json: boolean;\n}\n\n/** Yargs command builder for configuring the `ng-dev release build` command. */\nfunction builder(argv: Argv): Argv<ReleaseBuildOptions> {\n  return argv.option('json', {\n    type: 'boolean',\n    description: 'Whether the built packages should be printed to stdout as JSON.',\n    default: false,\n  });\n}\n\n/** Yargs command handler for building a release. */\nasync function handler(args: Arguments<ReleaseBuildOptions>) {\n  const config = await getConfig();\n  assertValidReleaseConfig(config);\n  const {npmPackages} = config.release;\n  let builtPackages = await BuildWorker.invokeBuild();\n\n  // If package building failed, print an error and exit with an error code.\n  if (builtPackages === null) {\n    Log.error(`  ✘   Could not build release output. Please check output above.`);\n    process.exit(1);\n  }\n\n  // If no packages have been built, we assume that this is never correct\n  // and exit with an error code.\n  if (builtPackages.length === 0) {\n    Log.error(`  ✘   No release packages have been built. Please ensure that the`);\n    Log.error(`      build script is configured correctly in \".ng-dev\".`);\n    process.exit(1);\n  }\n\n  const missingPackages = npmPackages.filter(\n    (pkg) => !builtPackages!.find((b) => b.name === pkg.name),\n  );\n\n  // Check for configured release packages which have not been built. We want to\n  // error and exit if any configured package has not been built.\n  if (missingPackages.length > 0) {\n    Log.error(`  ✘   Release output missing for the following packages:`);\n    missingPackages.forEach((pkg) => Log.error(`      - ${pkg.name}`));\n    process.exit(1);\n  }\n\n  if (args.json) {\n    process.stdout.write(JSON.stringify(<ReleaseBuildJsonStdout>builtPackages, null, 2));\n  } else {\n    Log.info(green('  ✓   Built release packages.'));\n    builtPackages.forEach(({name}) => Log.info(green(`      - ${name}`)));\n  }\n}\n\n/** CLI command module for building release output. */\nexport const ReleaseBuildCommandModule: CommandModule<{}, ReleaseBuildOptions> = {\n  builder,\n  handler,\n  command: 'build',\n  describe: 'Builds the release output for the current branch.',\n};\n"]}