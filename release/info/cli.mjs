/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { GitClient } from '../../utils/git/git-client.js';
import { assertValidReleaseConfig } from '../config/index.js';
import { ActiveReleaseTrains } from '../versioning/active-release-trains.js';
import { printActiveReleaseTrains } from '../versioning/print-active-trains.js';
import { getNextBranchName } from '../versioning/index.js';
import { getConfig } from '../../utils/config.js';
/** Yargs command builder for the `ng-dev release info` command. */
function builder(argv) {
    return argv.option('json', {
        type: 'boolean',
        description: 'Whether information should be written as JSON to stdout.',
        default: false,
    });
}
/** Yargs command handler for printing release information. */
async function handler(argv) {
    const config = await getConfig();
    assertValidReleaseConfig(config);
    // If JSON output is requested, print the information as JSON to stdout.
    if (argv.json) {
        process.stdout.write(JSON.stringify(config.release, null, 2));
        return;
    }
    const git = await GitClient.get();
    const nextBranchName = getNextBranchName(git.config.github);
    const repo = { api: git.github, ...git.remoteConfig, nextBranchName };
    const releaseTrains = await ActiveReleaseTrains.fetch(repo);
    // Print the active release trains.
    await printActiveReleaseTrains(releaseTrains, config.release);
}
/** CLI command module for retrieving release information. */
export const ReleaseInfoCommandModule = {
    builder,
    handler,
    command: 'info',
    describe: 'Prints information for the current release state.',
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbmctZGV2L3JlbGVhc2UvaW5mby9jbGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBVUgsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLCtCQUErQixDQUFDO0FBQ3hELE9BQU8sRUFBQyx3QkFBd0IsRUFBYSxNQUFNLG9CQUFvQixDQUFDO0FBQ3hFLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLHdDQUF3QyxDQUFDO0FBQzNFLE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLHNDQUFzQyxDQUFDO0FBQzlFLE9BQU8sRUFBQyxpQkFBaUIsRUFBcUIsTUFBTSx3QkFBd0IsQ0FBQztBQUM3RSxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFlaEQsbUVBQW1FO0FBQ25FLFNBQVMsT0FBTyxDQUFDLElBQVU7SUFDekIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtRQUN6QixJQUFJLEVBQUUsU0FBUztRQUNmLFdBQVcsRUFBRSwwREFBMEQ7UUFDdkUsT0FBTyxFQUFFLEtBQUs7S0FDZixDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsOERBQThEO0FBQzlELEtBQUssVUFBVSxPQUFPLENBQUMsSUFBbUM7SUFDeEQsTUFBTSxNQUFNLEdBQUcsTUFBTSxTQUFTLEVBQUUsQ0FBQztJQUNqQyx3QkFBd0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVqQyx3RUFBd0U7SUFDeEUsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDZCxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUF3QixNQUFNLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JGLE9BQU87SUFDVCxDQUFDO0lBRUQsTUFBTSxHQUFHLEdBQUcsTUFBTSxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDbEMsTUFBTSxjQUFjLEdBQUcsaUJBQWlCLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1RCxNQUFNLElBQUksR0FBdUIsRUFBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxZQUFZLEVBQUUsY0FBYyxFQUFDLENBQUM7SUFDeEYsTUFBTSxhQUFhLEdBQUcsTUFBTSxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFNUQsbUNBQW1DO0lBQ25DLE1BQU0sd0JBQXdCLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNoRSxDQUFDO0FBRUQsNkRBQTZEO0FBQzdELE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUEwQztJQUM3RSxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU8sRUFBRSxNQUFNO0lBQ2YsUUFBUSxFQUFFLG1EQUFtRDtDQUM5RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTENcbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbi8vIC0tLS0gKipJTVBPUlRBTlQqKiAtLS0tXG4vLyBUaGlzIGNvbW1hbmQgaXMgcGFydCBvZiBvdXIgZXh0ZXJuYWwgY29tbWFuZHMgaW52b2tlZCBieSB0aGUgcmVsZWFzZSBwdWJsaXNoXG4vLyBjb21tYW5kLiBCZWZvcmUgbWFraW5nIGNoYW5nZXMsIGtlZXAgaW4gbWluZCB0aGF0IG1vcmUgcmVjZW50IGBuZy1kZXZgIHZlcnNpb25zXG4vLyBjYW4gc3RpbGwgaW52b2tlIHRoaXMgY29tbWFuZC5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5pbXBvcnQge0FyZ3YsIEFyZ3VtZW50cywgQ29tbWFuZE1vZHVsZX0gZnJvbSAneWFyZ3MnO1xuXG5pbXBvcnQge0dpdENsaWVudH0gZnJvbSAnLi4vLi4vdXRpbHMvZ2l0L2dpdC1jbGllbnQuanMnO1xuaW1wb3J0IHthc3NlcnRWYWxpZFJlbGVhc2VDb25maWcsIE5wbVBhY2thZ2V9IGZyb20gJy4uL2NvbmZpZy9pbmRleC5qcyc7XG5pbXBvcnQge0FjdGl2ZVJlbGVhc2VUcmFpbnN9IGZyb20gJy4uL3ZlcnNpb25pbmcvYWN0aXZlLXJlbGVhc2UtdHJhaW5zLmpzJztcbmltcG9ydCB7cHJpbnRBY3RpdmVSZWxlYXNlVHJhaW5zfSBmcm9tICcuLi92ZXJzaW9uaW5nL3ByaW50LWFjdGl2ZS10cmFpbnMuanMnO1xuaW1wb3J0IHtnZXROZXh0QnJhbmNoTmFtZSwgUmVsZWFzZVJlcG9XaXRoQXBpfSBmcm9tICcuLi92ZXJzaW9uaW5nL2luZGV4LmpzJztcbmltcG9ydCB7Z2V0Q29uZmlnfSBmcm9tICcuLi8uLi91dGlscy9jb25maWcuanMnO1xuXG4vKipcbiAqIFR5cGUgZGVzY3JpYmluZyB0aGUgSlNPTiBvdXRwdXQgb2YgdGhpcyBjb21tYW5kLlxuICpcbiAqIEBpbXBvcnRhbnQgV2hlbiBjaGFuZ2luZyB0aGlzLCBtYWtlIHN1cmUgdGhlIHJlbGVhc2UgYWN0aW9uXG4gKiAgIGludm9jYXRpb24gaXMgdXBkYXRlZCBhcyB3ZWxsLlxuICovXG5leHBvcnQgdHlwZSBSZWxlYXNlSW5mb0pzb25TdGRvdXQgPSB7bnBtUGFja2FnZXM6IE5wbVBhY2thZ2VbXX07XG5cbi8qKiBDb21tYW5kIGxpbmUgb3B0aW9ucyBmb3IgcHJpbnRpbmcgcmVsZWFzZSBpbmZvcm1hdGlvbi4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVsZWFzZUluZm9PcHRpb25zIHtcbiAganNvbjogYm9vbGVhbjtcbn1cblxuLyoqIFlhcmdzIGNvbW1hbmQgYnVpbGRlciBmb3IgdGhlIGBuZy1kZXYgcmVsZWFzZSBpbmZvYCBjb21tYW5kLiAqL1xuZnVuY3Rpb24gYnVpbGRlcihhcmd2OiBBcmd2KTogQXJndjxSZWxlYXNlSW5mb09wdGlvbnM+IHtcbiAgcmV0dXJuIGFyZ3Yub3B0aW9uKCdqc29uJywge1xuICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICBkZXNjcmlwdGlvbjogJ1doZXRoZXIgaW5mb3JtYXRpb24gc2hvdWxkIGJlIHdyaXR0ZW4gYXMgSlNPTiB0byBzdGRvdXQuJyxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgfSk7XG59XG5cbi8qKiBZYXJncyBjb21tYW5kIGhhbmRsZXIgZm9yIHByaW50aW5nIHJlbGVhc2UgaW5mb3JtYXRpb24uICovXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVyKGFyZ3Y6IEFyZ3VtZW50czxSZWxlYXNlSW5mb09wdGlvbnM+KSB7XG4gIGNvbnN0IGNvbmZpZyA9IGF3YWl0IGdldENvbmZpZygpO1xuICBhc3NlcnRWYWxpZFJlbGVhc2VDb25maWcoY29uZmlnKTtcblxuICAvLyBJZiBKU09OIG91dHB1dCBpcyByZXF1ZXN0ZWQsIHByaW50IHRoZSBpbmZvcm1hdGlvbiBhcyBKU09OIHRvIHN0ZG91dC5cbiAgaWYgKGFyZ3YuanNvbikge1xuICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKEpTT04uc3RyaW5naWZ5KDxSZWxlYXNlSW5mb0pzb25TdGRvdXQ+Y29uZmlnLnJlbGVhc2UsIG51bGwsIDIpKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBnaXQgPSBhd2FpdCBHaXRDbGllbnQuZ2V0KCk7XG4gIGNvbnN0IG5leHRCcmFuY2hOYW1lID0gZ2V0TmV4dEJyYW5jaE5hbWUoZ2l0LmNvbmZpZy5naXRodWIpO1xuICBjb25zdCByZXBvOiBSZWxlYXNlUmVwb1dpdGhBcGkgPSB7YXBpOiBnaXQuZ2l0aHViLCAuLi5naXQucmVtb3RlQ29uZmlnLCBuZXh0QnJhbmNoTmFtZX07XG4gIGNvbnN0IHJlbGVhc2VUcmFpbnMgPSBhd2FpdCBBY3RpdmVSZWxlYXNlVHJhaW5zLmZldGNoKHJlcG8pO1xuXG4gIC8vIFByaW50IHRoZSBhY3RpdmUgcmVsZWFzZSB0cmFpbnMuXG4gIGF3YWl0IHByaW50QWN0aXZlUmVsZWFzZVRyYWlucyhyZWxlYXNlVHJhaW5zLCBjb25maWcucmVsZWFzZSk7XG59XG5cbi8qKiBDTEkgY29tbWFuZCBtb2R1bGUgZm9yIHJldHJpZXZpbmcgcmVsZWFzZSBpbmZvcm1hdGlvbi4gKi9cbmV4cG9ydCBjb25zdCBSZWxlYXNlSW5mb0NvbW1hbmRNb2R1bGU6IENvbW1hbmRNb2R1bGU8e30sIFJlbGVhc2VJbmZvT3B0aW9ucz4gPSB7XG4gIGJ1aWxkZXIsXG4gIGhhbmRsZXIsXG4gIGNvbW1hbmQ6ICdpbmZvJyxcbiAgZGVzY3JpYmU6ICdQcmludHMgaW5mb3JtYXRpb24gZm9yIHRoZSBjdXJyZW50IHJlbGVhc2Ugc3RhdGUuJyxcbn07XG4iXX0=