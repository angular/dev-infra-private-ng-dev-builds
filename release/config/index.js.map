{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"AASA,OAAO,EAAC,qBAAqB,EAAc,MAAM,uBAAuB,CAAC;AA6GzE,MAAM,UAAU,wBAAwB,CACtC,MAA0C;IAG1C,MAAM,MAAM,GAAa,EAAE,CAAC;IAE5B,IAAI,MAAM,CAAC,OAAO,KAAK,SAAS,EAAE,CAAC;QACjC,MAAM,IAAI,qBAAqB,CAAC,yCAAyC,CAAC,CAAC;IAC7E,CAAC;IACD,IAAI,MAAM,CAAC,OAAO,CAAC,wBAAwB,KAAK,SAAS,EAAE,CAAC;QAC1D,MAAM,CAAC,IAAI,CAAC,yDAAyD,CAAC,CAAC;IACzE,CAAC;IACD,IAAI,MAAM,CAAC,OAAO,CAAC,WAAW,KAAK,SAAS,EAAE,CAAC;QAC7C,MAAM,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;IAC5D,CAAC;IACD,IAAI,MAAM,CAAC,OAAO,CAAC,aAAa,KAAK,SAAS,EAAE,CAAC;QAC/C,MAAM,CAAC,IAAI,CAAC,uDAAuD,CAAC,CAAC;IACvE,CAAC;IAED,IAAI,MAAM,CAAC,OAAO,CAAC,wBAAwB,IAAI,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;QAC1E,MAAM,sBAAsB,GAAG,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAC5D,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,KAAK,MAAM,CAAC,OAAO,EAAE,wBAAwB,CAC/D,CAAC;QAEF,IAAI,sBAAsB,KAAK,SAAS,EAAE,CAAC;YACzC,MAAM,CAAC,IAAI,CACT,0CAA0C,sBAAsB,mBAAmB;gBACjF,6BAA6B,CAChC,CAAC;QACJ,CAAC;aAAM,IAAI,sBAAsB,CAAC,YAAY,EAAE,CAAC;YAC/C,MAAM,CAAC,IAAI,CACT,0CAA0C,sBAAsB,sBAAsB;gBACpF,2EAA2E;gBAC3E,4DAA4D,CAC/D,CAAC;QACJ,CAAC;IACH,CAAC;IAED,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;QAClB,MAAM,IAAI,qBAAqB,CAAC,iCAAiC,EAAE,MAAM,CAAC,CAAC;IAC7E,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommitFromGitLog} from '../../commit-message/parse.js';\nimport {ConfigValidationError, NgDevConfig} from '../../utils/config.js';\n\n/** Interface describing a built package. */\nexport interface BuiltPackage {\n  /** Name of the package. */\n  name: string;\n  /** Path to the package output directory. */\n  outputPath: string;\n}\n\n/** Interface describing a NPM package that will be released. */\nexport interface NpmPackage {\n  /** Name of the package. */\n  name: string;\n  /**\n   * Whether the package is experimental.\n   *\n   * Packages marked as experimental will use experimental SemVer versioning\n   * and will not have any LTS dist tags configured.\n   */\n  experimental?: boolean;\n}\n\n/** Configuration for staging and publishing a release. */\nexport interface ReleaseConfig {\n  /** Registry URL used for publishing release packages. Defaults to the NPM registry. */\n  publishRegistry?: string;\n  /**\n   * The representative NPM package for this project. The specified package will be used\n   * for querying the NPM registry to e.g. determine active LTS branches.\n   *\n   * A representative package is expected to be a long-standing, non-experimental package\n   * that is managed and released as part of the `ng-dev release` command.\n   */\n  representativeNpmPackage: string;\n  /** List of NPM packages that are published as part of this project. */\n  npmPackages: NpmPackage[];\n  /** Builds release packages and returns a list of paths pointing to the output. */\n  buildPackages: () => Promise<BuiltPackage[] | null>;\n  /** The list of github labels to add to the release PRs. */\n  releasePrLabels?: string[];\n  /** Configuration for creating release notes during publishing. */\n  releaseNotes?: ReleaseNotesConfig;\n  /**\n   * Optional function that can be provided to run checks for a version before\n   * it can be released.\n   *\n   * If provided, the release can occur when the promise resolves. Upon rejection,\n   * the release will abort the release and print the `ReleasePrecheckError` error.\n   */\n  prereleaseCheck?: (\n    newVersion: string,\n    builtPackagesWithInfo: BuiltPackageWithInfo[],\n  ) => Promise<void>;\n\n  /**\n   * Whether the repository is in rules_js interop mode, relying on\n   * integrity files to be automatically updated.\n   */\n  // TODO(devversion): Remove after completing `rules_js` migration.\n  rulesJsInteropMode?: boolean;\n}\n\n/**\n * Type describing a built package with its associated NPM package info and package\n * content hash, useful for verifying its integrity or running custom prechecks.\n */\nexport interface BuiltPackageWithInfo extends BuiltPackage, NpmPackage {\n  /** A deterministic hash that can be used to verify the contents of the package. */\n  hash: string;\n}\n\n/** Configuration for creating release notes during publishing. */\nexport interface ReleaseNotesConfig {\n  /** Whether to prompt for and include a release title in the generated release notes. */\n  useReleaseTitle?: boolean;\n  /** List of commit scopes to exclude from generated release notes. */\n  hiddenScopes?: string[];\n  /** Optional function that can be used to categorize commits for the release notes. */\n  categorizeCommit?: (commit: CommitFromGitLog) => {\n    /**\n     * Name of the group the commit should be displayed within. If not specified,\n     * commits will be grouped based on their scope.\n     */\n    groupName?: string;\n    /**\n     * Description of the commit. This option allows consumers to incorporate additional\n     * information for commits that would otherwise not be captured.\n     *\n     * If not specified, the commit subject is used as description. i.e. the description does\n     * not include the type and scope. e.g. `fix(a): <desc>` will turn into `<desc>`.\n     */\n    description?: string;\n  };\n  /**\n   * List that can be set to control the order of how groups appear in the release\n   * notes. Elements in the list need to match with the groups as determined according\n   * to the `commitToGroup` option.\n   *\n   * Each group for the release notes, will appear in the order provided in `groupOrder`\n   * and any other groups will appear after these groups, sorted alphanumerically.\n   */\n  groupOrder?: string[];\n}\n\n/** Configuration for releases in the dev-infra configuration. */\nexport type DevInfraReleaseConfig = {release: ReleaseConfig};\n\n/** Asserts that the given configuration is a valid `DevInfraReleaseConfig`. */\nexport function assertValidReleaseConfig<T extends NgDevConfig>(\n  config: T & Partial<DevInfraReleaseConfig>,\n): asserts config is T & DevInfraReleaseConfig {\n  // List of errors encountered validating the config.\n  const errors: string[] = [];\n\n  if (config.release === undefined) {\n    throw new ConfigValidationError('No configuration provided for `release`');\n  }\n  if (config.release.representativeNpmPackage === undefined) {\n    errors.push(`No \"representativeNpmPackage\" configured for releasing.`);\n  }\n  if (config.release.npmPackages === undefined) {\n    errors.push(`No \"npmPackages\" configured for releasing.`);\n  }\n  if (config.release.buildPackages === undefined) {\n    errors.push(`No \"buildPackages\" function configured for releasing.`);\n  }\n\n  if (config.release.representativeNpmPackage && config.release.npmPackages) {\n    const representativePkgEntry = config.release.npmPackages.find(\n      (pkg) => pkg.name === config.release?.representativeNpmPackage,\n    );\n\n    if (representativePkgEntry === undefined) {\n      errors.push(\n        `Configured \"representativeNpmPackage\" (${representativePkgEntry}) does not match ` +\n          `a package in \"npmPackages\".`,\n      );\n    } else if (representativePkgEntry.experimental) {\n      errors.push(\n        `Configured \"representativeNpmPackage\" (${representativePkgEntry}) corresponds to an ` +\n          `experimental package. The representative NPM package is expected to be a ` +\n          `long-standing and non-experimental package of the project.`,\n      );\n    }\n  }\n\n  if (errors.length) {\n    throw new ConfigValidationError('Invalid `release` configuration', errors);\n  }\n}\n"]}