{"version":3,"file":"npm-registry.js","sourceRoot":"","sources":["npm-registry.ts"],"names":[],"mappings":"AAsCA,MAAM,CAAC,MAAM,oBAAoB,GAAiD,EAAE,CAAC;AAGrF,MAAM,CAAC,KAAK,UAAU,0BAA0B,CAAC,MAAqB;IACpE,OAAO,MAAM,+BAA+B,CAAC,MAAM,CAAC,wBAAwB,CAAC,CAAC;AAChF,CAAC;AAGD,MAAM,CAAC,KAAK,UAAU,uBAAuB,CAC3C,OAAsB,EACtB,MAAqB;IAErB,MAAM,EAAC,QAAQ,EAAC,GAAG,MAAM,0BAA0B,CAAC,MAAM,CAAC,CAAC;IAC5D,OAAO,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,KAAK,SAAS,CAAC;AAClD,CAAC;AAGD,KAAK,UAAU,+BAA+B,CAAC,OAAe;IAC5D,IAAI,oBAAoB,CAAC,OAAO,CAAC,KAAK,SAAS,EAAE,CAAC;QAChD,oBAAoB,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,8BAA8B,OAAO,EAAE,CAAC,CAAC,IAAI,CACjF,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,EAA6B,CAC3C,CAAC;IACJ,CAAC;IACD,OAAO,MAAM,oBAAoB,CAAC,OAAO,CAAC,CAAC;AAC7C,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport semver from 'semver';\n\nimport {ReleaseConfig} from '../config/index.js';\nimport {LtsNpmDistTag} from './long-term-support.js';\n\n/**\n * Type describing the possible NPM dist tags used by Angular packages:\n *   - latest: Stable versions. These are releases from the \"latest\" train.\n *   - next: Next versions. These are releases from the FF/RC or \"next\" train.\n *   - do-not-use-exceptional-minor: Exceptional minors have their own NPM dist tag since\n *     we would not want to override `latest`, nor would we want to revert `@next` if\n *     the version is already ahead. The tags are expected to be deleted after the minor\n *     becomes stable.\n */\nexport type NpmDistTag = 'latest' | 'next' | 'do-not-use-exceptional-minor' | LtsNpmDistTag;\n\n/** Type describing an NPM package fetched from the registry. */\nexport interface NpmPackageInfo {\n  /** Maps of versions and their package JSON objects. */\n  'versions': {[name: string]: undefined | object};\n  /** Map of NPM dist-tags and their chosen version. */\n  'dist-tags': {[tagName: string]: string | undefined};\n  /** Map of versions and their ISO release time. */\n  'time': {[name: string]: string};\n}\n\n/**\n * Cache for requested NPM package information. A cache is desirable as the NPM\n * registry requests are usually very large and slow.\n */\nexport const _npmPackageInfoCache: {[pkgName: string]: Promise<NpmPackageInfo>} = {};\n\n/** Fetches the NPM package representing the project. */\nexport async function fetchProjectNpmPackageInfo(config: ReleaseConfig): Promise<NpmPackageInfo> {\n  return await fetchPackageInfoFromNpmRegistry(config.representativeNpmPackage);\n}\n\n/** Gets whether the given version is published to NPM or not */\nexport async function isVersionPublishedToNpm(\n  version: semver.SemVer,\n  config: ReleaseConfig,\n): Promise<boolean> {\n  const {versions} = await fetchProjectNpmPackageInfo(config);\n  return versions[version.format()] !== undefined;\n}\n\n/** Fetches the specified NPM package from the NPM registry. */\nasync function fetchPackageInfoFromNpmRegistry(pkgName: string): Promise<NpmPackageInfo> {\n  if (_npmPackageInfoCache[pkgName] === undefined) {\n    _npmPackageInfoCache[pkgName] = fetch(`https://registry.npmjs.org/${pkgName}`).then(\n      (r) => r.json() as Promise<NpmPackageInfo>,\n    );\n  }\n  return await _npmPackageInfoCache[pkgName];\n}\n"]}