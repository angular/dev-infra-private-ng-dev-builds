{"version":3,"file":"long-term-support.js","sourceRoot":"","sources":["long-term-support.ts"],"names":[],"mappings":"AAQA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAI5B,OAAO,EAAC,0BAA0B,EAAC,MAAM,mBAAmB,CAAC;AA2B7D,MAAM,0BAA0B,GAAG,CAAC,CAAC;AAMrC,MAAM,4BAA4B,GAAG,EAAE,CAAC;AAGxC,MAAM,kBAAkB,GAAG,cAAc,CAAC;AAG1C,MAAM,CAAC,KAAK,UAAU,mCAAmC,CACvD,MAAqB;IAErB,MAAM,EAAC,WAAW,EAAE,QAAQ,EAAE,IAAI,EAAC,GAAG,MAAM,0BAA0B,CAAC,MAAM,CAAC,CAAC;IAC/E,MAAM,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC;IACzB,MAAM,MAAM,GAAgB,EAAE,CAAC;IAC/B,MAAM,QAAQ,GAAgB,EAAE,CAAC;IAKjC,KAAK,MAAM,UAAU,IAAI,QAAQ,EAAE,CAAC;QAClC,IAAI,YAAY,CAAC,UAAU,CAAC,EAAE,CAAC;YAC7B,MAAM,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAE,CAAC;YACpD,MAAM,UAAU,GAAG,GAAG,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,IAAI,CAAC;YACzD,MAAM,gBAAgB,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC;YAChE,MAAM,UAAU,GAAG,wBAAwB,CAAC,gBAAgB,CAAC,CAAC;YAC9D,MAAM,SAAS,GAAc,EAAC,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,UAAU,EAAC,CAAC;YAGrE,IAAI,KAAK,IAAI,UAAU,EAAE,CAAC;gBACxB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACzB,CAAC;iBAAM,CAAC;gBACN,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC3B,CAAC;QACH,CAAC;IACH,CAAC;IAGD,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;IAC7D,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;IAE/D,OAAO,EAAC,MAAM,EAAE,QAAQ,EAAC,CAAC;AAC5B,CAAC;AAGD,MAAM,UAAU,YAAY,CAAC,OAAe;IAC1C,OAAO,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAC1C,CAAC;AAMD,MAAM,UAAU,wBAAwB,CAAC,gBAAsB;IAC7D,OAAO,IAAI,IAAI,CACb,gBAAgB,CAAC,WAAW,EAAE,EAC9B,gBAAgB,CAAC,QAAQ,EAAE,GAAG,0BAA0B,GAAG,4BAA4B,EACvF,gBAAgB,CAAC,OAAO,EAAE,EAC1B,gBAAgB,CAAC,QAAQ,EAAE,EAC3B,gBAAgB,CAAC,UAAU,EAAE,EAC7B,gBAAgB,CAAC,UAAU,EAAE,EAC7B,gBAAgB,CAAC,eAAe,EAAE,CACnC,CAAC;AACJ,CAAC;AAGD,MAAM,UAAU,uBAAuB,CAAC,KAAa;IAEnD,OAAO,IAAI,KAAK,MAAe,CAAC;AAClC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport semver from 'semver';\n\nimport {ReleaseConfig} from '../config/index.js';\n\nimport {fetchProjectNpmPackageInfo} from './npm-registry.js';\n\n/** Type describing a NPM dist tag indicating long-term support. */\nexport type LtsNpmDistTag = `v${number}-lts`;\n\n/** Interface describing determined LTS branches. */\nexport interface LtsBranches {\n  /** List of active LTS version branches. */\n  active: LtsBranch[];\n  /** List of inactive LTS version branches. */\n  inactive: LtsBranch[];\n}\n\n/** Interface describing an LTS version branch. */\nexport interface LtsBranch {\n  /** Name of the branch. */\n  name: string;\n  /** Most recent version for the given LTS branch. */\n  version: semver.SemVer;\n  /** NPM dist tag for the LTS version. */\n  npmDistTag: LtsNpmDistTag;\n}\n\n/**\n * Number of months a major version in Angular is actively supported. See:\n * https://angular.io/guide/releases#support-policy-and-schedule.\n */\nconst majorActiveSupportDuration = 6;\n\n/**\n * Number of months a major version has active long-term support. See:\n * https://angular.io/guide/releases#support-policy-and-schedule.\n */\nconst majorLongTermSupportDuration = 12;\n\n/** Regular expression that matches LTS NPM dist tags. */\nconst ltsNpmDistTagRegex = /^v(\\d+)-lts$/;\n\n/** Finds all long-term support release trains from the specified NPM package. */\nexport async function fetchLongTermSupportBranchesFromNpm(\n  config: ReleaseConfig,\n): Promise<LtsBranches> {\n  const {'dist-tags': distTags, time} = await fetchProjectNpmPackageInfo(config);\n  const today = new Date();\n  const active: LtsBranch[] = [];\n  const inactive: LtsBranch[] = [];\n\n  // Iterate through the NPM package information and determine active/inactive LTS versions with\n  // their corresponding branches. We assume that an LTS tagged version in NPM belongs to the\n  // last-minor branch of a given major (i.e. we assume there are no outdated LTS NPM dist tags).\n  for (const npmDistTag in distTags) {\n    if (isLtsDistTag(npmDistTag)) {\n      const version = semver.parse(distTags[npmDistTag])!;\n      const branchName = `${version.major}.${version.minor}.x`;\n      const majorReleaseDate = new Date(time[`${version.major}.0.0`]);\n      const ltsEndDate = computeLtsEndDateOfMajor(majorReleaseDate);\n      const ltsBranch: LtsBranch = {name: branchName, version, npmDistTag};\n      // Depending on whether the LTS phase is still active, add the branch\n      // to the list of active or inactive LTS branches.\n      if (today <= ltsEndDate) {\n        active.push(ltsBranch);\n      } else {\n        inactive.push(ltsBranch);\n      }\n    }\n  }\n\n  // Sort LTS branches in descending order. i.e. most recent ones first.\n  active.sort((a, b) => semver.rcompare(a.version, b.version));\n  inactive.sort((a, b) => semver.rcompare(a.version, b.version));\n\n  return {active, inactive};\n}\n\n/** Gets whether the specified tag corresponds to a LTS dist tag. */\nexport function isLtsDistTag(tagName: string): tagName is LtsNpmDistTag {\n  return ltsNpmDistTagRegex.test(tagName);\n}\n\n/**\n * Computes the date when long-term support ends for a major released at the\n * specified date.\n */\nexport function computeLtsEndDateOfMajor(majorReleaseDate: Date): Date {\n  return new Date(\n    majorReleaseDate.getFullYear(),\n    majorReleaseDate.getMonth() + majorActiveSupportDuration + majorLongTermSupportDuration,\n    majorReleaseDate.getDate(),\n    majorReleaseDate.getHours(),\n    majorReleaseDate.getMinutes(),\n    majorReleaseDate.getSeconds(),\n    majorReleaseDate.getMilliseconds(),\n  );\n}\n\n/** Gets the long-term support NPM dist tag for a given major version. */\nexport function getLtsNpmDistTagOfMajor(major: number): LtsNpmDistTag {\n  // LTS versions should be tagged in NPM in the following format: `v{major}-lts`.\n  return `v${major}-lts` as const;\n}\n"]}