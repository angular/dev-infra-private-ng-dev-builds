{"version":3,"file":"active-release-trains.js","sourceRoot":"","sources":["active-release-trains.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport semver from 'semver';\n\nimport {ReleaseTrain} from './release-trains.js';\nimport {\n  getBranchesForMajorVersions,\n  getVersionInfoForBranch,\n  ReleaseRepoWithApi,\n  VersionBranch,\n} from './version-branches.js';\n\ninterface DeterminationCheckFns {\n  canHaveExceptionalMinor: (rc: ReleaseTrain | null) => boolean;\n  isValidReleaseCandidateVersion: (v: semver.SemVer) => boolean;\n  isValidExceptionalMinorVersion: (v: semver.SemVer, rc: ReleaseTrain | null) => boolean;\n}\n\n/** The active release trains for a project. */\nexport class ActiveReleaseTrains {\n  /** Release-train currently in the \"release-candidate\" or \"feature-freeze\" phase. */\n  readonly releaseCandidate: ReleaseTrain | null = this.trains.releaseCandidate;\n  /** Release-train in the `next` phase. */\n  readonly next: ReleaseTrain = this.trains.next;\n  /** Release-train currently in the \"latest\" phase. */\n  readonly latest: ReleaseTrain = this.trains.latest;\n  /** Release-train for an exceptional minor in progress. */\n  readonly exceptionalMinor: ReleaseTrain | null = this.trains.exceptionalMinor;\n\n  constructor(\n    private trains: {\n      releaseCandidate: ReleaseTrain | null;\n      exceptionalMinor: ReleaseTrain | null;\n      next: ReleaseTrain;\n      latest: ReleaseTrain;\n    },\n  ) {}\n\n  /** Whether the active release trains indicate the repository is in a feature freeze state. */\n  isFeatureFreeze() {\n    return this.releaseCandidate !== null && this.releaseCandidate.version.prerelease[0] === 'next';\n  }\n\n  /** Fetches the active release trains for the configured project. */\n  static async fetch(repo: ReleaseRepoWithApi): Promise<ActiveReleaseTrains> {\n    return fetchActiveReleaseTrains(repo);\n  }\n}\n\n/** Fetches the active release trains for the configured project. */\nasync function fetchActiveReleaseTrains(repo: ReleaseRepoWithApi): Promise<ActiveReleaseTrains> {\n  const nextBranchName = repo.nextBranchName;\n  const {version: nextVersion} = await getVersionInfoForBranch(repo, nextBranchName);\n  const next = new ReleaseTrain(nextBranchName, nextVersion);\n  const majorVersionsToFetch: number[] = [];\n  const checks: DeterminationCheckFns = {\n    canHaveExceptionalMinor: () => false,\n    isValidReleaseCandidateVersion: () => false,\n    isValidExceptionalMinorVersion: () => false,\n  };\n\n  if (nextVersion.minor === 0) {\n    // CASE 1: Next is for a new major. Potential release-candidate/feature-freeze train\n    // can only be for the previous major. Usually patch is in the same minor as for RC/FF,\n    // but technically two majors can be in the works, so we also need to consider the second\n    // previous major\n\n    // Example scenarios:\n    //    * next = v15.0.x, rc/ff = v14.4.x, exc-minor = disallowed, patch = v14.3.x\n    //    * next = v15.0.x  rc/ff = null,    exc-minor = null,       patch = v14.3.x\n    //    * next = v15.0.x  rc/ff = null,    exc-minor = v14.4.x,    patch = v14.3.x\n    // Cases where two majors are in the works (unlikely- but technically possible)\n    //    * next = v15.0.x, rc/ff = v14.0.0, exc-minor = null,       patch = v13.2.x\n    //    * next = v15.0.x, rc/ff = v14.0.0, exc-minor = v13.3.x,    patch = v13.2.x\n    majorVersionsToFetch.push(nextVersion.major - 1, nextVersion.major - 2);\n    checks.isValidReleaseCandidateVersion = (v) => v.major === nextVersion.major - 1;\n    checks.canHaveExceptionalMinor = (rc) => rc === null || rc.isMajor;\n    checks.isValidExceptionalMinorVersion = (v, rc) =>\n      v.major === (rc === null ? nextVersion.major : rc.version.major) - 1;\n  } else if (nextVersion.minor === 1) {\n    // CASE 2: Next is for the first minor of a major release. Potential release-candidate/feature-freeze\n    // train is always guaranteed to be in the same major. Depending on if there is RC/FF, the patch train\n    // would be in the same major, or in the previous one. Example scenarios:\n    //    * next = v15.1.x, rc/ff = v15.0.x, exc-minor = null,       patch = v14.5.x\n    //    * next = v15.1.x, rc/ff = v15.0.x, exc-minor = v14.6.x,    patch = v14.5.x\n    //    * next = v15.1.x, rc/ff = null,    exc-minor = disallowed, patch = v15.0.x\n    majorVersionsToFetch.push(nextVersion.major, nextVersion.major - 1);\n    checks.isValidReleaseCandidateVersion = (v) => v.major === nextVersion.major;\n    checks.canHaveExceptionalMinor = (rc) => rc !== null && rc.isMajor;\n    checks.isValidExceptionalMinorVersion = (v, rc) => v.major === rc!.version.major - 1;\n  } else {\n    // CASE 3: Next for a normal minor (other cases as above). Potential release-candidate/feature-freeze\n    // train and the patch train are always guaranteed to be in the same major. Example scenarios:\n    //    * next = v15.2.x, rc/ff = v15.1.x, exc-minor = disallowed, patch = v15.0.x\n    //    * next = v15.2.x, rc/ff = null,    exc-minor = disallowed, patch = v15.1.x\n    majorVersionsToFetch.push(nextVersion.major);\n    checks.isValidReleaseCandidateVersion = (v) => v.major === nextVersion.major;\n    checks.canHaveExceptionalMinor = () => false;\n  }\n\n  // Collect all version-branches that should be considered for the latest version-branch,\n  // a potential exceptional minor train or feature-freeze/release-candidate train.\n  const branches = await getBranchesForMajorVersions(repo, majorVersionsToFetch);\n  const {latest, releaseCandidate, exceptionalMinor} =\n    await findActiveReleaseTrainsFromVersionBranches(repo, next, branches, checks);\n\n  if (latest === null) {\n    throw Error(\n      `Unable to determine the latest release-train. The following branches ` +\n        `have been considered: [${branches.map((b) => b.name).join(', ')}]`,\n    );\n  }\n\n  return new ActiveReleaseTrains({releaseCandidate, next, latest, exceptionalMinor});\n}\n\n/** Finds the currently active release trains from the specified version branches. */\nasync function findActiveReleaseTrainsFromVersionBranches(\n  repo: ReleaseRepoWithApi,\n  next: ReleaseTrain,\n  branches: VersionBranch[],\n  checks: DeterminationCheckFns,\n): Promise<{\n  latest: ReleaseTrain | null;\n  releaseCandidate: ReleaseTrain | null;\n  exceptionalMinor: ReleaseTrain | null;\n}> {\n  // Version representing the release-train currently in the next phase. Note that we ignore\n  // patch and pre-release segments in order to be able to compare the next release train to\n  // other release trains from version branches (which follow the `N.N.x` pattern).\n  const nextReleaseTrainVersion = semver.parse(`${next.version.major}.${next.version.minor}.0`)!;\n  const nextBranchName = repo.nextBranchName;\n\n  let latest: ReleaseTrain | null = null;\n  let releaseCandidate: ReleaseTrain | null = null;\n  let exceptionalMinor: ReleaseTrain | null = null;\n\n  // Iterate through the captured branches and find the latest non-prerelease branch and a\n  // potential release candidate branch. From the collected branches we iterate descending\n  // order (most recent semantic version-branch first). The first branch is either the latest\n  // active version branch (i.e. patch), a feature-freeze/release-candidate branch (ff/rc) or\n  // an in-progress exceptional minor:\n  //   * A FF/RC or exceptional minor branch cannot be more recent than the current next\n  //     version-branch, so we stop iterating once we found such a branch.\n  //   * As soon as we discover a version-branch not being an RC/FF or exceptional minor,\n  //     we know it is the active patch branch. We stop looking further.\n  //   * If we find a FF/RC branch, we continue looking for the next version-branch as\n  //     that one has to be an exceptional minor, or the latest active version-branch.\n  for (const {name, parsed} of branches) {\n    // It can happen that version branches have been accidentally created which are more recent\n    // than the release-train in the next branch (i.e. `main`). We could ignore such branches\n    // silently, but it might be symptomatic for an outdated version in the `next` branch, or an\n    // accidentally created branch by the caretaker. In either way we want to raise awareness.\n    if (semver.gt(parsed, nextReleaseTrainVersion)) {\n      throw Error(\n        `Discovered unexpected version-branch \"${name}\" for a release-train that is ` +\n          `more recent than the release-train currently in the \"${nextBranchName}\" branch. ` +\n          `Please either delete the branch if created by accident, or update the outdated ` +\n          `version in the next branch (${nextBranchName}).`,\n      );\n    } else if (semver.eq(parsed, nextReleaseTrainVersion)) {\n      throw Error(\n        `Discovered unexpected version-branch \"${name}\" for a release-train that is already ` +\n          `active in the \"${nextBranchName}\" branch. Please either delete the branch if ` +\n          `created by accident, or update the version in the next branch (${nextBranchName}).`,\n      );\n    }\n\n    const {version, isExceptionalMinor} = await getVersionInfoForBranch(repo, name);\n    const releaseTrain = new ReleaseTrain(name, version);\n    const isPrerelease = version.prerelease[0] === 'rc' || version.prerelease[0] === 'next';\n\n    if (isExceptionalMinor) {\n      if (exceptionalMinor !== null) {\n        throw Error(\n          `Unable to determine latest release-train. Found an additional exceptional minor ` +\n            `version branch: \"${name}\". Already discovered: ${exceptionalMinor.branchName}.`,\n        );\n      }\n      if (!checks.canHaveExceptionalMinor(releaseCandidate)) {\n        throw Error(\n          `Unable to determine latest release-train. Found an unexpected exceptional minor ` +\n            `version branch: \"${name}\". No exceptional minor is currently allowed.`,\n        );\n      }\n      if (!checks.isValidExceptionalMinorVersion(version, releaseCandidate)) {\n        throw Error(\n          `Unable to determine latest release-train. Found an invalid exceptional ` +\n            `minor version branch: \"${name}\". Invalid version: ${version}.`,\n        );\n      }\n      exceptionalMinor = releaseTrain;\n      continue;\n    }\n\n    if (isPrerelease) {\n      if (exceptionalMinor !== null) {\n        throw Error(\n          `Unable to determine latest release-train. Discovered a feature-freeze/release-candidate ` +\n            `version branch (${name}) that is older than an in-progress exceptional ` +\n            `minor (${exceptionalMinor.branchName}).`,\n        );\n      }\n      if (releaseCandidate !== null) {\n        throw Error(\n          `Unable to determine latest release-train. Found two consecutive ` +\n            `pre-release version branches. No exceptional minors are allowed currently, and ` +\n            `there cannot be multiple feature-freeze/release-candidate branches: \"${name}\".`,\n        );\n      }\n      if (!checks.isValidReleaseCandidateVersion(version)) {\n        throw Error(\n          `Discovered unexpected old feature-freeze/release-candidate branch. Expected no ` +\n            `version-branch in feature-freeze/release-candidate mode for v${version.major}.`,\n        );\n      }\n      releaseCandidate = releaseTrain;\n      continue;\n    }\n\n    // The first non-prerelease and non-exceptional-minor branch is always picked up\n    // as the release-train for `latest`. Once we discovered the latest release train,\n    // we skip looking further as there are no possible older active release trains.\n    latest = releaseTrain;\n    break;\n  }\n\n  return {releaseCandidate: releaseCandidate, exceptionalMinor, latest};\n}\n"]}