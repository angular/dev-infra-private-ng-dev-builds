{"version":3,"file":"version-branches.js","sourceRoot":"","sources":["version-branches.ts"],"names":[],"mappings":"AAQA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAK5B,MAAM,sBAAsB,GAAG,mBAAmB,CAAC;AAGnD,MAAM,CAAC,MAAM,gCAAgC,GAAG,2BAAoC,CAAC;AAyCrF,MAAM,UAAU,iBAAiB,CAAC,MAAoB;IACpD,OAAO,MAAM,CAAC,cAAc,CAAC;AAC/B,CAAC;AAGD,MAAM,CAAC,KAAK,UAAU,uBAAuB,CAC3C,IAAwB,EACxB,UAAkB;IAElB,MAAM,EAAC,IAAI,EAAC,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC;QAC7C,KAAK,EAAE,IAAI,CAAC,KAAK;QACjB,IAAI,EAAE,IAAI,CAAC,IAAI;QACf,IAAI,EAAE,eAAe;QACrB,GAAG,EAAE,UAAU;KAChB,CAAC,CAAC;IAGH,MAAM,OAAO,GAAI,IAA2B,CAAC,OAAO,CAAC;IACrD,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,KAAK,CAAC,qDAAqD,CAAC,CAAC;IACrE,CAAC;IACD,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAgB,CAAC;IACrF,MAAM,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACpD,IAAI,aAAa,KAAK,IAAI,EAAE,CAAC;QAC3B,MAAM,KAAK,CAAC,iDAAiD,UAAU,GAAG,CAAC,CAAC;IAC9E,CAAC;IACD,OAAO;QACL,OAAO,EAAE,aAAa;QACtB,kBAAkB,EAAE,OAAO,CAAC,gCAAgC,CAAC,KAAK,IAAI;KACvE,CAAC;AACJ,CAAC;AAGD,MAAM,UAAU,eAAe,CAAC,UAAkB;IAChD,OAAO,sBAAsB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACjD,CAAC;AAMD,MAAM,CAAC,KAAK,UAAU,2BAA2B,CAC/C,IAAwB,EACxB,aAAuB;IAEvB,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,YAAY,EAAE;QACtE,KAAK,EAAE,IAAI,CAAC,KAAK;QACjB,IAAI,EAAE,IAAI,CAAC,IAAI;QACf,SAAS,EAAE,IAAI;KAChB,CAAC,CAAC;IACH,MAAM,QAAQ,GAAoB,EAAE,CAAC;IAErC,KAAK,MAAM,EAAC,IAAI,EAAC,IAAI,UAAU,EAAE,CAAC;QAChC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC;YAC3B,SAAS;QACX,CAAC;QAGD,MAAM,MAAM,GAAG,4BAA4B,CAAC,IAAI,CAAC,CAAC;QAElD,IAAI,MAAM,KAAK,IAAI,IAAI,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;YAC5D,QAAQ,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;QAChC,CAAC;IACH,CAAC;IAGD,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;AACtE,CAAC;AASD,MAAM,UAAU,4BAA4B,CAAC,UAAkB;IAC7D,OAAO,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,sBAAsB,EAAE,SAAS,CAAC,CAAC,CAAC;AAC7E,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport semver from 'semver';\nimport {GithubClient, GithubRepo} from '../../utils/git/github.js';\nimport {GithubConfig} from '../../utils/config.js';\n\n/** Regular expression that matches version-branches. */\nconst versionBranchNameRegex = /^(\\d+)\\.(\\d+)\\.x$/;\n\n/** Field in `package.json` that is used to indicate an in-progress exceptional minor. */\nexport const exceptionalMinorPackageIndicator = '__ngDevExceptionalMinor__' as const;\n\n/** Object describing a repository that can be released, together with an API client. */\nexport interface ReleaseRepoWithApi extends GithubRepo {\n  /** API client that can access the repository. */\n  api: GithubClient;\n  /** Name of the next branch. */\n  nextBranchName: string;\n}\n\n/** Type describing a version-branch. */\nexport interface VersionBranch {\n  /** Name of the branch in Git. e.g. `10.0.x`. */\n  name: string;\n  /**\n   * Parsed SemVer version for the version-branch. Version branches technically do\n   * not follow the SemVer format, but we can have representative SemVer versions\n   * that can be used for comparisons, sorting and other checks.\n   */\n  parsed: semver.SemVer;\n}\n\n/** Describes the concrete version of a version branch. */\nexport interface VersionInfo {\n  version: semver.SemVer;\n  isExceptionalMinor: boolean;\n}\n\n/** Type describing the parsed contents of a `package.json`. */\nexport type PackageJson = {\n  version: string;\n  [exceptionalMinorPackageIndicator]?: boolean;\n  [otherUnknownFields: string]: unknown;\n};\n\n/**\n * Gets the name of the next branch from the Github configuration.\n *\n * Note that there is a clear separation between the main branch of the\n * upstream remote repository and the `next` release-train branch.\n */\nexport function getNextBranchName(github: GithubConfig): string {\n  return github.mainBranchName;\n}\n\n/** Gets the version info for a branch by reading the `package.json` upstream. */\nexport async function getVersionInfoForBranch(\n  repo: ReleaseRepoWithApi,\n  branchName: string,\n): Promise<VersionInfo> {\n  const {data} = await repo.api.repos.getContent({\n    owner: repo.owner,\n    repo: repo.name,\n    path: '/package.json',\n    ref: branchName,\n  });\n  // Workaround for: https://github.com/octokit/rest.js/issues/32.\n  // TODO: Remove cast once types of Octokit `getContent` are fixed.\n  const content = (data as {content?: string}).content;\n  if (!content) {\n    throw Error(`Unable to read \"package.json\" file from repository.`);\n  }\n  const pkgJson = JSON.parse(Buffer.from(content, 'base64').toString()) as PackageJson;\n  const parsedVersion = semver.parse(pkgJson.version);\n  if (parsedVersion === null) {\n    throw Error(`Invalid version detected in following branch: ${branchName}.`);\n  }\n  return {\n    version: parsedVersion,\n    isExceptionalMinor: pkgJson[exceptionalMinorPackageIndicator] === true,\n  };\n}\n\n/** Whether the given branch corresponds to a version branch. */\nexport function isVersionBranch(branchName: string): boolean {\n  return versionBranchNameRegex.test(branchName);\n}\n\n/**\n * Gets the version branches for the specified major versions in descending\n * order. i.e. latest version branches first.\n */\nexport async function getBranchesForMajorVersions(\n  repo: ReleaseRepoWithApi,\n  majorVersions: number[],\n): Promise<VersionBranch[]> {\n  const branchData = await repo.api.paginate(repo.api.repos.listBranches, {\n    owner: repo.owner,\n    repo: repo.name,\n    protected: true,\n  });\n  const branches: VersionBranch[] = [];\n\n  for (const {name} of branchData) {\n    if (!isVersionBranch(name)) {\n      continue;\n    }\n    // Convert the version-branch into a SemVer version that can be used with the\n    // SemVer utilities. e.g. to determine semantic order, compare versions.\n    const parsed = convertVersionBranchToSemVer(name);\n    // Collect all version-branches that match the specified major versions.\n    if (parsed !== null && majorVersions.includes(parsed.major)) {\n      branches.push({name, parsed});\n    }\n  }\n\n  // Sort captured version-branches in descending order.\n  return branches.sort((a, b) => semver.rcompare(a.parsed, b.parsed));\n}\n\n/**\n * Converts a given version-branch into a SemVer version that can be used with SemVer\n * utilities. e.g. to determine semantic order, extract major digit, compare.\n *\n * For example `10.0.x` will become `10.0.0` in SemVer. The patch digit is not\n * relevant but needed for parsing. SemVer does not allow `x` as patch digit.\n */\nexport function convertVersionBranchToSemVer(branchName: string): semver.SemVer | null {\n  return semver.parse(branchName.replace(versionBranchNameRegex, '$1.$2.0'));\n}\n"]}