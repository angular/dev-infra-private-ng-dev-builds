/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Cache for requested NPM package information. A cache is desirable as the NPM
 * registry requests are usually very large and slow.
 */
export const _npmPackageInfoCache = {};
/** Fetches the NPM package representing the project. */
export async function fetchProjectNpmPackageInfo(config) {
    return await fetchPackageInfoFromNpmRegistry(config.representativeNpmPackage);
}
/** Gets whether the given version is published to NPM or not */
export async function isVersionPublishedToNpm(version, config) {
    const { versions } = await fetchProjectNpmPackageInfo(config);
    return versions[version.format()] !== undefined;
}
/** Fetches the specified NPM package from the NPM registry. */
async function fetchPackageInfoFromNpmRegistry(pkgName) {
    if (_npmPackageInfoCache[pkgName] === undefined) {
        _npmPackageInfoCache[pkgName] = fetch(`https://registry.npmjs.org/${pkgName}`).then((r) => r.json());
    }
    return await _npmPackageInfoCache[pkgName];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnBtLXJlZ2lzdHJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbmctZGV2L3JlbGVhc2UvdmVyc2lvbmluZy9ucG0tcmVnaXN0cnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBNEJIOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFpRCxFQUFFLENBQUM7QUFFckYsd0RBQXdEO0FBQ3hELE1BQU0sQ0FBQyxLQUFLLFVBQVUsMEJBQTBCLENBQUMsTUFBcUI7SUFDcEUsT0FBTyxNQUFNLCtCQUErQixDQUFDLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBQ2hGLENBQUM7QUFFRCxnRUFBZ0U7QUFDaEUsTUFBTSxDQUFDLEtBQUssVUFBVSx1QkFBdUIsQ0FDM0MsT0FBc0IsRUFDdEIsTUFBcUI7SUFFckIsTUFBTSxFQUFDLFFBQVEsRUFBQyxHQUFHLE1BQU0sMEJBQTBCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsT0FBTyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssU0FBUyxDQUFDO0FBQ2xELENBQUM7QUFFRCwrREFBK0Q7QUFDL0QsS0FBSyxVQUFVLCtCQUErQixDQUFDLE9BQWU7SUFDNUQsSUFBSSxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsS0FBSyxTQUFTLEVBQUUsQ0FBQztRQUNoRCxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsR0FBRyxLQUFLLENBQUMsOEJBQThCLE9BQU8sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUNqRixDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBNkIsQ0FDM0MsQ0FBQztJQUNKLENBQUM7SUFDRCxPQUFPLE1BQU0sb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDN0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQgc2VtdmVyIGZyb20gJ3NlbXZlcic7XG5cbmltcG9ydCB7UmVsZWFzZUNvbmZpZ30gZnJvbSAnLi4vY29uZmlnL2luZGV4LmpzJztcbmltcG9ydCB7THRzTnBtRGlzdFRhZ30gZnJvbSAnLi9sb25nLXRlcm0tc3VwcG9ydC5qcyc7XG5cbi8qKlxuICogVHlwZSBkZXNjcmliaW5nIHRoZSBwb3NzaWJsZSBOUE0gZGlzdCB0YWdzIHVzZWQgYnkgQW5ndWxhciBwYWNrYWdlczpcbiAqICAgLSBsYXRlc3Q6IFN0YWJsZSB2ZXJzaW9ucy4gVGhlc2UgYXJlIHJlbGVhc2VzIGZyb20gdGhlIFwibGF0ZXN0XCIgdHJhaW4uXG4gKiAgIC0gbmV4dDogTmV4dCB2ZXJzaW9ucy4gVGhlc2UgYXJlIHJlbGVhc2VzIGZyb20gdGhlIEZGL1JDIG9yIFwibmV4dFwiIHRyYWluLlxuICogICAtIGRvLW5vdC11c2UtZXhjZXB0aW9uYWwtbWlub3I6IEV4Y2VwdGlvbmFsIG1pbm9ycyBoYXZlIHRoZWlyIG93biBOUE0gZGlzdCB0YWcgc2luY2VcbiAqICAgICB3ZSB3b3VsZCBub3Qgd2FudCB0byBvdmVycmlkZSBgbGF0ZXN0YCwgbm9yIHdvdWxkIHdlIHdhbnQgdG8gcmV2ZXJ0IGBAbmV4dGAgaWZcbiAqICAgICB0aGUgdmVyc2lvbiBpcyBhbHJlYWR5IGFoZWFkLiBUaGUgdGFncyBhcmUgZXhwZWN0ZWQgdG8gYmUgZGVsZXRlZCBhZnRlciB0aGUgbWlub3JcbiAqICAgICBiZWNvbWVzIHN0YWJsZS5cbiAqL1xuZXhwb3J0IHR5cGUgTnBtRGlzdFRhZyA9ICdsYXRlc3QnIHwgJ25leHQnIHwgJ2RvLW5vdC11c2UtZXhjZXB0aW9uYWwtbWlub3InIHwgTHRzTnBtRGlzdFRhZztcblxuLyoqIFR5cGUgZGVzY3JpYmluZyBhbiBOUE0gcGFja2FnZSBmZXRjaGVkIGZyb20gdGhlIHJlZ2lzdHJ5LiAqL1xuZXhwb3J0IGludGVyZmFjZSBOcG1QYWNrYWdlSW5mbyB7XG4gIC8qKiBNYXBzIG9mIHZlcnNpb25zIGFuZCB0aGVpciBwYWNrYWdlIEpTT04gb2JqZWN0cy4gKi9cbiAgJ3ZlcnNpb25zJzoge1tuYW1lOiBzdHJpbmddOiB1bmRlZmluZWQgfCBvYmplY3R9O1xuICAvKiogTWFwIG9mIE5QTSBkaXN0LXRhZ3MgYW5kIHRoZWlyIGNob3NlbiB2ZXJzaW9uLiAqL1xuICAnZGlzdC10YWdzJzoge1t0YWdOYW1lOiBzdHJpbmddOiBzdHJpbmcgfCB1bmRlZmluZWR9O1xuICAvKiogTWFwIG9mIHZlcnNpb25zIGFuZCB0aGVpciBJU08gcmVsZWFzZSB0aW1lLiAqL1xuICAndGltZSc6IHtbbmFtZTogc3RyaW5nXTogc3RyaW5nfTtcbn1cblxuLyoqXG4gKiBDYWNoZSBmb3IgcmVxdWVzdGVkIE5QTSBwYWNrYWdlIGluZm9ybWF0aW9uLiBBIGNhY2hlIGlzIGRlc2lyYWJsZSBhcyB0aGUgTlBNXG4gKiByZWdpc3RyeSByZXF1ZXN0cyBhcmUgdXN1YWxseSB2ZXJ5IGxhcmdlIGFuZCBzbG93LlxuICovXG5leHBvcnQgY29uc3QgX25wbVBhY2thZ2VJbmZvQ2FjaGU6IHtbcGtnTmFtZTogc3RyaW5nXTogUHJvbWlzZTxOcG1QYWNrYWdlSW5mbz59ID0ge307XG5cbi8qKiBGZXRjaGVzIHRoZSBOUE0gcGFja2FnZSByZXByZXNlbnRpbmcgdGhlIHByb2plY3QuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hQcm9qZWN0TnBtUGFja2FnZUluZm8oY29uZmlnOiBSZWxlYXNlQ29uZmlnKTogUHJvbWlzZTxOcG1QYWNrYWdlSW5mbz4ge1xuICByZXR1cm4gYXdhaXQgZmV0Y2hQYWNrYWdlSW5mb0Zyb21OcG1SZWdpc3RyeShjb25maWcucmVwcmVzZW50YXRpdmVOcG1QYWNrYWdlKTtcbn1cblxuLyoqIEdldHMgd2hldGhlciB0aGUgZ2l2ZW4gdmVyc2lvbiBpcyBwdWJsaXNoZWQgdG8gTlBNIG9yIG5vdCAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGlzVmVyc2lvblB1Ymxpc2hlZFRvTnBtKFxuICB2ZXJzaW9uOiBzZW12ZXIuU2VtVmVyLFxuICBjb25maWc6IFJlbGVhc2VDb25maWcsXG4pOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgY29uc3Qge3ZlcnNpb25zfSA9IGF3YWl0IGZldGNoUHJvamVjdE5wbVBhY2thZ2VJbmZvKGNvbmZpZyk7XG4gIHJldHVybiB2ZXJzaW9uc1t2ZXJzaW9uLmZvcm1hdCgpXSAhPT0gdW5kZWZpbmVkO1xufVxuXG4vKiogRmV0Y2hlcyB0aGUgc3BlY2lmaWVkIE5QTSBwYWNrYWdlIGZyb20gdGhlIE5QTSByZWdpc3RyeS4gKi9cbmFzeW5jIGZ1bmN0aW9uIGZldGNoUGFja2FnZUluZm9Gcm9tTnBtUmVnaXN0cnkocGtnTmFtZTogc3RyaW5nKTogUHJvbWlzZTxOcG1QYWNrYWdlSW5mbz4ge1xuICBpZiAoX25wbVBhY2thZ2VJbmZvQ2FjaGVbcGtnTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgIF9ucG1QYWNrYWdlSW5mb0NhY2hlW3BrZ05hbWVdID0gZmV0Y2goYGh0dHBzOi8vcmVnaXN0cnkubnBtanMub3JnLyR7cGtnTmFtZX1gKS50aGVuKFxuICAgICAgKHIpID0+IHIuanNvbigpIGFzIFByb21pc2U8TnBtUGFja2FnZUluZm8+LFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGF3YWl0IF9ucG1QYWNrYWdlSW5mb0NhY2hlW3BrZ05hbWVdO1xufVxuIl19