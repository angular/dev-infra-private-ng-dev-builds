{"version":3,"file":"actions.js","sourceRoot":"","sources":["actions.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {promises as fs} from 'fs';\nimport {join} from 'path';\nimport semver from 'semver';\n\nimport {workspaceRelativePackageJsonPath} from '../../utils/constants.js';\nimport {AuthenticatedGitClient} from '../../utils/git/authenticated-git-client.js';\nimport {isGithubApiError} from '../../utils/git/github.js';\nimport githubMacros from '../../utils/git/github-macros.js';\nimport {\n  getFileContentsUrl,\n  getListCommitsInBranchUrl,\n  getRepositoryGitUrl,\n} from '../../utils/git/github-urls.js';\nimport {green, Log} from '../../utils/logging.js';\nimport {Spinner} from '../../utils/spinner.js';\nimport {BuiltPackage, BuiltPackageWithInfo, ReleaseConfig} from '../config/index.js';\nimport {ReleaseNotes, workspaceRelativeChangelogPath} from '../notes/release-notes.js';\nimport {NpmDistTag, PackageJson} from '../versioning/index.js';\nimport {ActiveReleaseTrains} from '../versioning/active-release-trains.js';\nimport {createExperimentalSemver} from '../versioning/experimental-versions.js';\nimport {NpmCommand} from '../versioning/npm-command.js';\nimport {getReleaseTagForVersion} from '../versioning/version-tags.js';\nimport {FatalReleaseActionError, UserAbortedReleaseActionError} from './actions-error.js';\nimport {\n  analyzeAndExtendBuiltPackagesWithInfo,\n  assertIntegrityOfBuiltPackages,\n} from './built-package-info.js';\nimport {\n  getCommitMessageForRelease,\n  getReleaseNoteCherryPickCommitMessage,\n} from './commit-message.js';\nimport {githubReleaseBodyLimit} from './constants.js';\nimport {ExternalCommands} from './external-commands.js';\nimport {promptToInitiatePullRequestMerge} from './prompt-merge.js';\nimport {Prompt} from '../../utils/prompt.js';\nimport {PnpmVersioning} from './pnpm-versioning.js';\nimport {Commit} from '../../utils/git/octokit-types.js';\nimport {updateRenovateConfigTargetLabels} from './actions/renovate-config-updates.js';\nimport {targetLabels} from '../../pr/common/labels/target.js';\n\n/** Interface describing a Github repository. */\nexport interface GithubRepo {\n  owner: string;\n  name: string;\n}\n\n/** Interface describing a Github pull request. */\nexport interface PullRequest {\n  /** Unique id for the pull request (i.e. the PR number). */\n  id: number;\n  /** URL that resolves to the pull request in Github. */\n  url: string;\n  /** Fork containing the head branch of this pull request. */\n  fork: GithubRepo;\n  /** Branch name in the fork that defines this pull request. */\n  forkBranch: string;\n}\n\n/** Options that can be used to control the staging of a new version. */\nexport interface StagingOptions {\n  /**\n   * As part of staging, the `package.json` can be updated before the\n   * new version is set.\n   * @see {ReleaseAction.updateProjectVersion}\n   */\n  updatePkgJsonFn?: (pkgJson: PackageJson) => void;\n}\n\n/** Constructor type for instantiating a release action */\nexport interface ReleaseActionConstructor<T extends ReleaseAction = ReleaseAction> {\n  /** Whether the release action is currently active. */\n  isActive(active: ActiveReleaseTrains, config: ReleaseConfig): Promise<boolean>;\n  /** Constructs a release action. */\n  new (...args: [ActiveReleaseTrains, AuthenticatedGitClient, ReleaseConfig, string]): T;\n}\n\n/**\n * Abstract base class for a release action. A release action is selectable by the caretaker\n * if active, and can perform changes for releasing, such as staging a release, bumping the\n * version, cherry-picking the changelog, branching off from the main branch. etc.\n */\nexport abstract class ReleaseAction {\n  /** Whether the release action is currently active. */\n  static isActive(_trains: ActiveReleaseTrains, _config: ReleaseConfig): Promise<boolean> {\n    throw Error('Not implemented.');\n  }\n\n  /** Gets the description for a release action. */\n  abstract getDescription(): Promise<string>;\n  /**\n   * Performs the given release action.\n   * @throws {UserAbortedReleaseActionError} When the user manually aborted the action.\n   * @throws {FatalReleaseActionError} When the action has been aborted due to a fatal error.\n   */\n  abstract perform(): Promise<void>;\n\n  protected pnpmVersioning = new PnpmVersioning();\n\n  constructor(\n    protected active: ActiveReleaseTrains,\n    protected git: AuthenticatedGitClient,\n    protected config: ReleaseConfig,\n    protected projectDir: string,\n  ) {}\n\n  /**\n   * Updates the version in the project top-level `package.json` file.\n   *\n   * @param newVersion New SemVer version to be set in the file.\n   * @param additionalUpdateFn Optional update function that runs before\n   *   the version update. Can be used to update other fields.\n   */\n  protected async updateProjectVersion(\n    newVersion: semver.SemVer,\n    additionalUpdateFn?: (pkgJson: PackageJson) => void,\n  ) {\n    const pkgJsonPath = join(this.projectDir, workspaceRelativePackageJsonPath);\n    const pkgJson = JSON.parse(await fs.readFile(pkgJsonPath, 'utf8')) as {\n      version: string;\n      [key: string]: any;\n    };\n    if (additionalUpdateFn !== undefined) {\n      additionalUpdateFn(pkgJson);\n    }\n    pkgJson.version = newVersion.format();\n    // Write the `package.json` file. Note that we add a trailing new line\n    // to avoid unnecessary diff. IDEs usually add a trailing new line.\n    await fs.writeFile(pkgJsonPath, `${JSON.stringify(pkgJson, null, 2)}\\n`);\n    Log.info(green(`  ✓   Updated project version to ${pkgJson.version}`));\n  }\n\n  /** Gets the most recent commit of a specified branch. */\n  protected async getLatestCommitOfBranch(branchName: string): Promise<Commit> {\n    const {\n      data: {commit},\n    } = await this.git.github.repos.getBranch({...this.git.remoteParams, branch: branchName});\n    return commit;\n  }\n\n  /**\n   * Verifies that the given commit has passing all statuses.\n   *\n   * Upon error, a link to the branch containing the commit is printed,\n   * allowing the caretaker to quickly inspect the GitHub commit status failures.\n   */\n  protected async assertPassingGithubStatus(commitSha: string, branchNameForError: string) {\n    const {result} = await githubMacros.getCombinedChecksAndStatusesForRef(this.git.github, {\n      ...this.git.remoteParams,\n      ref: commitSha,\n    });\n    const branchCommitsUrl = getListCommitsInBranchUrl(this.git, branchNameForError);\n\n    if (result === 'failing' || result === null) {\n      Log.error(\n        `  ✘   Cannot stage release. Commit \"${commitSha}\" does not pass all github ` +\n          'status checks. Please make sure this commit passes all checks before re-running.',\n      );\n      Log.error(`      Please have a look at: ${branchCommitsUrl}`);\n\n      if (await Prompt.confirm({message: 'Do you want to ignore the Github status and proceed?'})) {\n        Log.warn(\n          '  ⚠   Upstream commit is failing CI checks, but status has been forcibly ignored.',\n        );\n        return;\n      }\n      throw new UserAbortedReleaseActionError();\n    } else if (result === 'pending') {\n      Log.error(\n        `  ✘   Commit \"${commitSha}\" still has pending github statuses that ` +\n          'need to succeed before staging a release.',\n      );\n      Log.error(`      Please have a look at: ${branchCommitsUrl}`);\n      if (await Prompt.confirm({message: 'Do you want to ignore the Github status and proceed?'})) {\n        Log.warn('  ⚠   Upstream commit is pending CI, but status has been forcibly ignored.');\n        return;\n      }\n      throw new UserAbortedReleaseActionError();\n    }\n\n    Log.info(green('  ✓   Upstream commit is passing all github status checks.'));\n  }\n\n  /**\n   * Prompts the user for potential release notes edits that need to be made. Once\n   * confirmed, a new commit for the release point is created.\n   */\n  protected async waitForEditsAndCreateReleaseCommit(newVersion: semver.SemVer) {\n    Log.warn(\n      '  ⚠   Please review the changelog and ensure that the log contains only changes ' +\n        'that apply to the public API surface.',\n    );\n    Log.warn('      Manual changes can be made. When done, please proceed with the prompt below.');\n\n    if (!(await Prompt.confirm({message: 'Do you want to proceed and commit the changes?'}))) {\n      throw new UserAbortedReleaseActionError();\n    }\n\n    // Commit message for the release point.\n    const filesToCommit = [workspaceRelativePackageJsonPath, workspaceRelativeChangelogPath];\n\n    const commitMessage = getCommitMessageForRelease(newVersion);\n\n    // Create a release staging commit including changelog and version bump.\n    await this.createCommit(commitMessage, filesToCommit);\n\n    // The caretaker may have attempted to make additional changes. These changes would\n    // not be captured into the release commit. The working directory should remain clean,\n    // like we assume it being clean when we start the release actions.\n    if (this.git.hasUncommittedChanges()) {\n      Log.error('  ✘   Unrelated changes have been made as part of the changelog editing.');\n      throw new FatalReleaseActionError();\n    }\n\n    Log.info(green(`  ✓   Created release commit for: \"${newVersion}\".`));\n  }\n\n  /**\n   * Gets an owned fork for the configured project of the authenticated user. Aborts the\n   * process with an error if no fork could be found.\n   */\n  private async _getForkOfAuthenticatedUser(): Promise<GithubRepo> {\n    try {\n      return this.git.getForkOfAuthenticatedUser();\n    } catch {\n      const {owner, name} = this.git.remoteConfig;\n      Log.error('  ✘   Unable to find fork for currently authenticated user.');\n      Log.error(`      Please ensure you created a fork of: ${owner}/${name}.`);\n      throw new FatalReleaseActionError();\n    }\n  }\n\n  /** Checks whether a given branch name is reserved in the specified repository. */\n  private async _isBranchNameReservedInRepo(repo: GithubRepo, name: string): Promise<boolean> {\n    try {\n      await this.git.github.repos.getBranch({owner: repo.owner, repo: repo.name, branch: name});\n      return true;\n    } catch (e) {\n      // If the error has a `status` property set to `404`, then we know that the branch\n      // does not exist. Otherwise, it might be an API error that we want to report/re-throw.\n      if (isGithubApiError(e) && e.status === 404) {\n        return false;\n      }\n      throw e;\n    }\n  }\n\n  /** Finds a non-reserved branch name in the repository with respect to a base name. */\n  private async _findAvailableBranchName(repo: GithubRepo, baseName: string): Promise<string> {\n    let currentName = baseName;\n    let suffixNum = 0;\n    while (await this._isBranchNameReservedInRepo(repo, currentName)) {\n      suffixNum++;\n      currentName = `${baseName}_${suffixNum}`;\n    }\n    return currentName;\n  }\n\n  /**\n   * Creates a local branch from the current Git `HEAD`. Will override\n   * existing branches in case of a collision.\n   */\n  protected async createLocalBranchFromHead(branchName: string) {\n    this.git.run(['checkout', '-q', '-B', branchName]);\n  }\n\n  /** Pushes the current Git `HEAD` to the given remote branch in the configured project. */\n  protected async pushHeadToRemoteBranch(branchName: string) {\n    // Push the local `HEAD` to the remote branch in the configured project.\n    this.git.run(['push', '-q', this.git.getRepoGitUrl(), `HEAD:refs/heads/${branchName}`]);\n  }\n\n  /**\n   * Pushes the current Git `HEAD` to a fork for the configured project that is owned by\n   * the authenticated user. If the specified branch name exists in the fork already, a\n   * unique one will be generated based on the proposed name to avoid collisions.\n   * @param proposedBranchName Proposed branch name for the fork.\n   * @param trackLocalBranch Whether the fork branch should be tracked locally. i.e. whether\n   *   a local branch with remote tracking should be set up.\n   * @returns The fork and branch name containing the pushed changes.\n   */\n  private async _pushHeadToFork(\n    proposedBranchName: string,\n    trackLocalBranch: boolean,\n  ): Promise<{fork: GithubRepo; branchName: string}> {\n    const fork = await this._getForkOfAuthenticatedUser();\n    // Compute a repository URL for pushing to the fork. Note that we want to respect\n    // the SSH option from the dev-infra github configuration.\n    const repoGitUrl = getRepositoryGitUrl(\n      {...fork, useSsh: this.git.remoteConfig.useSsh},\n      this.git.githubToken,\n    );\n    const branchName = await this._findAvailableBranchName(fork, proposedBranchName);\n    const pushArgs: string[] = [];\n    // If a local branch should track the remote fork branch, create a branch matching\n    // the remote branch. Later with the `git push`, the remote is set for the branch.\n    if (trackLocalBranch) {\n      await this.createLocalBranchFromHead(branchName);\n      pushArgs.push('--set-upstream');\n    }\n    // Push the local `HEAD` to the remote branch in the fork.\n    this.git.run(['push', '-q', repoGitUrl, `HEAD:refs/heads/${branchName}`, ...pushArgs]);\n    return {fork, branchName};\n  }\n\n  /**\n   * Pushes changes to a fork for the configured project that is owned by the currently\n   * authenticated user. A pull request is then created for the pushed changes on the\n   * configured project that targets the specified target branch.\n   * @returns An object describing the created pull request.\n   */\n  protected async pushChangesToForkAndCreatePullRequest(\n    targetBranch: string,\n    proposedForkBranchName: string,\n    title: string,\n    body?: string,\n  ): Promise<PullRequest> {\n    const repoSlug = `${this.git.remoteParams.owner}/${this.git.remoteParams.repo}`;\n    const {fork, branchName} = await this._pushHeadToFork(proposedForkBranchName, true);\n    const {data} = await this.git.github.pulls.create({\n      ...this.git.remoteParams,\n      head: `${fork.owner}:${branchName}`,\n      base: targetBranch,\n      body,\n      title,\n    });\n\n    // Add labels to the newly created PR if provided in the configuration.\n    if (this.config.releasePrLabels !== undefined) {\n      await this.git.github.issues.addLabels({\n        ...this.git.remoteParams,\n        issue_number: data.number,\n        labels: this.config.releasePrLabels,\n      });\n    }\n\n    Log.info(green(`  ✓   Created pull request #${data.number} in ${repoSlug}.`));\n    return {\n      id: data.number,\n      url: data.html_url,\n      fork,\n      forkBranch: branchName,\n    };\n  }\n\n  /**\n   * Prepend releases notes for a version published in a given branch to the changelog in\n   * the current Git `HEAD`. This is useful for cherry-picking the changelog.\n   * @returns A boolean indicating whether the release notes have been prepended.\n   */\n  protected async prependReleaseNotesToChangelog(releaseNotes: ReleaseNotes): Promise<void> {\n    await releaseNotes.prependEntryToChangelogFile();\n    Log.info(\n      green(`  ✓   Updated the changelog to capture changes for \"${releaseNotes.version}\".`),\n    );\n  }\n\n  /** Checks out an upstream branch with a detached head. */\n  protected async checkoutUpstreamBranch(branchName: string) {\n    this.git.run(['fetch', '-q', this.git.getRepoGitUrl(), branchName]);\n    this.git.run(['checkout', '-q', 'FETCH_HEAD', '--detach']);\n    this.git.run(['clean', '-dfq']);\n  }\n\n  /** Installs all Yarn dependencies in the current branch. */\n  protected async installDependenciesForCurrentBranch() {\n    if (await this.pnpmVersioning.isUsingPnpm(this.projectDir)) {\n      await ExternalCommands.invokePnpmInstall(this.projectDir);\n      return;\n    }\n\n    const nodeModulesDir = join(this.projectDir, 'node_modules');\n    // Note: We delete all contents of the `node_modules` first. This is necessary\n    // because Yarn could preserve extraneous/outdated nested modules that will cause\n    // unexpected build failures with the NodeJS Bazel `@npm` workspace generation.\n    // This is a workaround for: https://github.com/yarnpkg/yarn/issues/8146. Even though\n    // we might be able to fix this with Yarn 2+, it is reasonable ensuring clean node modules.\n    // TODO: Remove this when we use Yarn 2+ in all Angular repositories.\n    await fs.rm(nodeModulesDir, {force: true, recursive: true, maxRetries: 3});\n    await ExternalCommands.invokeYarnInstall(this.projectDir);\n  }\n\n  /**\n   * Creates a commit for the specified files with the given message.\n   * @param message Message for the created commit\n   * @param files List of project-relative file paths to be committed.\n   */\n  protected async createCommit(message: string, files: string[]) {\n    // Note: `git add` would not be needed if the files are already known to\n    // Git, but the specified files could also be newly created, and unknown.\n    this.git.run(['add', ...files]);\n    // Note: `--no-verify` skips the majority of commit hooks here, but there are hooks\n    // like `prepare-commit-message` which still run. We have set the `HUSKY=0` environment\n    // variable at the start of the publish command to ignore such hooks as well.\n    this.git.run(['commit', '-q', '--no-verify', '-m', message, ...files]);\n  }\n\n  /**\n   * Builds the release output for the current branch. Assumes the node modules\n   * to be already installed for the current branch.\n   *\n   * @returns A list of built release packages.\n   */\n  protected async buildReleaseForCurrentBranch(): Promise<BuiltPackageWithInfo[]> {\n    // Note that we do not directly call the build packages function from the release\n    // config. We only want to build and publish packages that have been configured in the given\n    // publish branch. e.g. consider we publish patch version and a new package has been\n    // created in the `next` branch. The new package would not be part of the patch branch,\n    // so we cannot build and publish it.\n    const builtPackages = await ExternalCommands.invokeReleaseBuild(\n      this.projectDir,\n      this.pnpmVersioning,\n    );\n    const releaseInfo = await ExternalCommands.invokeReleaseInfo(\n      this.projectDir,\n      this.pnpmVersioning,\n    );\n\n    // Extend the built packages with their disk hash and NPM package information. This is\n    // helpful later for verifying integrity and filtering out e.g. experimental packages.\n    return analyzeAndExtendBuiltPackagesWithInfo(builtPackages, releaseInfo.npmPackages);\n  }\n\n  /**\n   * Stages the specified new version for the current branch, builds the release output,\n   * verifies its output and creates a pull request  that targets the given base branch.\n   *\n   * This method assumes the staging branch is already checked-out.\n   *\n   * @param newVersion New version to be staged.\n   * @param compareVersionForReleaseNotes Version used for comparing with the current\n   *   `HEAD` in order build the release notes.\n   * @param pullRequestTargetBranch Branch the pull request should target.\n   * @param opts Non-mandatory options for controlling the staging, e.g.\n   *   allowing for additional `package.json` modifications.\n   * @returns an object capturing actions performed as part of staging.\n   */\n  protected async stageVersionForBranchAndCreatePullRequest(\n    newVersion: semver.SemVer,\n    compareVersionForReleaseNotes: semver.SemVer,\n    pullRequestTargetBranch: string,\n    opts?: StagingOptions,\n  ): Promise<{\n    releaseNotes: ReleaseNotes;\n    pullRequest: PullRequest;\n    builtPackagesWithInfo: BuiltPackageWithInfo[];\n  }> {\n    const releaseNotesCompareTag = getReleaseTagForVersion(compareVersionForReleaseNotes);\n\n    // Fetch the compare tag so that commits for the release notes can be determined.\n    // We forcibly override existing local tags that are named similar as we will fetch\n    // the correct tag for release notes comparison from the upstream remote.\n    this.git.run([\n      'fetch',\n      '--force',\n      this.git.getRepoGitUrl(),\n      `refs/tags/${releaseNotesCompareTag}:refs/tags/${releaseNotesCompareTag}`,\n    ]);\n\n    // Build release notes for commits from `<releaseNotesCompareTag>..HEAD`.\n    const releaseNotes = await ReleaseNotes.forRange(\n      this.git,\n      newVersion,\n      releaseNotesCompareTag,\n      'HEAD',\n    );\n\n    await this.updateProjectVersion(newVersion, opts?.updatePkgJsonFn);\n    await this.prependReleaseNotesToChangelog(releaseNotes);\n    await this.waitForEditsAndCreateReleaseCommit(newVersion);\n\n    // Install the project dependencies for the publish branch.\n    await this.installDependenciesForCurrentBranch();\n\n    const builtPackagesWithInfo = await this.buildReleaseForCurrentBranch();\n\n    // Run release pre-checks (e.g. validating the release output).\n    await ExternalCommands.invokeReleasePrecheck(\n      this.projectDir,\n      newVersion,\n      builtPackagesWithInfo,\n      this.pnpmVersioning,\n    );\n\n    // Verify the packages built are the correct version.\n    await this._verifyPackageVersions(releaseNotes.version, builtPackagesWithInfo);\n\n    const pullRequest = await this.pushChangesToForkAndCreatePullRequest(\n      pullRequestTargetBranch,\n      `release-stage-${newVersion}`,\n      `Bump version to \"v${newVersion}\" with changelog.`,\n    );\n\n    Log.info(green('  ✓   Release staging pull request has been created.'));\n\n    return {releaseNotes, pullRequest, builtPackagesWithInfo};\n  }\n\n  /**\n   * Checks out the specified target branch, verifies its CI status and stages\n   * the specified new version in order to create a pull request.\n   *\n   * @param newVersion New version to be staged.\n   * @param compareVersionForReleaseNotes Version used for comparing with `HEAD` of\n   *   the staging branch in order build the release notes.\n   * @param stagingBranch Branch within the new version should be staged.\n   * @param stagingOptions Non-mandatory options for controlling the staging of\n   *   the new version. e.g. allowing for additional `package.json` modifications.\n   * @returns an object capturing actions performed as part of staging.\n   */\n  protected async checkoutBranchAndStageVersion(\n    newVersion: semver.SemVer,\n    compareVersionForReleaseNotes: semver.SemVer,\n    stagingBranch: string,\n    stagingOpts?: StagingOptions,\n  ): Promise<{\n    releaseNotes: ReleaseNotes;\n    pullRequest: PullRequest;\n    builtPackagesWithInfo: BuiltPackageWithInfo[];\n    beforeStagingSha: string;\n  }> {\n    // Keep track of the commit where we started the staging process on. This will be used\n    // later to ensure that no changes, except for the version bump have landed as part\n    // of the staging time window (where the caretaker could accidentally land other stuff).\n    const {sha: beforeStagingSha} = await this.getLatestCommitOfBranch(stagingBranch);\n\n    await this.assertPassingGithubStatus(beforeStagingSha, stagingBranch);\n    await this.checkoutUpstreamBranch(stagingBranch);\n\n    const stagingInfo = await this.stageVersionForBranchAndCreatePullRequest(\n      newVersion,\n      compareVersionForReleaseNotes,\n      stagingBranch,\n      stagingOpts,\n    );\n\n    return {\n      ...stagingInfo,\n      beforeStagingSha,\n    };\n  }\n\n  /**\n   * Cherry-picks the release notes of a version that have been pushed to a given branch\n   * into the `next` primary development branch. A pull request is created for this.\n   * @returns a boolean indicating successful creation of the cherry-pick pull request.\n   */\n  protected async cherryPickChangelogIntoNextBranch(\n    releaseNotes: ReleaseNotes,\n    stagingBranch: string,\n  ): Promise<boolean> {\n    const nextBranch = this.active.next.branchName;\n    const {version} = releaseNotes;\n    const commitMessage = getReleaseNoteCherryPickCommitMessage(version);\n\n    // Checkout the next branch.\n    await this.checkoutUpstreamBranch(nextBranch);\n\n    await this.prependReleaseNotesToChangelog(releaseNotes);\n\n    const filesToCommit: string[] = [workspaceRelativeChangelogPath];\n\n    if (version.patch === 0 && version.prerelease.length === 0) {\n      // Switch the renovate labels for `target: rc` to `target: patch`\n      const renovateConfigPath = await updateRenovateConfigTargetLabels(\n        this.projectDir,\n        targetLabels['TARGET_RC'].name,\n        targetLabels['TARGET_PATCH'].name,\n      );\n\n      if (renovateConfigPath) {\n        filesToCommit.push(renovateConfigPath);\n      }\n    }\n\n    await this.createCommit(commitMessage, filesToCommit);\n    Log.info(green(`  ✓   Created changelog cherry-pick commit for: \"${version}\".`));\n\n    // Create a cherry-pick pull request that should be merged by the caretaker.\n    const pullRequest = await this.pushChangesToForkAndCreatePullRequest(\n      nextBranch,\n      `changelog-cherry-pick-${version}`,\n      commitMessage,\n      `Cherry-picks the changelog from the \"${stagingBranch}\" branch to the next ` +\n        `branch (${nextBranch}).`,\n    );\n\n    Log.info(\n      green(\n        `  ✓   Pull request for cherry-picking the changelog into \"${nextBranch}\" ` +\n          'has been created.',\n      ),\n    );\n\n    await this.promptAndWaitForPullRequestMerged(pullRequest);\n\n    return true;\n  }\n\n  /** Prompts the user for merging the pull request, and waits for it to be merged. */\n  protected async promptAndWaitForPullRequestMerged(pullRequest: PullRequest): Promise<void> {\n    await promptToInitiatePullRequestMerge(this.git, pullRequest);\n  }\n\n  /**\n   * Creates a Github release for the specified version. The release is created\n   * by tagging the version bump commit, and by creating the release entry.\n   *\n   * Expects the version bump commit and changelog to be available in the\n   * upstream remote.\n   *\n   * @param releaseNotes The release notes for the version being published.\n   * @param versionBumpCommitSha Commit that bumped the version. The release tag\n   *   will point to this commit.\n   * @param isPrerelease Whether the new version is published as a pre-release.\n   * @param showAsLatestOnGitHub Whether the version released will represent\n   *   the \"latest\" version of the project. I.e. GitHub will show this version as \"latest\".\n   */\n  private async _createGithubReleaseForVersion(\n    releaseNotes: ReleaseNotes,\n    versionBumpCommitSha: string,\n    isPrerelease: boolean,\n    showAsLatestOnGitHub: boolean,\n  ) {\n    const tagName = getReleaseTagForVersion(releaseNotes.version);\n    await this.git.github.git.createRef({\n      ...this.git.remoteParams,\n      ref: `refs/tags/${tagName}`,\n      sha: versionBumpCommitSha,\n    });\n    Log.info(green(`  ✓   Tagged v${releaseNotes.version} release upstream.`));\n\n    let releaseBody = await releaseNotes.getGithubReleaseEntry();\n\n    // If the release body exceeds the Github body limit, we just provide\n    // a link to the changelog entry in the Github release entry.\n    if (releaseBody.length > githubReleaseBodyLimit) {\n      const releaseNotesUrl = await this._getGithubChangelogUrlForRef(releaseNotes, tagName);\n      releaseBody =\n        `Release notes are too large to be captured here. ` +\n        `[View all changes here](${releaseNotesUrl}).`;\n    }\n\n    await this.git.github.repos.createRelease({\n      ...this.git.remoteParams,\n      name: releaseNotes.version.toString(),\n      tag_name: tagName,\n      prerelease: isPrerelease,\n      make_latest: showAsLatestOnGitHub ? 'true' : 'false',\n      body: releaseBody,\n    });\n    Log.info(green(`  ✓   Created v${releaseNotes.version} release in Github.`));\n  }\n\n  /** Gets a Github URL that resolves to the release notes in the given ref. */\n  private async _getGithubChangelogUrlForRef(releaseNotes: ReleaseNotes, ref: string) {\n    const baseUrl = getFileContentsUrl(this.git, ref, workspaceRelativeChangelogPath);\n    const urlFragment = await releaseNotes.getUrlFragmentForRelease();\n    return `${baseUrl}#${urlFragment}`;\n  }\n\n  /**\n   * Publishes the given packages to the registry and makes the releases\n   * available on GitHub.\n   *\n   * @param builtPackagesWithInfo List of built packages that will be published.\n   * @param releaseNotes The release notes for the version being published.\n   * @param beforeStagingSha Commit SHA that is expected to be the most recent one after\n   *   the actual version bump commit. This exists to ensure that caretakers do not land\n   *   additional changes after the release output has been built locally.\n   * @param publishBranch Name of the branch that contains the new version.\n   * @param npmDistTag NPM dist tag where the version should be published to.\n   * @param additionalOptions Additional options needed for publishing a release.\n   */\n  protected async publish(\n    builtPackagesWithInfo: BuiltPackageWithInfo[],\n    releaseNotes: ReleaseNotes,\n    beforeStagingSha: string,\n    publishBranch: string,\n    npmDistTag: NpmDistTag,\n    additionalOptions: {showAsLatestOnGitHub: boolean},\n  ) {\n    const releaseSha = await this._getAndValidateLatestCommitForPublishing(\n      publishBranch,\n      releaseNotes.version,\n      beforeStagingSha,\n    );\n\n    // Before publishing, we want to ensure that the locally-built packages we\n    // built in the staging phase have not been modified accidentally.\n    await assertIntegrityOfBuiltPackages(builtPackagesWithInfo);\n\n    // Create a Github release for the new version.\n    await this._createGithubReleaseForVersion(\n      releaseNotes,\n      releaseSha,\n      npmDistTag === 'next',\n      additionalOptions.showAsLatestOnGitHub,\n    );\n\n    // Walk through all built packages and publish them to NPM.\n    for (const pkg of builtPackagesWithInfo) {\n      await this._publishBuiltPackageToNpm(pkg, npmDistTag);\n    }\n\n    Log.info(green('  ✓   Published all packages successfully'));\n  }\n\n  /** Publishes the given built package to NPM with the specified NPM dist tag. */\n  private async _publishBuiltPackageToNpm(pkg: BuiltPackage, npmDistTag: NpmDistTag) {\n    Log.debug(`Starting publish of \"${pkg.name}\".`);\n    const spinner = new Spinner(`Publishing \"${pkg.name}\"`);\n\n    try {\n      await NpmCommand.publish(pkg.outputPath, npmDistTag, this.config.publishRegistry);\n      spinner.complete();\n      Log.info(green(`  ✓   Successfully published \"${pkg.name}.`));\n    } catch (e) {\n      spinner.complete();\n      Log.error(e);\n      Log.error(`  ✘   An error occurred while publishing \"${pkg.name}\".`);\n      throw new FatalReleaseActionError();\n    }\n  }\n\n  /**\n   * Retreive the latest commit from the provided branch, and verify that it is the expected\n   * release commit and is the direct child of the previous sha provided.\n   *\n   * The method will make one recursive attempt to check again before throwing an error if\n   * any error occurs during this validation. This exists as an attempt to handle transient\n   * timeouts from Github along with cases, where the Github API response does not keep up\n   * with the timing from when we perform a merge to when we verify that the merged commit is\n   * present in the upstream branch.\n   */\n  private async _getAndValidateLatestCommitForPublishing(\n    branch: string,\n    version: semver.SemVer,\n    previousSha: string,\n  ): Promise<string> {\n    let latestSha: string | null = null;\n\n    // Support re-checking as many times as needed. Often times the GitHub API\n    // is not up-to-date and we don't want to exit the release script then.\n    while (latestSha === null) {\n      const commit = await this.getLatestCommitOfBranch(branch);\n\n      // Ensure the latest commit in the publish branch is the bump commit.\n      if (!commit.commit.message.startsWith(getCommitMessageForRelease(version))) {\n        /** The shortened sha of the commit for usage in the error message. */\n        const sha = commit.sha.slice(0, 8);\n        Log.error(`  ✘   Latest commit (${sha}) in \"${branch}\" branch is not a staging commit.`);\n        Log.error('      Please make sure the staging pull request has been merged.');\n\n        if (await Prompt.confirm({message: `Do you want to re-try?`, default: true})) {\n          continue;\n        }\n        throw new FatalReleaseActionError();\n      }\n\n      // We only inspect the first parent as we enforce that no merge commits are used in our\n      // repos, so all commits have exactly one parent.\n      if (commit.parents[0].sha !== previousSha) {\n        Log.error(`  ✘   Unexpected additional commits have landed while staging the release.`);\n        Log.error('      Please revert the bump commit and retry, or cut a new version on top.');\n\n        if (await Prompt.confirm({message: `Do you want to re-try?`, default: true})) {\n          continue;\n        }\n        throw new FatalReleaseActionError();\n      }\n\n      latestSha = commit.sha;\n    }\n\n    return latestSha;\n  }\n\n  // TODO: Remove this check and run it as part of common release validation.\n  /** Verify the version of each generated package exact matches the specified version. */\n  private async _verifyPackageVersions(version: semver.SemVer, packages: BuiltPackageWithInfo[]) {\n    // Experimental equivalent version for packages.\n    const experimentalVersion = createExperimentalSemver(version);\n\n    for (const pkg of packages) {\n      const {version: packageJsonVersion} = JSON.parse(\n        await fs.readFile(join(pkg.outputPath, 'package.json'), 'utf8'),\n      ) as {version: string; [key: string]: any};\n\n      const expectedVersion = pkg.experimental ? experimentalVersion : version;\n      const mismatchesVersion = expectedVersion.compare(packageJsonVersion) !== 0;\n\n      if (mismatchesVersion) {\n        Log.error(`The built package version does not match for: ${pkg.name}.`);\n        Log.error(`  Actual version:   ${packageJsonVersion}`);\n        Log.error(`  Expected version: ${expectedVersion}`);\n        throw new FatalReleaseActionError();\n      }\n    }\n  }\n}\n"]}