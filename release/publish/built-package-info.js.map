{"version":3,"file":"built-package-info.js","sourceRoot":"","sources":["built-package-info.ts"],"names":[],"mappings":"AAQA,OAAO,EAAC,GAAG,EAAC,MAAM,wBAAwB,CAAC;AAG3C,OAAO,EAAC,uBAAuB,EAAC,MAAM,oBAAoB,CAAC;AAC3D,OAAO,EAAC,aAAa,EAAC,MAAM,qBAAqB,CAAC;AAMlD,MAAM,CAAC,KAAK,UAAU,qCAAqC,CACzD,aAA6B,EAC7B,WAAyB;IAEzB,MAAM,MAAM,GAA2B,EAAE,CAAC;IAK1C,KAAK,MAAM,GAAG,IAAI,aAAa,EAAE,CAAC;QAChC,MAAM,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,IAAI,CAAC,CAAC;QAE1D,IAAI,IAAI,KAAK,SAAS,EAAE,CAAC;YACvB,GAAG,CAAC,KAAK,CAAC,gCAAgC,EAAE,WAAW,CAAC,CAAC;YACzD,GAAG,CAAC,KAAK,CAAC,gEAAgE,GAAG,CAAC,IAAI,IAAI,CAAC,CAAC;YACxF,MAAM,IAAI,uBAAuB,EAAE,CAAC;QACtC,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;YACV,IAAI,EAAE,MAAM,6BAA6B,CAAC,GAAG,CAAC;YAC9C,GAAG,GAAG;YACN,GAAG,IAAI;SACR,CAAC,CAAC;IACL,CAAC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAQD,MAAM,CAAC,KAAK,UAAU,8BAA8B,CAClD,qBAA6C;IAE7C,MAAM,gBAAgB,GAAa,EAAE,CAAC;IAItC,KAAK,MAAM,GAAG,IAAI,qBAAqB,EAAE,CAAC;QACxC,IAAI,CAAC,MAAM,6BAA6B,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,IAAI,EAAE,CAAC;YAC5D,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAClC,CAAC;IACH,CAAC;IAED,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QAChC,GAAG,CAAC,KAAK,CAAC,oEAAoE,CAAC,CAAC;QAChF,GAAG,CAAC,KAAK,CAAC,yCAAyC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAClF,MAAM,IAAI,uBAAuB,EAAE,CAAC;IACtC,CAAC;AACH,CAAC;AAGD,KAAK,UAAU,6BAA6B,CAAC,GAAiB;IAC5D,OAAO,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;AAC/C,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Log} from '../../utils/logging.js';\n\nimport {BuiltPackage, BuiltPackageWithInfo, NpmPackage} from '../config/index.js';\nimport {FatalReleaseActionError} from './actions-error.js';\nimport {DirectoryHash} from './directory-hash.js';\n\n/**\n * Analyzes and extends the given built packages with additional information,\n * such as their corresponding NPM information or a hash for the package contents.\n */\nexport async function analyzeAndExtendBuiltPackagesWithInfo(\n  builtPackages: BuiltPackage[],\n  npmPackages: NpmPackage[],\n): Promise<BuiltPackageWithInfo[]> {\n  const result: BuiltPackageWithInfo[] = [];\n\n  // Note: We sequentially analyze/extend the built packages as we would not want\n  // to risk too many file system operations at the same time. Since workspaces\n  // do not have a lot of packages, this operation is fine to run sequentially.\n  for (const pkg of builtPackages) {\n    const info = npmPackages.find((i) => i.name === pkg.name);\n\n    if (info === undefined) {\n      Log.debug(`Retrieved package information:`, npmPackages);\n      Log.error(`  ✘   Could not find package information for built package: \"${pkg.name}\".`);\n      throw new FatalReleaseActionError();\n    }\n\n    result.push({\n      hash: await computeHashForPackageContents(pkg),\n      ...pkg,\n      ...info,\n    });\n  }\n\n  return result;\n}\n\n/**\n * Asserts that the expected built package content matches the disk\n * contents of the built packages.\n *\n * @throws {FatalReleaseActionError} When the integrity check failed.\n */\nexport async function assertIntegrityOfBuiltPackages(\n  builtPackagesWithInfo: BuiltPackageWithInfo[],\n): Promise<void> {\n  const modifiedPackages: string[] = [];\n\n  // Note: This runs sequentially for the same reason when we analyze/extend the\n  // built package info. See `analyzeAndExtendBuiltPackagesWithInfo`.\n  for (const pkg of builtPackagesWithInfo) {\n    if ((await computeHashForPackageContents(pkg)) !== pkg.hash) {\n      modifiedPackages.push(pkg.name);\n    }\n  }\n\n  if (modifiedPackages.length > 0) {\n    Log.error(`  ✘   Release output has been modified locally since it was built.`);\n    Log.error(`      The following packages changed: ${modifiedPackages.join(', ')}`);\n    throw new FatalReleaseActionError();\n  }\n}\n\n/** Computes a deterministic hash for the package and its contents. */\nasync function computeHashForPackageContents(pkg: BuiltPackage): Promise<string> {\n  return DirectoryHash.compute(pkg.outputPath);\n}\n"]}