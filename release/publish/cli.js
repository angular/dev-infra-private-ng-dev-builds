/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { assertValidGithubConfig, getConfig } from '../../utils/config.js';
import { addGithubTokenOption } from '../../utils/git/github-yargs.js';
import { assertValidReleaseConfig } from '../config/index.js';
import { CompletionState, ReleaseTool } from './index.js';
import { AuthenticatedGitClient } from '../../utils/git/authenticated-git-client.js';
import { green, Log, yellow } from '../../utils/logging.js';
/** Yargs command builder for configuring the `ng-dev release publish` command. */
function builder(argv) {
    return addGithubTokenOption(argv);
}
/** Yargs command handler for staging a release. */
async function handler() {
    const git = await AuthenticatedGitClient.get();
    const config = await getConfig();
    assertValidReleaseConfig(config);
    assertValidGithubConfig(config);
    const task = new ReleaseTool(git, config.release, config.github, git.baseDir);
    const result = await task.run();
    switch (result) {
        case CompletionState.FATAL_ERROR:
            Log.error(`Release action has been aborted due to fatal errors. See above.`);
            process.exitCode = 2;
            break;
        case CompletionState.MANUALLY_ABORTED:
            Log.info(yellow(`Release action has been manually aborted.`));
            process.exitCode = 1;
            break;
        case CompletionState.SUCCESS:
            Log.info(green(`Release action has completed successfully.`));
            break;
    }
}
/** CLI command module for publishing a release. */
export const ReleasePublishCommandModule = {
    builder,
    handler,
    command: 'publish',
    describe: 'Publish new releases and configure version branches.',
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbmctZGV2L3JlbGVhc2UvcHVibGlzaC9jbGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBSUgsT0FBTyxFQUFDLHVCQUF1QixFQUFFLFNBQVMsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ3pFLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLGlDQUFpQyxDQUFDO0FBQ3JFLE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBRTVELE9BQU8sRUFBQyxlQUFlLEVBQUUsV0FBVyxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBQ3hELE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLDZDQUE2QyxDQUFDO0FBQ25GLE9BQU8sRUFBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBSzFELGtGQUFrRjtBQUNsRixTQUFTLE9BQU8sQ0FBQyxJQUFVO0lBQ3pCLE9BQU8sb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDcEMsQ0FBQztBQUVELG1EQUFtRDtBQUNuRCxLQUFLLFVBQVUsT0FBTztJQUNwQixNQUFNLEdBQUcsR0FBRyxNQUFNLHNCQUFzQixDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQy9DLE1BQU0sTUFBTSxHQUFHLE1BQU0sU0FBUyxFQUFFLENBQUM7SUFDakMsd0JBQXdCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDakMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFaEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxXQUFXLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDOUUsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFFaEMsUUFBUSxNQUFNLEVBQUUsQ0FBQztRQUNmLEtBQUssZUFBZSxDQUFDLFdBQVc7WUFDOUIsR0FBRyxDQUFDLEtBQUssQ0FBQyxpRUFBaUUsQ0FBQyxDQUFDO1lBQzdFLE9BQU8sQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO1lBQ3JCLE1BQU07UUFDUixLQUFLLGVBQWUsQ0FBQyxnQkFBZ0I7WUFDbkMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsMkNBQTJDLENBQUMsQ0FBQyxDQUFDO1lBQzlELE9BQU8sQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO1lBQ3JCLE1BQU07UUFDUixLQUFLLGVBQWUsQ0FBQyxPQUFPO1lBQzFCLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUMsQ0FBQztZQUM5RCxNQUFNO0lBQ1YsQ0FBQztBQUNILENBQUM7QUFFRCxtREFBbUQ7QUFDbkQsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQTZDO0lBQ25GLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTyxFQUFFLFNBQVM7SUFDbEIsUUFBUSxFQUFFLHNEQUFzRDtDQUNqRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTENcbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7QXJndiwgQXJndW1lbnRzLCBDb21tYW5kTW9kdWxlfSBmcm9tICd5YXJncyc7XG5cbmltcG9ydCB7YXNzZXJ0VmFsaWRHaXRodWJDb25maWcsIGdldENvbmZpZ30gZnJvbSAnLi4vLi4vdXRpbHMvY29uZmlnLmpzJztcbmltcG9ydCB7YWRkR2l0aHViVG9rZW5PcHRpb259IGZyb20gJy4uLy4uL3V0aWxzL2dpdC9naXRodWIteWFyZ3MuanMnO1xuaW1wb3J0IHthc3NlcnRWYWxpZFJlbGVhc2VDb25maWd9IGZyb20gJy4uL2NvbmZpZy9pbmRleC5qcyc7XG5cbmltcG9ydCB7Q29tcGxldGlvblN0YXRlLCBSZWxlYXNlVG9vbH0gZnJvbSAnLi9pbmRleC5qcyc7XG5pbXBvcnQge0F1dGhlbnRpY2F0ZWRHaXRDbGllbnR9IGZyb20gJy4uLy4uL3V0aWxzL2dpdC9hdXRoZW50aWNhdGVkLWdpdC1jbGllbnQuanMnO1xuaW1wb3J0IHtncmVlbiwgTG9nLCB5ZWxsb3d9IGZyb20gJy4uLy4uL3V0aWxzL2xvZ2dpbmcuanMnO1xuXG4vKiogQ29tbWFuZCBsaW5lIG9wdGlvbnMgZm9yIHB1Ymxpc2hpbmcgYSByZWxlYXNlLiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZWxlYXNlUHVibGlzaE9wdGlvbnMge31cblxuLyoqIFlhcmdzIGNvbW1hbmQgYnVpbGRlciBmb3IgY29uZmlndXJpbmcgdGhlIGBuZy1kZXYgcmVsZWFzZSBwdWJsaXNoYCBjb21tYW5kLiAqL1xuZnVuY3Rpb24gYnVpbGRlcihhcmd2OiBBcmd2KTogQXJndjxSZWxlYXNlUHVibGlzaE9wdGlvbnM+IHtcbiAgcmV0dXJuIGFkZEdpdGh1YlRva2VuT3B0aW9uKGFyZ3YpO1xufVxuXG4vKiogWWFyZ3MgY29tbWFuZCBoYW5kbGVyIGZvciBzdGFnaW5nIGEgcmVsZWFzZS4gKi9cbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIoKSB7XG4gIGNvbnN0IGdpdCA9IGF3YWl0IEF1dGhlbnRpY2F0ZWRHaXRDbGllbnQuZ2V0KCk7XG4gIGNvbnN0IGNvbmZpZyA9IGF3YWl0IGdldENvbmZpZygpO1xuICBhc3NlcnRWYWxpZFJlbGVhc2VDb25maWcoY29uZmlnKTtcbiAgYXNzZXJ0VmFsaWRHaXRodWJDb25maWcoY29uZmlnKTtcblxuICBjb25zdCB0YXNrID0gbmV3IFJlbGVhc2VUb29sKGdpdCwgY29uZmlnLnJlbGVhc2UsIGNvbmZpZy5naXRodWIsIGdpdC5iYXNlRGlyKTtcbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGFzay5ydW4oKTtcblxuICBzd2l0Y2ggKHJlc3VsdCkge1xuICAgIGNhc2UgQ29tcGxldGlvblN0YXRlLkZBVEFMX0VSUk9SOlxuICAgICAgTG9nLmVycm9yKGBSZWxlYXNlIGFjdGlvbiBoYXMgYmVlbiBhYm9ydGVkIGR1ZSB0byBmYXRhbCBlcnJvcnMuIFNlZSBhYm92ZS5gKTtcbiAgICAgIHByb2Nlc3MuZXhpdENvZGUgPSAyO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBDb21wbGV0aW9uU3RhdGUuTUFOVUFMTFlfQUJPUlRFRDpcbiAgICAgIExvZy5pbmZvKHllbGxvdyhgUmVsZWFzZSBhY3Rpb24gaGFzIGJlZW4gbWFudWFsbHkgYWJvcnRlZC5gKSk7XG4gICAgICBwcm9jZXNzLmV4aXRDb2RlID0gMTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQ29tcGxldGlvblN0YXRlLlNVQ0NFU1M6XG4gICAgICBMb2cuaW5mbyhncmVlbihgUmVsZWFzZSBhY3Rpb24gaGFzIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkuYCkpO1xuICAgICAgYnJlYWs7XG4gIH1cbn1cblxuLyoqIENMSSBjb21tYW5kIG1vZHVsZSBmb3IgcHVibGlzaGluZyBhIHJlbGVhc2UuICovXG5leHBvcnQgY29uc3QgUmVsZWFzZVB1Ymxpc2hDb21tYW5kTW9kdWxlOiBDb21tYW5kTW9kdWxlPHt9LCBSZWxlYXNlUHVibGlzaE9wdGlvbnM+ID0ge1xuICBidWlsZGVyLFxuICBoYW5kbGVyLFxuICBjb21tYW5kOiAncHVibGlzaCcsXG4gIGRlc2NyaWJlOiAnUHVibGlzaCBuZXcgcmVsZWFzZXMgYW5kIGNvbmZpZ3VyZSB2ZXJzaW9uIGJyYW5jaGVzLicsXG59O1xuIl19