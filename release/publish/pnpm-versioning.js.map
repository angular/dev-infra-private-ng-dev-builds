{"version":3,"file":"pnpm-versioning.js","sourceRoot":"","sources":["pnpm-versioning.ts"],"names":[],"mappings":"AAQA,OAAO,EAAC,QAAQ,EAAC,MAAM,kBAAkB,CAAC;AAC1C,OAAO,EAAC,IAAI,EAAC,MAAM,WAAW,CAAC;AAC/B,OAAO,EAAC,UAAU,EAAC,MAAM,SAAS,CAAC;AAYnC,MAAM,OAAO,cAAc;IACzB,KAAK,CAAC,WAAW,CAAC,QAAgB;QAGhC,OAAO,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC,CAAC;IAClG,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,QAAgB;QACnC,MAAM,cAAc,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,cAAc,CAAC,EAAE,MAAM,CAAC,CAAC;QAC9E,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAuC,CAAC;QAErF,MAAM,gBAAgB,GAAG,WAAW,EAAE,OAAO,EAAE,CAAC,MAAM,CAAC,IAAI,QAAQ,CAAC;QACpE,OAAO,QAAQ,gBAAgB,EAAE,CAAC;IACpC,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {readFile} from 'node:fs/promises';\nimport {join} from 'node:path';\nimport {existsSync} from 'node:fs';\n\n/**\n * Class that exposes helpers for fetching and using pnpm\n * based on a currently-checked out revision.\n *\n * This is useful as there is no vendoring/checking-in of specific\n * pnpm versions, so we need to automatically fetch the proper pnpm\n * version when executing commands in version branches. Keep in mind that\n * version branches may have different pnpm version ranges, and the release\n * tool should automatically be able to satisfy those.\n */\nexport class PnpmVersioning {\n  async isUsingPnpm(repoPath: string) {\n    // If there is only a pnpm lock file at the workspace root, we assume pnpm\n    // is the primary package manager. We can remove such checks in the future.\n    return existsSync(join(repoPath, 'pnpm-lock.yaml')) && !existsSync(join(repoPath, 'yarn.lock'));\n  }\n\n  async getPackageSpec(repoPath: string) {\n    const packageJsonRaw = await readFile(join(repoPath, 'package.json'), 'utf8');\n    const packageJson = JSON.parse(packageJsonRaw) as {engines?: Record<string, string>};\n\n    const pnpmAllowedRange = packageJson?.engines?.['pnpm'] ?? 'latest';\n    return `pnpm@${pnpmAllowedRange}`;\n  }\n}\n"]}