{"version":3,"file":"external-commands.js","sourceRoot":"","sources":["external-commands.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport semver from 'semver';\n\nimport {ChildProcess, SpawnResult, SpawnOptions} from '../../utils/child-process.js';\nimport {Spinner} from '../../utils/spinner.js';\nimport {NpmDistTag} from '../versioning/index.js';\n\nimport {FatalReleaseActionError} from './actions-error.js';\nimport {resolveYarnScriptForProject} from '../../utils/resolve-yarn-bin.js';\nimport {ReleaseBuildJsonStdout} from '../build/cli.js';\nimport {ReleaseInfoJsonStdout} from '../info/cli.js';\nimport {ReleasePrecheckJsonStdin} from '../precheck/cli.js';\nimport {BuiltPackageWithInfo} from '../config/index.js';\nimport {green, Log} from '../../utils/logging.js';\nimport {getBazelBin} from '../../utils/bazel-bin.js';\nimport {PnpmVersioning} from './pnpm-versioning.js';\n\n/*\n * ###############################################################\n *\n * This file contains helpers for invoking external `ng-dev` commands. A subset of actions,\n * like building release output or setting aν NPM dist tag for release packages, cannot be\n * performed directly as part of the release tool and need to be delegated to external `ng-dev`\n * commands that exist across arbitrary version branches.\n *\n * In a concrete example: Consider a new patch version is released and that a new release\n * package has been added to the `next` branch. The patch branch will not contain the new\n * release package, so we could not build the release output for it. To work around this, we\n * call the ng-dev build command for the patch version branch and expect it to return a list\n * of built packages that need to be released as part of this release train.\n *\n * ###############################################################\n */\n\n/** Class holding method for invoking release action external commands. */\nexport abstract class ExternalCommands {\n  /**\n   * Invokes the `ng-dev release set-dist-tag` command in order to set the specified\n   * NPM dist tag for all packages in the checked out branch to the given version.\n   *\n   * Optionally, the NPM dist tag update can be skipped for experimental packages. This\n   * is useful when tagging long-term-support packages within NPM.\n   */\n  static async invokeSetNpmDist(\n    projectDir: string,\n    npmDistTag: NpmDistTag,\n    version: semver.SemVer,\n    pnpmVersioning: PnpmVersioning,\n    options: {skipExperimentalPackages: boolean} = {skipExperimentalPackages: false},\n  ) {\n    try {\n      // Note: No progress indicator needed as that is the responsibility of the command.\n      await this._spawnNpmScript(\n        [\n          'ng-dev',\n          'release',\n          'set-dist-tag',\n          npmDistTag,\n          version.format(),\n          `--skip-experimental-packages=${options.skipExperimentalPackages}`,\n        ],\n        projectDir,\n        pnpmVersioning,\n      );\n\n      Log.info(green(`  ✓   Set \"${npmDistTag}\" NPM dist tag for all packages to v${version}.`));\n    } catch (e) {\n      Log.error(e);\n      Log.error(`  ✘   An error occurred while setting the NPM dist tag for \"${npmDistTag}\".`);\n      throw new FatalReleaseActionError();\n    }\n  }\n\n  /**\n   * Invokes the `ng-dev release npm-dist-tag delete` command in order to delete the\n   * NPM dist tag for all packages in the checked-out version branch.\n   */\n  static async invokeDeleteNpmDistTag(\n    projectDir: string,\n    npmDistTag: NpmDistTag,\n    pnpmVersioning: PnpmVersioning,\n  ) {\n    try {\n      // Note: No progress indicator needed as that is the responsibility of the command.\n      await this._spawnNpmScript(\n        ['ng-dev', 'release', 'npm-dist-tag', 'delete', npmDistTag],\n        projectDir,\n        pnpmVersioning,\n      );\n\n      Log.info(green(`  ✓   Deleted \"${npmDistTag}\" NPM dist tag for all packages.`));\n    } catch (e) {\n      Log.error(e);\n      Log.error(`  ✘   An error occurred while deleting the NPM dist tag: \"${npmDistTag}\".`);\n      throw new FatalReleaseActionError();\n    }\n  }\n\n  /**\n   * Invokes the `ng-dev release build` command in order to build the release\n   * packages for the currently checked out branch.\n   */\n  static async invokeReleaseBuild(\n    projectDir: string,\n    pnpmVersioning: PnpmVersioning,\n  ): Promise<ReleaseBuildJsonStdout> {\n    // Note: We explicitly mention that this can take a few minutes, so that it's obvious\n    // to caretakers that it can take longer than just a few seconds.\n    const spinner = new Spinner('Building release output. This can take a few minutes.');\n\n    try {\n      const {stdout} = await this._spawnNpmScript(\n        ['ng-dev', 'release', 'build', '--json'],\n        projectDir,\n        pnpmVersioning,\n        {\n          mode: 'silent',\n        },\n      );\n\n      spinner.complete();\n      Log.info(green('  ✓   Built release output for all packages.'));\n      // The `ng-dev release build` command prints a JSON array to stdout\n      // that represents the built release packages and their output paths.\n      return JSON.parse(stdout.trim()) as ReleaseBuildJsonStdout;\n    } catch (e) {\n      spinner.complete();\n      Log.error(e);\n      Log.error('  ✘   An error occurred while building the release packages.');\n      throw new FatalReleaseActionError();\n    }\n  }\n\n  /**\n   * Invokes the `ng-dev release info` command in order to retrieve information\n   * about the release for the currently checked-out branch.\n   *\n   * This is useful to e.g. determine whether a built package is currently\n   * denoted as experimental or not.\n   */\n  static async invokeReleaseInfo(\n    projectDir: string,\n    pnpmVersioning: PnpmVersioning,\n  ): Promise<ReleaseInfoJsonStdout> {\n    try {\n      const {stdout} = await this._spawnNpmScript(\n        ['ng-dev', 'release', 'info', '--json'],\n        projectDir,\n        pnpmVersioning,\n        {mode: 'silent'},\n      );\n\n      // The `ng-dev release info` command prints a JSON object to stdout.\n      return JSON.parse(stdout.trim()) as ReleaseInfoJsonStdout;\n    } catch (e) {\n      Log.error(e);\n      Log.error(\n        `  ✘   An error occurred while retrieving the release information for ` +\n          `the currently checked-out branch.`,\n      );\n      throw new FatalReleaseActionError();\n    }\n  }\n\n  /**\n   * Invokes the `ng-dev release precheck` command in order to validate the\n   * built packages or run other validations before actually releasing.\n   *\n   * This is run as an external command because prechecks can be customized\n   * through the `ng-dev` configuration, and we wouldn't want to run prechecks\n   * from the `next` branch for older branches, like patch or an LTS branch.\n   */\n  static async invokeReleasePrecheck(\n    projectDir: string,\n    newVersion: semver.SemVer,\n    builtPackagesWithInfo: BuiltPackageWithInfo[],\n    pnpmVersioning: PnpmVersioning,\n  ): Promise<void> {\n    const precheckStdin: ReleasePrecheckJsonStdin = {\n      builtPackagesWithInfo,\n      newVersion: newVersion.format(),\n    };\n\n    try {\n      await this._spawnNpmScript(['ng-dev', 'release', 'precheck'], projectDir, pnpmVersioning, {\n        // Note: We pass the precheck information to the command through `stdin`\n        // because command line arguments are less reliable and have length limits.\n        input: JSON.stringify(precheckStdin),\n      });\n\n      Log.info(green(`  ✓   Executed release pre-checks for ${newVersion}`));\n    } catch (e) {\n      // The `spawn` invocation already prints all stdout/stderr, so we don't need re-print.\n      // To ease debugging in case of runtime exceptions, we still print the error to `debug`.\n      Log.debug(e);\n      Log.error(`  ✘   An error occurred while running release pre-checks.`);\n      throw new FatalReleaseActionError();\n    }\n  }\n\n  /**\n   * Invokes the `yarn install` command in order to install dependencies for\n   * the configured project with the currently checked out revision.\n   */\n  static async invokeYarnInstall(projectDir: string): Promise<void> {\n    // Note: We cannot use `yarn` directly as command because we might operate in\n    // a different publish branch and the current `PATH` will point to the Yarn version\n    // that invoked the release tool. More details in the function description.\n    const yarnCommand = await resolveYarnScriptForProject(projectDir);\n\n    try {\n      // Note: No progress indicator needed as that is the responsibility of the command.\n      // TODO: Consider using an Ora spinner instead to ensure minimal console output.\n      await ChildProcess.spawn(\n        yarnCommand.binary,\n        [\n          ...yarnCommand.args,\n          'install',\n          ...(yarnCommand.legacy ? ['--frozen-lockfile', '--non-interactive'] : ['--immutable']),\n        ],\n        {cwd: projectDir},\n      );\n      Log.info(green('  ✓   Installed project dependencies.'));\n    } catch (e) {\n      Log.error(e);\n      Log.error('  ✘   An error occurred while installing dependencies.');\n      throw new FatalReleaseActionError();\n    }\n  }\n\n  /**\n   * Invokes the `pnpm install` command in order to install dependencies for\n   * the configured project with the currently checked out revision.\n   */\n  static async invokePnpmInstall(\n    projectDir: string,\n    pnpmVersioning: PnpmVersioning,\n  ): Promise<void> {\n    try {\n      const pnpmSpec = await pnpmVersioning.getPackageSpec(projectDir);\n      await ChildProcess.spawn('npx', ['--yes', pnpmSpec, 'install', '--frozen-lockfile'], {\n        cwd: projectDir,\n      });\n\n      Log.info(green('  ✓   Installed project dependencies.'));\n    } catch (e) {\n      Log.error(e);\n      Log.error('  ✘   An error occurred while installing dependencies.');\n      throw new FatalReleaseActionError();\n    }\n  }\n\n  /**\n   * Invokes the `yarn bazel sync --only=repo` command in order\n   * to refresh Aspect lock files.\n   */\n  static async invokeBazelUpdateAspectLockFiles(projectDir: string): Promise<void> {\n    const spinner = new Spinner('Updating Aspect lock files');\n    try {\n      await ChildProcess.spawn(getBazelBin(), ['sync', '--only=repo'], {\n        cwd: projectDir,\n        mode: 'silent',\n      });\n    } catch (e) {\n      // Note: Gracefully handling these errors because `sync` command\n      // exits with a non-zero exit code when pnpm-lock.yaml file is updated.\n      Log.debug(e);\n    }\n    spinner.success(green(' Updated Aspect `rules_js` lock files.'));\n  }\n\n  private static async _spawnNpmScript(\n    args: string[],\n    projectDir: string,\n    pnpmVersioning: PnpmVersioning,\n    spawnOptions: SpawnOptions = {},\n  ): Promise<SpawnResult> {\n    if (await pnpmVersioning.isUsingPnpm(projectDir)) {\n      const pnpmSpec = await pnpmVersioning.getPackageSpec(projectDir);\n      return ChildProcess.spawn('npx', ['--yes', pnpmSpec, '-s', 'run', ...args], {\n        ...spawnOptions,\n        cwd: projectDir,\n      });\n    } else {\n      // Note: We cannot use `yarn` directly as command because we might operate in\n      // a different publish branch and the current `PATH` will point to the Yarn version\n      // that invoked the release tool. More details in the function description.\n      const yarnCommand = await resolveYarnScriptForProject(projectDir);\n      return ChildProcess.spawn(yarnCommand.binary, [...yarnCommand.args, ...args], {\n        ...spawnOptions,\n        cwd: projectDir,\n      });\n    }\n  }\n}\n"]}