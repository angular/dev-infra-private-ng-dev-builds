{"version":3,"file":"cut-prerelease.js","sourceRoot":"","sources":["cut-prerelease.ts"],"names":[],"mappings":"AAUA,OAAO,EAAC,SAAS,EAAC,MAAM,6BAA6B,CAAC;AAGtD,OAAO,EAAC,aAAa,EAAC,MAAM,kBAAkB,CAAC;AAU/C,MAAM,OAAgB,uBAAwB,SAAQ,aAAa;IAyBxD,KAAK,CAAC,cAAc;QAC3B,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QACjC,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;QAC9C,OAAO,kCAAkC,MAAM,cAAc,UAAU,IAAI,CAAC;IAC9E,CAAC;IAID,KAAK,CAAC,8BAA8B;QAClC,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QACjC,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;QAC9C,OAAO,0CAA0C,MAAM,cAAc,UAAU,IAAI,CAAC;IACtF,CAAC;IAEQ,KAAK,CAAC,OAAO;QACpB,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QACrC,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;QAC9C,MAAM,6BAA6B,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC;QAE5E,MAAM,EAAC,WAAW,EAAE,YAAY,EAAE,qBAAqB,EAAE,gBAAgB,EAAC,GACxE,MAAM,IAAI,CAAC,6BAA6B,CACtC,UAAU,EACV,6BAA6B,EAC7B,UAAU,CACX,CAAC;QAEJ,MAAM,IAAI,CAAC,iCAAiC,CAAC,WAAW,CAAC,CAAC;QAC1D,MAAM,IAAI,CAAC,OAAO,CAChB,qBAAqB,EACrB,YAAY,EACZ,gBAAgB,EAChB,UAAU,EACV,IAAI,CAAC,UAAU,EACf,EAAC,oBAAoB,EAAE,KAAK,EAAC,CAC9B,CAAC;QAKF,IAAI,IAAI,CAAC,YAAY,KAAK,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;YAC3C,MAAM,IAAI,CAAC,iCAAiC,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;QACzE,CAAC;IACH,CAAC;IAMD,KAAK,CAAC,aAAa;QACjB,IAAI,MAAM,IAAI,CAAC,wBAAwB,EAAE,CAAC;YACxC,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;QACnC,CAAC;aAAM,CAAC;YACN,OAAO,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;QAC5D,CAAC;IACH,CAAC;IAEO,UAAU;QAChB,OAAO,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC;IACtC,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport semver from 'semver';\n\nimport {semverInc} from '../../../../utils/semver.js';\nimport {NpmDistTag} from '../../../versioning/npm-registry.js';\nimport {ReleaseTrain} from '../../../versioning/release-trains.js';\nimport {ReleaseAction} from '../../actions.js';\n\n/**\n * Base action that cuts a pre-release increment for a given release train.\n * A minor or major can have an arbitrary amount of next pre-releases.\n *\n * This base action is used for supporting pre-releases of the `next` train,\n * or an exceptional minor train, or an in-progress FF/RC train. Also used\n * for cutting first release-candidates.\n */\nexport abstract class CutPrereleaseBaseAction extends ReleaseAction {\n  abstract releaseTrain: ReleaseTrain;\n  abstract npmDistTag: NpmDistTag;\n\n  /**\n   * Whether the existing version of the release train should be used. This\n   * functionality exists to allow for cases where a release-train is newly\n   * created and uses a version that is \"to be released\".\n   *\n   * This can happen when an exceptional minor branch is created, or when we\n   * branch off from `main` and bump the version for the upcoming version-\n   * which we do not publish immediately.\n   *\n   * If the promise returns `true`- the same version is used. If `false`,\n   * the simple pre-release increment is used. e.g. `next.1` becomes `next.2`.\n   */\n  abstract shouldUseExistingVersion: Promise<boolean>;\n\n  /**\n   * Compare version used for the release notes generation. This is configurable\n   * because there is no obvious choice for a compare version if `shouldUseExistingVersion`\n   * would evaluate to `true`.\n   */\n  abstract releaseNotesCompareVersion: Promise<semver.SemVer>;\n\n  override async getDescription() {\n    const branch = this._getBranch();\n    const newVersion = await this.getNewVersion();\n    return `Cut a new pre-release for the \"${branch}\" branch (v${newVersion}).`;\n  }\n\n  // This action is also used for cutting a first release candidate. To avoid duplication,\n  // we expose the canonical description here (especially since it's an actual pre-release).\n  async getReleaseCandidateDescription() {\n    const branch = this._getBranch();\n    const newVersion = await this.getNewVersion();\n    return `Cut a first release-candidate for the \"${branch}\" branch (v${newVersion}).`;\n  }\n\n  override async perform() {\n    const branchName = this._getBranch();\n    const newVersion = await this.getNewVersion();\n    const compareVersionForReleaseNotes = await this.releaseNotesCompareVersion;\n\n    const {pullRequest, releaseNotes, builtPackagesWithInfo, beforeStagingSha} =\n      await this.checkoutBranchAndStageVersion(\n        newVersion,\n        compareVersionForReleaseNotes,\n        branchName,\n      );\n\n    await this.promptAndWaitForPullRequestMerged(pullRequest);\n    await this.publish(\n      builtPackagesWithInfo,\n      releaseNotes,\n      beforeStagingSha,\n      branchName,\n      this.npmDistTag,\n      {showAsLatestOnGitHub: false},\n    );\n\n    // If the pre-release has been cut from a train that is not corresponding to\n    // the next release-train, cherry-pick the changelog into the primary development\n    // branch (i.e. the next branch).\n    if (this.releaseTrain !== this.active.next) {\n      await this.cherryPickChangelogIntoNextBranch(releaseNotes, branchName);\n    }\n  }\n\n  /**\n   * Gets the new version that will be published.\n   * Note: Might be overridden by derived actions for e.g. cutting an RC.\n   */\n  async getNewVersion(): Promise<semver.SemVer> {\n    if (await this.shouldUseExistingVersion) {\n      return this.releaseTrain.version;\n    } else {\n      return semverInc(this.releaseTrain.version, 'prerelease');\n    }\n  }\n\n  private _getBranch(): string {\n    return this.releaseTrain.branchName;\n  }\n}\n"]}