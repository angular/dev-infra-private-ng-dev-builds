{"version":3,"file":"branch-off-next-branch.js","sourceRoot":"","sources":["branch-off-next-branch.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport semver from 'semver';\n\nimport {green, Log} from '../../../../utils/logging.js';\nimport {workspaceRelativePackageJsonPath} from '../../../../utils/constants.js';\nimport {ReleaseNotes, workspaceRelativeChangelogPath} from '../../../notes/release-notes.js';\nimport {PullRequest} from '../../actions.js';\nimport {\n  getCommitMessageForExceptionalNextVersionBump,\n  getReleaseNoteCherryPickCommitMessage,\n} from '../../commit-message.js';\nimport {CutNpmNextPrereleaseAction} from '../cut-npm-next-prerelease.js';\nimport {CutNpmNextReleaseCandidateAction} from '../cut-npm-next-release-candidate.js';\nimport {ActiveReleaseTrains} from '../../../versioning/active-release-trains.js';\nimport {updateRenovateConfig} from '../renovate-config-updates.js';\n\n/**\n * Base action that can be used to move the next release-train into the dedicated FF/RC\n * release-train while also cutting a release to move the train into the `feature-freeze`\n * or `release-candidate` phase.\n *\n * This means that a new version branch is created based on the next branch, and a new\n * pre-release (either RC or another `next`) is cut- indicating the new phase.\n */\nexport abstract class BranchOffNextBranchBaseAction extends CutNpmNextPrereleaseAction {\n  /** Phase which the release-train currently in the `next` phase will move into. */\n  abstract newPhaseName: 'feature-freeze' | 'release-candidate';\n\n  // Instances of the action for cutting a NPM next pre-releases. We will re-use\n  // these for determining the \"new versions\" and \"release notes comparison version\".\n  // This helps avoiding duplication, especially since there are is some special logic.\n  private _nextPrerelease = new CutNpmNextPrereleaseAction(\n    new ActiveReleaseTrains({...this.active, releaseCandidate: null}),\n    this.git,\n    this.config,\n    this.projectDir,\n  );\n  private _rcPrerelease = new CutNpmNextReleaseCandidateAction(\n    new ActiveReleaseTrains({...this.active, releaseCandidate: this.active.next}),\n    this.git,\n    this.config,\n    this.projectDir,\n  );\n\n  override async getDescription() {\n    const {branchName} = this.active.next;\n    const newVersion = await this._computeNewVersion();\n    return `Move the \"${branchName}\" branch into ${this.newPhaseName} phase (v${newVersion}).`;\n  }\n\n  override async perform() {\n    const nextBranchName = this.active.next.branchName;\n    const compareVersionForReleaseNotes = await this._computeReleaseNoteCompareVersion();\n    const newVersion = await this._computeNewVersion();\n    const newBranch = `${newVersion.major}.${newVersion.minor}.x`;\n    const {sha: beforeStagingSha} = await this.getLatestCommitOfBranch(nextBranchName);\n\n    // Verify the current next branch has a passing status, before we branch off.\n    await this.assertPassingGithubStatus(beforeStagingSha, nextBranchName);\n\n    // Branch-off the next branch into a new version branch.\n    await this._createNewVersionBranchFromNext(newBranch);\n\n    // Stage the new version for the newly created branch, and push changes to a\n    // fork in order to create a staging pull request. Note that we re-use the newly\n    // created branch instead of re-fetching from the upstream.\n    const {pullRequest, releaseNotes, builtPackagesWithInfo} =\n      await this.stageVersionForBranchAndCreatePullRequest(\n        newVersion,\n        compareVersionForReleaseNotes,\n        newBranch,\n      );\n\n    // Wait for the staging PR to be merged. Then publish the feature-freeze next pre-release. Finally,\n    // cherry-pick the release notes into the next branch in combination with bumping the version to\n    // the next minor too.\n    await this.promptAndWaitForPullRequestMerged(pullRequest);\n    await this.publish(builtPackagesWithInfo, releaseNotes, beforeStagingSha, newBranch, 'next', {\n      showAsLatestOnGitHub: false,\n    });\n\n    const branchOffPullRequest = await this._createNextBranchUpdatePullRequest(\n      releaseNotes,\n      newVersion,\n    );\n    await this.promptAndWaitForPullRequestMerged(branchOffPullRequest);\n  }\n\n  /** Computes the new version for the release-train being branched-off. */\n  private async _computeNewVersion(): Promise<semver.SemVer> {\n    if (this.newPhaseName === 'feature-freeze') {\n      return this._nextPrerelease.getNewVersion();\n    } else {\n      return this._rcPrerelease.getNewVersion();\n    }\n  }\n\n  /** Gets the release notes compare version for the branching-off release. */\n  private async _computeReleaseNoteCompareVersion(): Promise<semver.SemVer> {\n    // Regardless of the new phase, the release notes compare version should\n    // always be the one as if a pre-release is cut on the `next` branch.\n    // We cannot rely on the `CutNpmNextReleaseCandidateAction` here because it\n    // assumes a published release for the train. This is not guaranteed.\n    return await this._nextPrerelease.releaseNotesCompareVersion;\n  }\n\n  /** Creates a new version branch from the next branch. */\n  private async _createNewVersionBranchFromNext(newBranch: string) {\n    const {branchName: nextBranch} = this.active.next;\n    await this.checkoutUpstreamBranch(nextBranch);\n    await this.createLocalBranchFromHead(newBranch);\n    await this.pushHeadToRemoteBranch(newBranch);\n    Log.info(green(`  âœ“   Version branch \"${newBranch}\" created.`));\n  }\n\n  /**\n   * Creates a pull request for the next branch that bumps the version to the next\n   * minor, and cherry-picks the changelog for the newly branched-off release-candidate\n   * or feature-freeze version.\n   */\n  private async _createNextBranchUpdatePullRequest(\n    releaseNotes: ReleaseNotes,\n    newVersion: semver.SemVer,\n  ): Promise<PullRequest> {\n    const {branchName: nextBranch, version} = this.active.next;\n    // We increase the version for the next branch to the next minor. The team can decide\n    // later if they want next to be a major through the `Configure Next as Major` release action.\n    const newNextVersion = semver.parse(`${version.major}.${version.minor + 1}.0-next.0`)!;\n    const bumpCommitMessage = getCommitMessageForExceptionalNextVersionBump(newNextVersion);\n\n    await this.checkoutUpstreamBranch(nextBranch);\n    await this.updateProjectVersion(newNextVersion);\n\n    // Create an individual commit for the next version bump. The changelog should go into\n    // a separate commit that makes it clear where the changelog is cherry-picked from.\n    const filesToCommit: string[] = [\n      workspaceRelativePackageJsonPath,\n      ...this.getAspectLockFiles(),\n    ];\n\n    const renovateConfigPath = await updateRenovateConfig(\n      this.projectDir,\n      `${version.major}.${version.minor}.x`,\n    );\n\n    if (renovateConfigPath) {\n      filesToCommit.push(renovateConfigPath);\n    }\n\n    await this.createCommit(bumpCommitMessage, filesToCommit);\n    await this.prependReleaseNotesToChangelog(releaseNotes);\n\n    const commitMessage = getReleaseNoteCherryPickCommitMessage(releaseNotes.version);\n\n    await this.createCommit(commitMessage, [workspaceRelativeChangelogPath]);\n\n    let nextPullRequestMessage =\n      `The previous \"next\" release-train has moved into the ` +\n      `${this.newPhaseName} phase. This PR updates the next branch to the subsequent ` +\n      `release-train.\\n\\nAlso this PR cherry-picks the changelog for ` +\n      `v${newVersion} into the ${nextBranch} branch so that the changelog is up to date.`;\n\n    const nextUpdatePullRequest = await this.pushChangesToForkAndCreatePullRequest(\n      nextBranch,\n      `next-release-train-${newNextVersion}`,\n      `Update next branch to reflect new release-train \"v${newNextVersion}\".`,\n      nextPullRequestMessage,\n    );\n\n    Log.info(green(`  âœ“   Pull request for updating the \"${nextBranch}\" branch has been created.`));\n\n    return nextUpdatePullRequest;\n  }\n}\n"]}