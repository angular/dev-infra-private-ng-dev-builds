/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { semverInc } from '../../../../utils/semver.js';
import { ReleaseAction } from '../../actions.js';
/**
 * Base action that cuts a pre-release increment for a given release train.
 * A minor or major can have an arbitrary amount of next pre-releases.
 *
 * This base action is used for supporting pre-releases of the `next` train,
 * or an exceptional minor train, or an in-progress FF/RC train. Also used
 * for cutting first release-candidates.
 */
export class CutPrereleaseBaseAction extends ReleaseAction {
    async getDescription() {
        const branch = this._getBranch();
        const newVersion = await this.getNewVersion();
        return `Cut a new pre-release for the "${branch}" branch (v${newVersion}).`;
    }
    // This action is also used for cutting a first release candidate. To avoid duplication,
    // we expose the canonical description here (especially since it's an actual pre-release).
    async getReleaseCandidateDescription() {
        const branch = this._getBranch();
        const newVersion = await this.getNewVersion();
        return `Cut a first release-candidate for the "${branch}" branch (v${newVersion}).`;
    }
    async perform() {
        const branchName = this._getBranch();
        const newVersion = await this.getNewVersion();
        const compareVersionForReleaseNotes = await this.releaseNotesCompareVersion;
        const { pullRequest, releaseNotes, builtPackagesWithInfo, beforeStagingSha } = await this.checkoutBranchAndStageVersion(newVersion, compareVersionForReleaseNotes, branchName);
        await this.promptAndWaitForPullRequestMerged(pullRequest);
        await this.publish(builtPackagesWithInfo, releaseNotes, beforeStagingSha, branchName, this.npmDistTag, { showAsLatestOnGitHub: false });
        // If the pre-release has been cut from a train that is not corresponding to
        // the next release-train, cherry-pick the changelog into the primary development
        // branch (i.e. the next branch).
        if (this.releaseTrain !== this.active.next) {
            await this.cherryPickChangelogIntoNextBranch(releaseNotes, branchName);
        }
    }
    /**
     * Gets the new version that will be published.
     * Note: Might be overridden by derived actions for e.g. cutting an RC.
     */
    async getNewVersion() {
        if (await this.shouldUseExistingVersion) {
            return this.releaseTrain.version;
        }
        else {
            return semverInc(this.releaseTrain.version, 'prerelease');
        }
    }
    _getBranch() {
        return this.releaseTrain.branchName;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3V0LXByZXJlbGVhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9uZy1kZXYvcmVsZWFzZS9wdWJsaXNoL2FjdGlvbnMvc2hhcmVkL2N1dC1wcmVyZWxlYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUlILE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQztBQUd0RCxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFFL0M7Ozs7Ozs7R0FPRztBQUNILE1BQU0sT0FBZ0IsdUJBQXdCLFNBQVEsYUFBYTtJQXlCeEQsS0FBSyxDQUFDLGNBQWM7UUFDM0IsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2pDLE1BQU0sVUFBVSxHQUFHLE1BQU0sSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQzlDLE9BQU8sa0NBQWtDLE1BQU0sY0FBYyxVQUFVLElBQUksQ0FBQztJQUM5RSxDQUFDO0lBRUQsd0ZBQXdGO0lBQ3hGLDBGQUEwRjtJQUMxRixLQUFLLENBQUMsOEJBQThCO1FBQ2xDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNqQyxNQUFNLFVBQVUsR0FBRyxNQUFNLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUM5QyxPQUFPLDBDQUEwQyxNQUFNLGNBQWMsVUFBVSxJQUFJLENBQUM7SUFDdEYsQ0FBQztJQUVRLEtBQUssQ0FBQyxPQUFPO1FBQ3BCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNyQyxNQUFNLFVBQVUsR0FBRyxNQUFNLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUM5QyxNQUFNLDZCQUE2QixHQUFHLE1BQU0sSUFBSSxDQUFDLDBCQUEwQixDQUFDO1FBRTVFLE1BQU0sRUFBQyxXQUFXLEVBQUUsWUFBWSxFQUFFLHFCQUFxQixFQUFFLGdCQUFnQixFQUFDLEdBQ3hFLE1BQU0sSUFBSSxDQUFDLDZCQUE2QixDQUN0QyxVQUFVLEVBQ1YsNkJBQTZCLEVBQzdCLFVBQVUsQ0FDWCxDQUFDO1FBRUosTUFBTSxJQUFJLENBQUMsaUNBQWlDLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDMUQsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUNoQixxQkFBcUIsRUFDckIsWUFBWSxFQUNaLGdCQUFnQixFQUNoQixVQUFVLEVBQ1YsSUFBSSxDQUFDLFVBQVUsRUFDZixFQUFDLG9CQUFvQixFQUFFLEtBQUssRUFBQyxDQUM5QixDQUFDO1FBRUYsNEVBQTRFO1FBQzVFLGlGQUFpRjtRQUNqRixpQ0FBaUM7UUFDakMsSUFBSSxJQUFJLENBQUMsWUFBWSxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDM0MsTUFBTSxJQUFJLENBQUMsaUNBQWlDLENBQUMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3pFLENBQUM7SUFDSCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLGFBQWE7UUFDakIsSUFBSSxNQUFNLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1lBQ3hDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUM7UUFDbkMsQ0FBQzthQUFNLENBQUM7WUFDTixPQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztRQUM1RCxDQUFDO0lBQ0gsQ0FBQztJQUVPLFVBQVU7UUFDaEIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQztJQUN0QyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQ1xuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHNlbXZlciBmcm9tICdzZW12ZXInO1xuXG5pbXBvcnQge3NlbXZlckluY30gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvc2VtdmVyLmpzJztcbmltcG9ydCB7TnBtRGlzdFRhZ30gZnJvbSAnLi4vLi4vLi4vdmVyc2lvbmluZy9ucG0tcmVnaXN0cnkuanMnO1xuaW1wb3J0IHtSZWxlYXNlVHJhaW59IGZyb20gJy4uLy4uLy4uL3ZlcnNpb25pbmcvcmVsZWFzZS10cmFpbnMuanMnO1xuaW1wb3J0IHtSZWxlYXNlQWN0aW9ufSBmcm9tICcuLi8uLi9hY3Rpb25zLmpzJztcblxuLyoqXG4gKiBCYXNlIGFjdGlvbiB0aGF0IGN1dHMgYSBwcmUtcmVsZWFzZSBpbmNyZW1lbnQgZm9yIGEgZ2l2ZW4gcmVsZWFzZSB0cmFpbi5cbiAqIEEgbWlub3Igb3IgbWFqb3IgY2FuIGhhdmUgYW4gYXJiaXRyYXJ5IGFtb3VudCBvZiBuZXh0IHByZS1yZWxlYXNlcy5cbiAqXG4gKiBUaGlzIGJhc2UgYWN0aW9uIGlzIHVzZWQgZm9yIHN1cHBvcnRpbmcgcHJlLXJlbGVhc2VzIG9mIHRoZSBgbmV4dGAgdHJhaW4sXG4gKiBvciBhbiBleGNlcHRpb25hbCBtaW5vciB0cmFpbiwgb3IgYW4gaW4tcHJvZ3Jlc3MgRkYvUkMgdHJhaW4uIEFsc28gdXNlZFxuICogZm9yIGN1dHRpbmcgZmlyc3QgcmVsZWFzZS1jYW5kaWRhdGVzLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ3V0UHJlcmVsZWFzZUJhc2VBY3Rpb24gZXh0ZW5kcyBSZWxlYXNlQWN0aW9uIHtcbiAgYWJzdHJhY3QgcmVsZWFzZVRyYWluOiBSZWxlYXNlVHJhaW47XG4gIGFic3RyYWN0IG5wbURpc3RUYWc6IE5wbURpc3RUYWc7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGV4aXN0aW5nIHZlcnNpb24gb2YgdGhlIHJlbGVhc2UgdHJhaW4gc2hvdWxkIGJlIHVzZWQuIFRoaXNcbiAgICogZnVuY3Rpb25hbGl0eSBleGlzdHMgdG8gYWxsb3cgZm9yIGNhc2VzIHdoZXJlIGEgcmVsZWFzZS10cmFpbiBpcyBuZXdseVxuICAgKiBjcmVhdGVkIGFuZCB1c2VzIGEgdmVyc2lvbiB0aGF0IGlzIFwidG8gYmUgcmVsZWFzZWRcIi5cbiAgICpcbiAgICogVGhpcyBjYW4gaGFwcGVuIHdoZW4gYW4gZXhjZXB0aW9uYWwgbWlub3IgYnJhbmNoIGlzIGNyZWF0ZWQsIG9yIHdoZW4gd2VcbiAgICogYnJhbmNoIG9mZiBmcm9tIGBtYWluYCBhbmQgYnVtcCB0aGUgdmVyc2lvbiBmb3IgdGhlIHVwY29taW5nIHZlcnNpb24tXG4gICAqIHdoaWNoIHdlIGRvIG5vdCBwdWJsaXNoIGltbWVkaWF0ZWx5LlxuICAgKlxuICAgKiBJZiB0aGUgcHJvbWlzZSByZXR1cm5zIGB0cnVlYC0gdGhlIHNhbWUgdmVyc2lvbiBpcyB1c2VkLiBJZiBgZmFsc2VgLFxuICAgKiB0aGUgc2ltcGxlIHByZS1yZWxlYXNlIGluY3JlbWVudCBpcyB1c2VkLiBlLmcuIGBuZXh0LjFgIGJlY29tZXMgYG5leHQuMmAuXG4gICAqL1xuICBhYnN0cmFjdCBzaG91bGRVc2VFeGlzdGluZ1ZlcnNpb246IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgLyoqXG4gICAqIENvbXBhcmUgdmVyc2lvbiB1c2VkIGZvciB0aGUgcmVsZWFzZSBub3RlcyBnZW5lcmF0aW9uLiBUaGlzIGlzIGNvbmZpZ3VyYWJsZVxuICAgKiBiZWNhdXNlIHRoZXJlIGlzIG5vIG9idmlvdXMgY2hvaWNlIGZvciBhIGNvbXBhcmUgdmVyc2lvbiBpZiBgc2hvdWxkVXNlRXhpc3RpbmdWZXJzaW9uYFxuICAgKiB3b3VsZCBldmFsdWF0ZSB0byBgdHJ1ZWAuXG4gICAqL1xuICBhYnN0cmFjdCByZWxlYXNlTm90ZXNDb21wYXJlVmVyc2lvbjogUHJvbWlzZTxzZW12ZXIuU2VtVmVyPjtcblxuICBvdmVycmlkZSBhc3luYyBnZXREZXNjcmlwdGlvbigpIHtcbiAgICBjb25zdCBicmFuY2ggPSB0aGlzLl9nZXRCcmFuY2goKTtcbiAgICBjb25zdCBuZXdWZXJzaW9uID0gYXdhaXQgdGhpcy5nZXROZXdWZXJzaW9uKCk7XG4gICAgcmV0dXJuIGBDdXQgYSBuZXcgcHJlLXJlbGVhc2UgZm9yIHRoZSBcIiR7YnJhbmNofVwiIGJyYW5jaCAodiR7bmV3VmVyc2lvbn0pLmA7XG4gIH1cblxuICAvLyBUaGlzIGFjdGlvbiBpcyBhbHNvIHVzZWQgZm9yIGN1dHRpbmcgYSBmaXJzdCByZWxlYXNlIGNhbmRpZGF0ZS4gVG8gYXZvaWQgZHVwbGljYXRpb24sXG4gIC8vIHdlIGV4cG9zZSB0aGUgY2Fub25pY2FsIGRlc2NyaXB0aW9uIGhlcmUgKGVzcGVjaWFsbHkgc2luY2UgaXQncyBhbiBhY3R1YWwgcHJlLXJlbGVhc2UpLlxuICBhc3luYyBnZXRSZWxlYXNlQ2FuZGlkYXRlRGVzY3JpcHRpb24oKSB7XG4gICAgY29uc3QgYnJhbmNoID0gdGhpcy5fZ2V0QnJhbmNoKCk7XG4gICAgY29uc3QgbmV3VmVyc2lvbiA9IGF3YWl0IHRoaXMuZ2V0TmV3VmVyc2lvbigpO1xuICAgIHJldHVybiBgQ3V0IGEgZmlyc3QgcmVsZWFzZS1jYW5kaWRhdGUgZm9yIHRoZSBcIiR7YnJhbmNofVwiIGJyYW5jaCAodiR7bmV3VmVyc2lvbn0pLmA7XG4gIH1cblxuICBvdmVycmlkZSBhc3luYyBwZXJmb3JtKCkge1xuICAgIGNvbnN0IGJyYW5jaE5hbWUgPSB0aGlzLl9nZXRCcmFuY2goKTtcbiAgICBjb25zdCBuZXdWZXJzaW9uID0gYXdhaXQgdGhpcy5nZXROZXdWZXJzaW9uKCk7XG4gICAgY29uc3QgY29tcGFyZVZlcnNpb25Gb3JSZWxlYXNlTm90ZXMgPSBhd2FpdCB0aGlzLnJlbGVhc2VOb3Rlc0NvbXBhcmVWZXJzaW9uO1xuXG4gICAgY29uc3Qge3B1bGxSZXF1ZXN0LCByZWxlYXNlTm90ZXMsIGJ1aWx0UGFja2FnZXNXaXRoSW5mbywgYmVmb3JlU3RhZ2luZ1NoYX0gPVxuICAgICAgYXdhaXQgdGhpcy5jaGVja291dEJyYW5jaEFuZFN0YWdlVmVyc2lvbihcbiAgICAgICAgbmV3VmVyc2lvbixcbiAgICAgICAgY29tcGFyZVZlcnNpb25Gb3JSZWxlYXNlTm90ZXMsXG4gICAgICAgIGJyYW5jaE5hbWUsXG4gICAgICApO1xuXG4gICAgYXdhaXQgdGhpcy5wcm9tcHRBbmRXYWl0Rm9yUHVsbFJlcXVlc3RNZXJnZWQocHVsbFJlcXVlc3QpO1xuICAgIGF3YWl0IHRoaXMucHVibGlzaChcbiAgICAgIGJ1aWx0UGFja2FnZXNXaXRoSW5mbyxcbiAgICAgIHJlbGVhc2VOb3RlcyxcbiAgICAgIGJlZm9yZVN0YWdpbmdTaGEsXG4gICAgICBicmFuY2hOYW1lLFxuICAgICAgdGhpcy5ucG1EaXN0VGFnLFxuICAgICAge3Nob3dBc0xhdGVzdE9uR2l0SHViOiBmYWxzZX0sXG4gICAgKTtcblxuICAgIC8vIElmIHRoZSBwcmUtcmVsZWFzZSBoYXMgYmVlbiBjdXQgZnJvbSBhIHRyYWluIHRoYXQgaXMgbm90IGNvcnJlc3BvbmRpbmcgdG9cbiAgICAvLyB0aGUgbmV4dCByZWxlYXNlLXRyYWluLCBjaGVycnktcGljayB0aGUgY2hhbmdlbG9nIGludG8gdGhlIHByaW1hcnkgZGV2ZWxvcG1lbnRcbiAgICAvLyBicmFuY2ggKGkuZS4gdGhlIG5leHQgYnJhbmNoKS5cbiAgICBpZiAodGhpcy5yZWxlYXNlVHJhaW4gIT09IHRoaXMuYWN0aXZlLm5leHQpIHtcbiAgICAgIGF3YWl0IHRoaXMuY2hlcnJ5UGlja0NoYW5nZWxvZ0ludG9OZXh0QnJhbmNoKHJlbGVhc2VOb3RlcywgYnJhbmNoTmFtZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG5ldyB2ZXJzaW9uIHRoYXQgd2lsbCBiZSBwdWJsaXNoZWQuXG4gICAqIE5vdGU6IE1pZ2h0IGJlIG92ZXJyaWRkZW4gYnkgZGVyaXZlZCBhY3Rpb25zIGZvciBlLmcuIGN1dHRpbmcgYW4gUkMuXG4gICAqL1xuICBhc3luYyBnZXROZXdWZXJzaW9uKCk6IFByb21pc2U8c2VtdmVyLlNlbVZlcj4ge1xuICAgIGlmIChhd2FpdCB0aGlzLnNob3VsZFVzZUV4aXN0aW5nVmVyc2lvbikge1xuICAgICAgcmV0dXJuIHRoaXMucmVsZWFzZVRyYWluLnZlcnNpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzZW12ZXJJbmModGhpcy5yZWxlYXNlVHJhaW4udmVyc2lvbiwgJ3ByZXJlbGVhc2UnKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9nZXRCcmFuY2goKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5yZWxlYXNlVHJhaW4uYnJhbmNoTmFtZTtcbiAgfVxufVxuIl19