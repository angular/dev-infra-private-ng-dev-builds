{"version":3,"file":"cut-new-patch.js","sourceRoot":"","sources":["cut-new-patch.ts"],"names":[],"mappings":"AAQA,OAAO,EAAC,SAAS,EAAC,MAAM,0BAA0B,CAAC;AAEnD,OAAO,EAAC,aAAa,EAAC,MAAM,eAAe,CAAC;AAO5C,MAAM,OAAO,iBAAkB,SAAQ,aAAa;IAApD;;QACU,qBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC;QAC9C,gBAAW,GAAG,SAAS,CAAC,IAAI,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;IAqClE,CAAC;IAnCU,KAAK,CAAC,cAAc;QAC3B,MAAM,EAAC,UAAU,EAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QACxC,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;QACpC,OAAO,oCAAoC,UAAU,cAAc,UAAU,IAAI,CAAC;IACpF,CAAC;IAEQ,KAAK,CAAC,OAAO;QACpB,MAAM,EAAC,UAAU,EAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QACxC,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;QACpC,MAAM,6BAA6B,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAE5D,MAAM,EAAC,WAAW,EAAE,YAAY,EAAE,qBAAqB,EAAE,gBAAgB,EAAC,GACxE,MAAM,IAAI,CAAC,6BAA6B,CACtC,UAAU,EACV,6BAA6B,EAC7B,UAAU,CACX,CAAC;QAEJ,MAAM,IAAI,CAAC,iCAAiC,CAAC,WAAW,CAAC,CAAC;QAC1D,MAAM,IAAI,CAAC,OAAO,CAChB,qBAAqB,EACrB,YAAY,EACZ,gBAAgB,EAChB,UAAU,EACV,QAAQ,EACR,EAAC,oBAAoB,EAAE,IAAI,EAAC,CAC7B,CAAC;QACF,MAAM,IAAI,CAAC,iCAAiC,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;IACzE,CAAC;IAED,MAAM,CAAU,KAAK,CAAC,QAAQ,CAAC,OAA4B;QAGzD,OAAO,IAAI,CAAC;IACd,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {semverInc} from '../../../utils/semver.js';\nimport {ActiveReleaseTrains} from '../../versioning/active-release-trains.js';\nimport {ReleaseAction} from '../actions.js';\n\n/**\n * Release action that cuts a new patch release for the current latest release-train version\n * branch (i.e. the patch branch). The patch segment is incremented. The changelog is generated\n * for the new patch version, but also needs to be cherry-picked into the next development branch.\n */\nexport class CutNewPatchAction extends ReleaseAction {\n  private _previousVersion = this.active.latest.version;\n  private _newVersion = semverInc(this._previousVersion, 'patch');\n\n  override async getDescription() {\n    const {branchName} = this.active.latest;\n    const newVersion = this._newVersion;\n    return `Cut a new patch release for the \"${branchName}\" branch (v${newVersion}).`;\n  }\n\n  override async perform() {\n    const {branchName} = this.active.latest;\n    const newVersion = this._newVersion;\n    const compareVersionForReleaseNotes = this._previousVersion;\n\n    const {pullRequest, releaseNotes, builtPackagesWithInfo, beforeStagingSha} =\n      await this.checkoutBranchAndStageVersion(\n        newVersion,\n        compareVersionForReleaseNotes,\n        branchName,\n      );\n\n    await this.promptAndWaitForPullRequestMerged(pullRequest);\n    await this.publish(\n      builtPackagesWithInfo,\n      releaseNotes,\n      beforeStagingSha,\n      branchName,\n      'latest',\n      {showAsLatestOnGitHub: true},\n    );\n    await this.cherryPickChangelogIntoNextBranch(releaseNotes, branchName);\n  }\n\n  static override async isActive(_active: ActiveReleaseTrains) {\n    // Patch versions can be cut at any time. See:\n    // https://hackmd.io/2Le8leq0S6G_R5VEVTNK9A#Release-prompt-options.\n    return true;\n  }\n}\n"]}