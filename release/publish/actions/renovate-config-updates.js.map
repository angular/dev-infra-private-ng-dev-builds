{"version":3,"file":"renovate-config-updates.js","sourceRoot":"","sources":["renovate-config-updates.ts"],"names":[],"mappings":"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","sourcesContent":["import {existsSync} from 'node:fs';\nimport {green, Log} from '../../../utils/logging.js';\nimport {join} from 'node:path';\nimport {writeFile, readFile} from 'node:fs/promises';\nimport {targetLabels} from '../../../pr/common/labels/target.js';\n\n/**\n * Updates the `renovate.json` configuration file to include a new base branch.\n * It also updates specific target labels within the package rules.\n *\n * @param projectDir - The path to the project directory.\n * @param newBranchName - The name of the new branch to add to the base branches list.\n * @returns A promise that resolves to the path of the modified `renovate.json` file if updated,\n * or `null` if the file was not found or the `baseBranchPatterns` array has an unexpected format.\n */\nexport async function updateRenovateConfig(\n  projectDir: string,\n  newBranchName: string,\n): Promise<string | null> {\n  const renovateConfigPath = join(projectDir, 'renovate.json');\n  if (!existsSync(renovateConfigPath)) {\n    Log.warn(`  ✘   Skipped updating Renovate config as it was not found.`);\n    return null;\n  }\n\n  const config = await readFile(renovateConfigPath, 'utf-8');\n  const configJson = JSON.parse(config) as Record<string, unknown>;\n  const baseBranchPatterns = configJson['baseBranchPatterns'];\n\n  if (!Array.isArray(baseBranchPatterns) || baseBranchPatterns.length !== 2) {\n    Log.warn(\n      `  ✘   Skipped updating Renovate config: \"baseBranchPatterns\" must contain exactly 2 branches.`,\n    );\n\n    return null;\n  }\n\n  configJson['baseBranchPatterns'] = ['main', newBranchName];\n\n  updateRenovateTargetLabel(\n    configJson,\n    targetLabels['TARGET_PATCH'].name,\n    targetLabels['TARGET_RC'].name,\n  );\n  await writeFile(renovateConfigPath, JSON.stringify(configJson, undefined, 2));\n\n  Log.info(green(`  ✓   Updated Renovate config.`));\n  return renovateConfigPath;\n}\n\n/**\n * Updates a specific target label in the `renovate.json` configuration file.\n * This function specifically targets and replaces one label with another within the `packageRules`.\n *\n * @param projectDir - The path to the project directory.\n * @param fromLabel - The label name to be replaced.\n * @param toLabel - The new label name to replace `fromLabel` with.\n * @returns A promise that resolves to the path of the modified `renovate.json` file if updated,\n * or `null` if the file was not found or the `baseBranchPatterns` array has an unexpected format.\n */\nexport async function updateRenovateConfigTargetLabels(\n  projectDir: string,\n  fromLabel: string,\n  toLabel: string,\n): Promise<string | null> {\n  const renovateConfigPath = join(projectDir, 'renovate.json');\n  if (!existsSync(renovateConfigPath)) {\n    Log.warn(`  ✘   Skipped updating Renovate config as it was not found.`);\n\n    return null;\n  }\n\n  const config = await readFile(renovateConfigPath, 'utf-8');\n  const configJson = JSON.parse(config) as Record<string, unknown>;\n\n  // Check baseBranchPatterns just in case, though this function's primary focus is labels\n  const baseBranchPatterns = configJson['baseBranchPatterns'];\n  if (!Array.isArray(baseBranchPatterns) || baseBranchPatterns.length !== 2) {\n    Log.warn(\n      `  ✘   Skipped updating Renovate config: \"baseBranchPatterns\" must contain exactly 2 branches.`,\n    );\n\n    return null;\n  }\n\n  if (updateRenovateTargetLabel(configJson, fromLabel, toLabel)) {\n    await writeFile(renovateConfigPath, JSON.stringify(configJson, undefined, 2));\n    Log.info(green(`  ✓   Updated target label in Renovate config.`));\n\n    return renovateConfigPath;\n  } else {\n    Log.info(green(`  ✓   No changes to target labels in Renovate config.`));\n    return null;\n  }\n}\n\n/**\n * Updates a specific target label within the `packageRules` of a Renovate configuration.\n *\n * @param configJson - The parsed JSON object of the Renovate configuration.\n * @param fromLabel - The label name to be replaced.\n * @param toLabel - The new label name to replace `fromLabel` with.\n * @returns `true` is the label has been updated, otherwise `false`.\n */\nfunction updateRenovateTargetLabel(\n  configJson: Record<string, unknown>,\n  fromLabel: string,\n  toLabel: string,\n): boolean {\n  if (!Array.isArray(configJson['packageRules'])) {\n    return false;\n  }\n\n  let updated = false;\n  for (const rule of configJson['packageRules']) {\n    if (!Array.isArray(rule.addLabels)) {\n      continue;\n    }\n\n    const idx = (rule.addLabels as string[]).findIndex((x) => x === fromLabel);\n    if (idx >= 0) {\n      rule.addLabels[idx] = toLabel;\n      updated = true;\n    }\n  }\n\n  return updated;\n}\n"]}