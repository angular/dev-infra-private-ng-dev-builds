{"version":3,"file":"cut-lts-patch.js","sourceRoot":"","sources":["cut-lts-patch.ts"],"names":[],"mappings":"AAQA,OAAO,EAAC,MAAM,EAAC,MAAM,0BAA0B,CAAC;AAChD,OAAO,EAAC,SAAS,EAAC,MAAM,0BAA0B,CAAC;AAEnD,OAAO,EACL,mCAAmC,GAEpC,MAAM,uCAAuC,CAAC;AAC/C,OAAO,EAAC,aAAa,EAAC,MAAM,eAAe,CAAC;AAO5C,MAAM,OAAO,6BAA8B,SAAQ,aAAa;IAAhE;;QAEE,gBAAW,GAAG,mCAAmC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAsEjE,CAAC;IApEU,KAAK,CAAC,cAAc;QAC3B,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC;QACxC,OAAO,+CAA+C,MAAM,CAAC,MAAM,WAAW,CAAC;IACjF,CAAC;IAEQ,KAAK,CAAC,OAAO;QACpB,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,yBAAyB,EAAE,CAAC;QACzD,MAAM,UAAU,GAAG,SAAS,CAAC,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACzD,MAAM,6BAA6B,GAAG,SAAS,CAAC,OAAO,CAAC;QAExD,MAAM,EAAC,WAAW,EAAE,YAAY,EAAE,qBAAqB,EAAE,gBAAgB,EAAC,GACxE,MAAM,IAAI,CAAC,6BAA6B,CACtC,UAAU,EACV,6BAA6B,EAC7B,SAAS,CAAC,IAAI,CACf,CAAC;QAEJ,MAAM,IAAI,CAAC,iCAAiC,CAAC,WAAW,CAAC,CAAC;QAC1D,MAAM,IAAI,CAAC,OAAO,CAChB,qBAAqB,EACrB,YAAY,EACZ,gBAAgB,EAChB,SAAS,CAAC,IAAI,EACd,SAAS,CAAC,UAAU,EACpB,EAAC,oBAAoB,EAAE,KAAK,EAAC,CAC9B,CAAC;QACF,MAAM,IAAI,CAAC,iCAAiC,CAAC,YAAY,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC;IAC7E,CAAC;IAGO,KAAK,CAAC,yBAAyB;QACrC,MAAM,EAAC,MAAM,EAAE,QAAQ,EAAC,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC;QAClD,MAAM,mBAAmB,GAA8C,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAC3F,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CACpC,CAAC;QACF,MAAM,qBAAqB,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC,CAAC;QAK5F,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC1B,mBAAmB,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,yCAAyC,EAAE,KAAK,EAAE,IAAI,EAAC,CAAC,CAAC;QAC3F,CAAC;QAED,MAAM,eAAe,GAAG,MAAM,MAAM,CAAC,MAAM,CAAmB;YAC5D,OAAO,EAAE,gEAAgE;YACzE,OAAO,EAAE,mBAAmB;SAC7B,CAAC,CAAC;QACH,IAAI,eAAe,EAAE,CAAC;YACpB,OAAO,eAAe,CAAC;QACzB,CAAC;QACD,OAAO,MAAM,MAAM,CAAC,MAAM,CAAY;YACpC,OAAO,EAAE,8EAA8E;YACvF,OAAO,EAAE,qBAAqB;SAC/B,CAAC,CAAC;IACL,CAAC;IAGO,sBAAsB,CAAC,MAAiB;QAC9C,OAAO,EAAC,IAAI,EAAE,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,UAAU,MAAM,CAAC,IAAI,GAAG,EAAE,KAAK,EAAE,MAAM,EAAC,CAAC;IACjF,CAAC;IAED,MAAM,CAAU,KAAK,CAAC,QAAQ,CAAC,OAA4B;QAIzD,OAAO,IAAI,CAAC;IACd,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Prompt} from '../../../utils/prompt.js';\nimport {semverInc} from '../../../utils/semver.js';\nimport {ActiveReleaseTrains} from '../../versioning/active-release-trains.js';\nimport {\n  fetchLongTermSupportBranchesFromNpm,\n  LtsBranch,\n} from '../../versioning/long-term-support.js';\nimport {ReleaseAction} from '../actions.js';\n\n/**\n * Release action that cuts a new patch release for an active release-train in the long-term\n * support phase. The patch segment is incremented. The changelog is generated for the new\n * patch version, but also needs to be cherry-picked into the next development branch.\n */\nexport class CutLongTermSupportPatchAction extends ReleaseAction {\n  /** Promise resolving an object describing long-term support branches. */\n  ltsBranches = fetchLongTermSupportBranchesFromNpm(this.config);\n\n  override async getDescription() {\n    const {active} = await this.ltsBranches;\n    return `Cut a new release for an active LTS branch (${active.length} active).`;\n  }\n\n  override async perform() {\n    const ltsBranch = await this._promptForTargetLtsBranch();\n    const newVersion = semverInc(ltsBranch.version, 'patch');\n    const compareVersionForReleaseNotes = ltsBranch.version;\n\n    const {pullRequest, releaseNotes, builtPackagesWithInfo, beforeStagingSha} =\n      await this.checkoutBranchAndStageVersion(\n        newVersion,\n        compareVersionForReleaseNotes,\n        ltsBranch.name,\n      );\n\n    await this.promptAndWaitForPullRequestMerged(pullRequest);\n    await this.publish(\n      builtPackagesWithInfo,\n      releaseNotes,\n      beforeStagingSha,\n      ltsBranch.name,\n      ltsBranch.npmDistTag,\n      {showAsLatestOnGitHub: false},\n    );\n    await this.cherryPickChangelogIntoNextBranch(releaseNotes, ltsBranch.name);\n  }\n\n  /** Prompts the user to select an LTS branch for which a patch should but cut. */\n  private async _promptForTargetLtsBranch(): Promise<LtsBranch> {\n    const {active, inactive} = await this.ltsBranches;\n    const activeBranchChoices: {name: string; value: LtsBranch | null}[] = active.map((branch) =>\n      this._getChoiceForLtsBranch(branch),\n    );\n    const inactiveBranchChoices = inactive.map((branch) => this._getChoiceForLtsBranch(branch));\n\n    // If there are inactive LTS branches, we allow them to be selected. In some situations,\n    // patch releases are still cut for inactive LTS branches. e.g. when the LTS duration\n    // has been increased due to exceptional events ()\n    if (inactive.length !== 0) {\n      activeBranchChoices.push({name: 'Inactive LTS versions (not recommended)', value: null});\n    }\n\n    const activeLtsBranch = await Prompt.select<LtsBranch | null>({\n      message: 'Please select a version for which you want to cut an LTS patch',\n      choices: activeBranchChoices,\n    });\n    if (activeLtsBranch) {\n      return activeLtsBranch;\n    }\n    return await Prompt.select<LtsBranch>({\n      message: 'Please select an inactive LTS version for which you want to cut an LTS patch',\n      choices: inactiveBranchChoices,\n    });\n  }\n\n  /** Gets an inquirer choice for the given LTS branch. */\n  private _getChoiceForLtsBranch(branch: LtsBranch): {name: string; value: LtsBranch} {\n    return {name: `v${branch.version.major} (from ${branch.name})`, value: branch};\n  }\n\n  static override async isActive(_active: ActiveReleaseTrains) {\n    // LTS patch versions can be only cut if there are release trains in LTS phase.\n    // This action is always selectable as we support publishing of old LTS branches,\n    // and have prompt for selecting an LTS branch when the action performs.\n    return true;\n  }\n}\n"]}