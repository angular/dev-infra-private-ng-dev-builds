/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { semverInc } from '../../../utils/semver.js';
import { ReleaseAction } from '../actions.js';
/**
 * Release action that cuts a new patch release for the current latest release-train version
 * branch (i.e. the patch branch). The patch segment is incremented. The changelog is generated
 * for the new patch version, but also needs to be cherry-picked into the next development branch.
 */
export class CutNewPatchAction extends ReleaseAction {
    constructor() {
        super(...arguments);
        this._previousVersion = this.active.latest.version;
        this._newVersion = semverInc(this._previousVersion, 'patch');
    }
    async getDescription() {
        const { branchName } = this.active.latest;
        const newVersion = this._newVersion;
        return `Cut a new patch release for the "${branchName}" branch (v${newVersion}).`;
    }
    async perform() {
        const { branchName } = this.active.latest;
        const newVersion = this._newVersion;
        const compareVersionForReleaseNotes = this._previousVersion;
        const { pullRequest, releaseNotes, builtPackagesWithInfo, beforeStagingSha } = await this.checkoutBranchAndStageVersion(newVersion, compareVersionForReleaseNotes, branchName);
        await this.promptAndWaitForPullRequestMerged(pullRequest);
        await this.publish(builtPackagesWithInfo, releaseNotes, beforeStagingSha, branchName, 'latest', { showAsLatestOnGitHub: true });
        await this.cherryPickChangelogIntoNextBranch(releaseNotes, branchName);
    }
    static async isActive(_active) {
        // Patch versions can be cut at any time. See:
        // https://hackmd.io/2Le8leq0S6G_R5VEVTNK9A#Release-prompt-options.
        return true;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3V0LW5ldy1wYXRjaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25nLWRldi9yZWxlYXNlL3B1Ymxpc2gvYWN0aW9ucy9jdXQtbmV3LXBhdGNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUVuRCxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRTVDOzs7O0dBSUc7QUFDSCxNQUFNLE9BQU8saUJBQWtCLFNBQVEsYUFBYTtJQUFwRDs7UUFDVSxxQkFBZ0IsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDOUMsZ0JBQVcsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBcUNsRSxDQUFDO0lBbkNVLEtBQUssQ0FBQyxjQUFjO1FBQzNCLE1BQU0sRUFBQyxVQUFVLEVBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUN4QyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQ3BDLE9BQU8sb0NBQW9DLFVBQVUsY0FBYyxVQUFVLElBQUksQ0FBQztJQUNwRixDQUFDO0lBRVEsS0FBSyxDQUFDLE9BQU87UUFDcEIsTUFBTSxFQUFDLFVBQVUsRUFBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ3hDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDcEMsTUFBTSw2QkFBNkIsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7UUFFNUQsTUFBTSxFQUFDLFdBQVcsRUFBRSxZQUFZLEVBQUUscUJBQXFCLEVBQUUsZ0JBQWdCLEVBQUMsR0FDeEUsTUFBTSxJQUFJLENBQUMsNkJBQTZCLENBQ3RDLFVBQVUsRUFDViw2QkFBNkIsRUFDN0IsVUFBVSxDQUNYLENBQUM7UUFFSixNQUFNLElBQUksQ0FBQyxpQ0FBaUMsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUMxRCxNQUFNLElBQUksQ0FBQyxPQUFPLENBQ2hCLHFCQUFxQixFQUNyQixZQUFZLEVBQ1osZ0JBQWdCLEVBQ2hCLFVBQVUsRUFDVixRQUFRLEVBQ1IsRUFBQyxvQkFBb0IsRUFBRSxJQUFJLEVBQUMsQ0FDN0IsQ0FBQztRQUNGLE1BQU0sSUFBSSxDQUFDLGlDQUFpQyxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBRUQsTUFBTSxDQUFVLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBNEI7UUFDekQsOENBQThDO1FBQzlDLG1FQUFtRTtRQUNuRSxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge3NlbXZlckluY30gZnJvbSAnLi4vLi4vLi4vdXRpbHMvc2VtdmVyLmpzJztcbmltcG9ydCB7QWN0aXZlUmVsZWFzZVRyYWluc30gZnJvbSAnLi4vLi4vdmVyc2lvbmluZy9hY3RpdmUtcmVsZWFzZS10cmFpbnMuanMnO1xuaW1wb3J0IHtSZWxlYXNlQWN0aW9ufSBmcm9tICcuLi9hY3Rpb25zLmpzJztcblxuLyoqXG4gKiBSZWxlYXNlIGFjdGlvbiB0aGF0IGN1dHMgYSBuZXcgcGF0Y2ggcmVsZWFzZSBmb3IgdGhlIGN1cnJlbnQgbGF0ZXN0IHJlbGVhc2UtdHJhaW4gdmVyc2lvblxuICogYnJhbmNoIChpLmUuIHRoZSBwYXRjaCBicmFuY2gpLiBUaGUgcGF0Y2ggc2VnbWVudCBpcyBpbmNyZW1lbnRlZC4gVGhlIGNoYW5nZWxvZyBpcyBnZW5lcmF0ZWRcbiAqIGZvciB0aGUgbmV3IHBhdGNoIHZlcnNpb24sIGJ1dCBhbHNvIG5lZWRzIHRvIGJlIGNoZXJyeS1waWNrZWQgaW50byB0aGUgbmV4dCBkZXZlbG9wbWVudCBicmFuY2guXG4gKi9cbmV4cG9ydCBjbGFzcyBDdXROZXdQYXRjaEFjdGlvbiBleHRlbmRzIFJlbGVhc2VBY3Rpb24ge1xuICBwcml2YXRlIF9wcmV2aW91c1ZlcnNpb24gPSB0aGlzLmFjdGl2ZS5sYXRlc3QudmVyc2lvbjtcbiAgcHJpdmF0ZSBfbmV3VmVyc2lvbiA9IHNlbXZlckluYyh0aGlzLl9wcmV2aW91c1ZlcnNpb24sICdwYXRjaCcpO1xuXG4gIG92ZXJyaWRlIGFzeW5jIGdldERlc2NyaXB0aW9uKCkge1xuICAgIGNvbnN0IHticmFuY2hOYW1lfSA9IHRoaXMuYWN0aXZlLmxhdGVzdDtcbiAgICBjb25zdCBuZXdWZXJzaW9uID0gdGhpcy5fbmV3VmVyc2lvbjtcbiAgICByZXR1cm4gYEN1dCBhIG5ldyBwYXRjaCByZWxlYXNlIGZvciB0aGUgXCIke2JyYW5jaE5hbWV9XCIgYnJhbmNoICh2JHtuZXdWZXJzaW9ufSkuYDtcbiAgfVxuXG4gIG92ZXJyaWRlIGFzeW5jIHBlcmZvcm0oKSB7XG4gICAgY29uc3Qge2JyYW5jaE5hbWV9ID0gdGhpcy5hY3RpdmUubGF0ZXN0O1xuICAgIGNvbnN0IG5ld1ZlcnNpb24gPSB0aGlzLl9uZXdWZXJzaW9uO1xuICAgIGNvbnN0IGNvbXBhcmVWZXJzaW9uRm9yUmVsZWFzZU5vdGVzID0gdGhpcy5fcHJldmlvdXNWZXJzaW9uO1xuXG4gICAgY29uc3Qge3B1bGxSZXF1ZXN0LCByZWxlYXNlTm90ZXMsIGJ1aWx0UGFja2FnZXNXaXRoSW5mbywgYmVmb3JlU3RhZ2luZ1NoYX0gPVxuICAgICAgYXdhaXQgdGhpcy5jaGVja291dEJyYW5jaEFuZFN0YWdlVmVyc2lvbihcbiAgICAgICAgbmV3VmVyc2lvbixcbiAgICAgICAgY29tcGFyZVZlcnNpb25Gb3JSZWxlYXNlTm90ZXMsXG4gICAgICAgIGJyYW5jaE5hbWUsXG4gICAgICApO1xuXG4gICAgYXdhaXQgdGhpcy5wcm9tcHRBbmRXYWl0Rm9yUHVsbFJlcXVlc3RNZXJnZWQocHVsbFJlcXVlc3QpO1xuICAgIGF3YWl0IHRoaXMucHVibGlzaChcbiAgICAgIGJ1aWx0UGFja2FnZXNXaXRoSW5mbyxcbiAgICAgIHJlbGVhc2VOb3RlcyxcbiAgICAgIGJlZm9yZVN0YWdpbmdTaGEsXG4gICAgICBicmFuY2hOYW1lLFxuICAgICAgJ2xhdGVzdCcsXG4gICAgICB7c2hvd0FzTGF0ZXN0T25HaXRIdWI6IHRydWV9LFxuICAgICk7XG4gICAgYXdhaXQgdGhpcy5jaGVycnlQaWNrQ2hhbmdlbG9nSW50b05leHRCcmFuY2gocmVsZWFzZU5vdGVzLCBicmFuY2hOYW1lKTtcbiAgfVxuXG4gIHN0YXRpYyBvdmVycmlkZSBhc3luYyBpc0FjdGl2ZShfYWN0aXZlOiBBY3RpdmVSZWxlYXNlVHJhaW5zKSB7XG4gICAgLy8gUGF0Y2ggdmVyc2lvbnMgY2FuIGJlIGN1dCBhdCBhbnkgdGltZS4gU2VlOlxuICAgIC8vIGh0dHBzOi8vaGFja21kLmlvLzJMZThsZXEwUzZHX1I1VkVWVE5LOUEjUmVsZWFzZS1wcm9tcHQtb3B0aW9ucy5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuIl19