{"version":3,"file":"tag-recent-major-as-latest.js","sourceRoot":"","sources":["tag-recent-major-as-latest.ts"],"names":[],"mappings":"AAQA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAI5B,OAAO,EAAC,0BAA0B,EAAC,MAAM,kCAAkC,CAAC;AAC5E,OAAO,EAAC,aAAa,EAAC,MAAM,eAAe,CAAC;AAC5C,OAAO,EAAC,gBAAgB,EAAC,MAAM,yBAAyB,CAAC;AACzD,OAAO,EAAC,uBAAuB,EAAC,MAAM,kCAAkC,CAAC;AAYzE,MAAM,OAAO,sBAAuB,SAAQ,aAAa;IAC9C,KAAK,CAAC,cAAc;QAC3B,OAAO,mCAAmC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,sBAAsB,CAAC;IAC7F,CAAC;IAEQ,KAAK,CAAC,OAAO;QACpB,MAAM,IAAI,CAAC,gCAAgC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACxE,MAAM,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QACjE,MAAM,IAAI,CAAC,mCAAmC,EAAE,CAAC;QACjD,MAAM,gBAAgB,CAAC,gBAAgB,CACrC,IAAI,CAAC,UAAU,EACf,QAAQ,EACR,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAC1B,IAAI,CAAC,cAAc,CACpB,CAAC;IACJ,CAAC;IAMD,KAAK,CAAC,gCAAgC,CAAC,OAAsB;QAC3D,MAAM,cAAc,GAAG,uBAAuB,CAAC,OAAO,CAAC,CAAC;QACxD,MAAM,EAAC,IAAI,EAAE,WAAW,EAAC,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC;YACtE,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY;YACxB,GAAG,EAAE,cAAc;SACpB,CAAC,CAAC;QAEH,MAAM,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC;YACxC,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY;YACxB,UAAU,EAAE,WAAW,CAAC,EAAE;YAC1B,UAAU,EAAE,KAAK;SAClB,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAU,KAAK,CAAC,QAAQ,CAAC,EAAC,MAAM,EAAsB,EAAE,MAAqB;QAIjF,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,KAAK,CAAC,EAAE,CAAC;YAC7D,OAAO,KAAK,CAAC;QACf,CAAC;QAED,MAAM,WAAW,GAAG,MAAM,0BAA0B,CAAC,MAAM,CAAC,CAAC;QAC7D,MAAM,gBAAgB,GAAG,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QAI1E,OAAO,gBAAgB,KAAK,IAAI,IAAI,gBAAgB,CAAC,KAAK,KAAK,MAAM,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC;IAC1F,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport semver from 'semver';\n\nimport {ReleaseConfig} from '../../config/index.js';\nimport {ActiveReleaseTrains} from '../../versioning/active-release-trains.js';\nimport {fetchProjectNpmPackageInfo} from '../../versioning/npm-registry.js';\nimport {ReleaseAction} from '../actions.js';\nimport {ExternalCommands} from '../external-commands.js';\nimport {getReleaseTagForVersion} from '../../versioning/version-tags.js';\n\n/**\n * Release action that tags the recently published major as latest within the NPM\n * registry. Major versions are published to the `next` NPM dist tag initially and\n * can be re-tagged to the `latest` NPM dist tag. This allows caretakers to make major\n * releases available at the same time. e.g. Framework, Tooling and Components\n * are able to publish v12 to `@latest` at the same time. This wouldn't be possible if\n * we directly publish to `@latest` because Tooling and Components needs to wait\n * for the major framework release to be available on NPM.\n * @see {CutStableAction#perform} for more details.\n */\nexport class TagRecentMajorAsLatest extends ReleaseAction {\n  override async getDescription() {\n    return `Retag recently published major v${this.active.latest.version} as \"latest\" in NPM.`;\n  }\n\n  override async perform() {\n    await this.updateGithubReleaseEntryToStable(this.active.latest.version);\n    await this.checkoutUpstreamBranch(this.active.latest.branchName);\n    await this.installDependenciesForCurrentBranch();\n    await ExternalCommands.invokeSetNpmDist(\n      this.projectDir,\n      'latest',\n      this.active.latest.version,\n      this.pnpmVersioning,\n    );\n  }\n\n  /**\n   * Updates the Github release entry for the specified version to show\n   * it as stable release, compared to it being shown as a pre-release.\n   */\n  async updateGithubReleaseEntryToStable(version: semver.SemVer) {\n    const releaseTagName = getReleaseTagForVersion(version);\n    const {data: releaseInfo} = await this.git.github.repos.getReleaseByTag({\n      ...this.git.remoteParams,\n      tag: releaseTagName,\n    });\n\n    await this.git.github.repos.updateRelease({\n      ...this.git.remoteParams,\n      release_id: releaseInfo.id,\n      prerelease: false,\n    });\n  }\n\n  static override async isActive({latest}: ActiveReleaseTrains, config: ReleaseConfig) {\n    // If the latest release-train does currently not have a major version as version. e.g.\n    // the latest branch is `10.0.x` with the version being `10.0.2`. In such cases, a major\n    // has not been released recently, and this action should never become active.\n    if (latest.version.minor !== 0 || latest.version.patch !== 0) {\n      return false;\n    }\n\n    const packageInfo = await fetchProjectNpmPackageInfo(config);\n    const npmLatestVersion = semver.parse(packageInfo['dist-tags']['latest']);\n    // This action only becomes active if a major just has been released recently, but is\n    // not set to the `latest` NPM dist tag in the NPM registry. Note that we only allow\n    // re-tagging if the current `@latest` in NPM is the previous major version.\n    return npmLatestVersion !== null && npmLatestVersion.major === latest.version.major - 1;\n  }\n}\n"]}