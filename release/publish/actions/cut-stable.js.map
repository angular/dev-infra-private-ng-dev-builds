{"version":3,"file":"cut-stable.js","sourceRoot":"","sources":["cut-stable.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport semver from 'semver';\n\nimport {ActiveReleaseTrains} from '../../versioning/active-release-trains.js';\nimport {getLtsNpmDistTagOfMajor} from '../../versioning/long-term-support.js';\nimport {NpmDistTag} from '../../versioning/npm-registry.js';\nimport {ReleaseTrain} from '../../versioning/release-trains.js';\nimport {exceptionalMinorPackageIndicator} from '../../versioning/version-branches.js';\nimport {FatalReleaseActionError} from '../actions-error.js';\nimport {ReleaseAction, StagingOptions} from '../actions.js';\nimport {ExternalCommands} from '../external-commands.js';\n\n/**\n * Release action that cuts a stable version for the current release-train\n * in the \"release-candidate\" phase.\n *\n * There are only two possible release-trains that can ever be in the RC phase.\n * This is either an exceptional-minor or the dedicated FF/RC release-train.\n */\nexport class CutStableAction extends ReleaseAction {\n  private _train = (this.active.exceptionalMinor ?? this.active.releaseCandidate)!;\n  private _branch = this._train.branchName;\n  private _newVersion = this._computeNewVersion(this._train);\n  private _isNewMajor = this._train.isMajor;\n\n  override async getDescription() {\n    if (this._isNewMajor) {\n      return `Cut a stable release for the \"${this._branch}\" branch — published as \\`@next\\` (v${this._newVersion}).`;\n    } else {\n      return `Cut a stable release for the \"${this._branch}\" branch — published as \\`@latest\\` (v${this._newVersion}).`;\n    }\n  }\n\n  override async perform() {\n    // This should never happen, but we add a sanity check just to be sure.\n    if (this._isNewMajor && this._train === this.active.exceptionalMinor) {\n      throw new FatalReleaseActionError('Unexpected major release of an `exceptional-minor`.');\n    }\n\n    const branchName = this._branch;\n    const newVersion = this._newVersion;\n\n    // When cutting a new stable minor/major or an exceptional minor, we want to build the\n    // notes capturing all changes that have landed in the individual `-next`/RC pre-releases.\n    const compareVersionForReleaseNotes = this.active.latest.version;\n\n    // We always remove a potential exceptional-minor indicator. If we would\n    // publish a stable version of an exceptional minor here- it would leave\n    // the exceptional minor train and the indicator should be removed.\n    const stagingOpts: StagingOptions = {\n      updatePkgJsonFn: (pkgJson) => {\n        pkgJson[exceptionalMinorPackageIndicator] = undefined;\n      },\n    };\n\n    const {pullRequest, releaseNotes, builtPackagesWithInfo, beforeStagingSha} =\n      await this.checkoutBranchAndStageVersion(\n        newVersion,\n        compareVersionForReleaseNotes,\n        branchName,\n        stagingOpts,\n      );\n\n    await this.promptAndWaitForPullRequestMerged(pullRequest);\n\n    await this.publish(\n      builtPackagesWithInfo,\n      releaseNotes,\n      beforeStagingSha,\n      branchName,\n      this._getNpmDistTag(),\n      {showAsLatestOnGitHub: true},\n    );\n\n    // If we turned an exceptional minor into the new patch, the temporary\n    // NPM dist tag for the exceptional minor can be deleted. For more details\n    // see the `CutExceptionalMinorPrereleaseAction` class.\n    if (this._train === this.active.exceptionalMinor) {\n      await ExternalCommands.invokeDeleteNpmDistTag(\n        this.projectDir,\n        'do-not-use-exceptional-minor',\n        this.pnpmVersioning,\n      );\n    }\n\n    // If a new major version is published and becomes the \"latest\" release-train, we need\n    // to set the LTS npm dist tag for the previous latest release-train (the current patch).\n    if (this._isNewMajor) {\n      const previousPatch = this.active.latest;\n      const ltsTagForPatch = getLtsNpmDistTagOfMajor(previousPatch.version.major);\n\n      // Instead of directly setting the NPM dist tags, we invoke the ng-dev command for\n      // setting the NPM dist tag to the specified version. We do this because release NPM\n      // packages could be different in the previous patch branch, and we want to set the\n      // LTS tag for all packages part of the last major. It would not be possible to set the\n      // NPM dist tag for new packages part of the released major, nor would it be acceptable\n      // to skip the LTS tag for packages which are no longer part of the new major.\n      await this.checkoutUpstreamBranch(previousPatch.branchName);\n      await this.installDependenciesForCurrentBranch();\n\n      await ExternalCommands.invokeSetNpmDist(\n        this.projectDir,\n        ltsTagForPatch,\n        previousPatch.version,\n        this.pnpmVersioning,\n        {\n          // We do not intend to tag experimental NPM packages as LTS.\n          skipExperimentalPackages: true,\n        },\n      );\n    }\n\n    await this.cherryPickChangelogIntoNextBranch(releaseNotes, branchName);\n  }\n\n  private _getNpmDistTag(): NpmDistTag {\n    // If a new major version is published, we publish to the `next` NPM dist tag temporarily.\n    // We do this because for major versions, we want all main Angular projects to have their\n    // new major become available at the same time. Publishing immediately to the `latest` NPM\n    // dist tag could cause inconsistent versions when users install packages with `@latest`.\n    // For example: Consider Angular Framework releases v12. CLI and Components would need to\n    // wait for that release to complete. Once done, they can update their dependencies to point\n    // to v12. Afterwards they could start the release process. In the meanwhile though, the FW\n    // dependencies were already available as `@latest`, so users could end up installing v12 while\n    // still having the older (but currently still latest) CLI version that is incompatible.\n    // The major release can be re-tagged to `latest` through a separate release action.\n    return this._isNewMajor ? 'next' : 'latest';\n  }\n\n  /** Gets the new stable version of the given release-train. */\n  private _computeNewVersion({version}: ReleaseTrain): semver.SemVer {\n    return semver.parse(`${version.major}.${version.minor}.${version.patch}`)!;\n  }\n\n  static override async isActive(active: ActiveReleaseTrains) {\n    // -- Notes -- :\n    //   * A stable version can be cut for an active release-train currently in the\n    //     release-candidate phase.\n    //   * If there is an exceptional minor, **only** the exceptional minor considered\n    //     because it would be problematic if an in-progress RC would suddenly take over\n    //     while there is still an in-progress exceptional minor.\n    //   * It is impossible to directly release from feature-freeze phase into stable.\n    if (active.exceptionalMinor !== null) {\n      return active.exceptionalMinor.version.prerelease[0] === 'rc';\n    }\n    if (active.releaseCandidate !== null) {\n      return active.releaseCandidate.version.prerelease[0] === 'rc';\n    }\n    return false;\n  }\n}\n"]}