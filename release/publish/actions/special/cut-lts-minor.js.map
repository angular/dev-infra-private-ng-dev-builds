{"version":3,"file":"cut-lts-minor.js","sourceRoot":"","sources":["cut-lts-minor.ts"],"names":[],"mappings":"AAQA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAC,GAAG,EAAC,MAAM,8BAA8B,CAAC;AAEjD,OAAO,EAAC,uBAAuB,EAAC,MAAM,0CAA0C,CAAC;AACjF,OAAO,EACL,4BAA4B,EAC5B,eAAe,GAChB,MAAM,yCAAyC,CAAC;AACjD,OAAO,EAAC,uBAAuB,EAAC,MAAM,wBAAwB,CAAC;AAC/D,OAAO,EAAC,aAAa,EAAC,MAAM,kBAAkB,CAAC;AAC/C,OAAO,EAAC,MAAM,EAAC,MAAM,6BAA6B,CAAC;AAQnD,MAAM,OAAO,oCAAqC,SAAQ,aAAa;IAC5D,KAAK,CAAC,cAAc;QAC3B,OAAO,8CAA8C,CAAC;IACxD,CAAC;IAEQ,KAAK,CAAC,OAAO;QACpB,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,uCAAuC,CAAC,CAAC;QAC3F,MAAM,6BAA6B,GAAG,MAAM,CAAC,KAAK,CAChD,MAAM,MAAM,CAAC,KAAK,CAAC,EAAC,OAAO,EAAE,6BAA6B,EAAC,CAAC,CAC5D,CAAC;QAEH,MAAM,UAAU,GAAG,MAAM,CAAC,KAAK,CAC7B,GAAG,SAAS,CAAC,aAAa,CAAC,KAAK,IAAI,SAAS,CAAC,aAAa,CAAC,KAAK,IAAI,CACrE,CAAC;QAEH,MAAM,EAAC,WAAW,EAAE,YAAY,EAAE,qBAAqB,EAAE,gBAAgB,EAAC,GACxE,MAAM,IAAI,CAAC,6BAA6B,CACtC,UAAU,EACV,6BAA6B,EAC7B,SAAS,CAAC,MAAM,CACjB,CAAC;QAEJ,MAAM,IAAI,CAAC,iCAAiC,CAAC,WAAW,CAAC,CAAC;QAC1D,MAAM,IAAI,CAAC,OAAO,CAChB,qBAAqB,EACrB,YAAY,EACZ,gBAAgB,EAChB,SAAS,CAAC,MAAM,EAChB,uBAAuB,CAAC,UAAU,CAAC,KAAK,CAAC,EACzC,EAAC,oBAAoB,EAAE,KAAK,EAAC,CAC9B,CAAC;QACF,MAAM,IAAI,CAAC,iCAAiC,CAAC,YAAY,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;IAC/E,CAAC;IAEO,KAAK,CAAC,oBAAoB,CAAC,OAAe;QAIhD,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,EAAC,OAAO,EAAC,CAAC,CAAC;QAC7C,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE,CAAC;YAC7B,GAAG,CAAC,KAAK,CAAC,mCAAmC,CAAC,CAAC;YAC/C,MAAM,IAAI,uBAAuB,EAAE,CAAC;QACtC,CAAC;QAED,MAAM,aAAa,GAAG,4BAA4B,CAAC,MAAM,CAAC,CAAC;QAC3D,IAAI,aAAa,KAAK,IAAI,EAAE,CAAC;YAC3B,GAAG,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC;YAC7C,MAAM,IAAI,uBAAuB,EAAE,CAAC;QACtC,CAAC;QACD,OAAO,EAAC,MAAM,EAAE,aAAa,EAAC,CAAC;IACjC,CAAC;IAED,MAAM,CAAU,KAAK,CAAC,QAAQ,CAAC,OAA4B;QAEzD,OAAO,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,KAAK,GAAG,CAAC;IAC/D,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport semver from 'semver';\nimport {Log} from '../../../../utils/logging.js';\nimport {ActiveReleaseTrains} from '../../../versioning/active-release-trains.js';\nimport {getLtsNpmDistTagOfMajor} from '../../../versioning/long-term-support.js';\nimport {\n  convertVersionBranchToSemVer,\n  isVersionBranch,\n} from '../../../versioning/version-branches.js';\nimport {FatalReleaseActionError} from '../../actions-error.js';\nimport {ReleaseAction} from '../../actions.js';\nimport {Prompt} from '../../../../utils/prompt.js';\n\n/**\n * SPECIAL: Action should only be used by dev-infra members.\n *\n * Release action that cuts a new minor for an LTS major. The new LTS\n * minor branch is required to be created beforehand.\n */\nexport class SpecialCutLongTermSupportMinorAction extends ReleaseAction {\n  override async getDescription() {\n    return `SPECIAL: Cut a new release for an LTS minor.`;\n  }\n\n  override async perform() {\n    const ltsBranch = await this._askForVersionBranch('Please specify the target LTS branch:');\n    const compareVersionForReleaseNotes = semver.parse(\n      await Prompt.input({message: 'Compare version for release'}),\n    )!;\n\n    const newVersion = semver.parse(\n      `${ltsBranch.branchVersion.major}.${ltsBranch.branchVersion.minor}.0`,\n    )!;\n\n    const {pullRequest, releaseNotes, builtPackagesWithInfo, beforeStagingSha} =\n      await this.checkoutBranchAndStageVersion(\n        newVersion,\n        compareVersionForReleaseNotes,\n        ltsBranch.branch,\n      );\n\n    await this.promptAndWaitForPullRequestMerged(pullRequest);\n    await this.publish(\n      builtPackagesWithInfo,\n      releaseNotes,\n      beforeStagingSha,\n      ltsBranch.branch,\n      getLtsNpmDistTagOfMajor(newVersion.major),\n      {showAsLatestOnGitHub: false},\n    );\n    await this.cherryPickChangelogIntoNextBranch(releaseNotes, ltsBranch.branch);\n  }\n\n  private async _askForVersionBranch(message: string): Promise<{\n    branch: string;\n    branchVersion: semver.SemVer;\n  }> {\n    const branch = await Prompt.input({message});\n    if (!isVersionBranch(branch)) {\n      Log.error('Invalid release branch specified.');\n      throw new FatalReleaseActionError();\n    }\n\n    const branchVersion = convertVersionBranchToSemVer(branch);\n    if (branchVersion === null) {\n      Log.error('Could not parse version branch.');\n      throw new FatalReleaseActionError();\n    }\n    return {branch, branchVersion};\n  }\n\n  static override async isActive(_active: ActiveReleaseTrains) {\n    // Only enabled if explicitly enabled for dev-infra team.\n    return process.env['NG_DEV_SPECIAL_RELEASE_ACTIONS'] === '1';\n  }\n}\n"]}