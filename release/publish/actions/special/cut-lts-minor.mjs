/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import semver from 'semver';
import { Log } from '../../../../utils/logging.js';
import { getLtsNpmDistTagOfMajor } from '../../../versioning/long-term-support.js';
import { convertVersionBranchToSemVer, isVersionBranch, } from '../../../versioning/version-branches.js';
import { FatalReleaseActionError } from '../../actions-error.js';
import { ReleaseAction } from '../../actions.js';
import { Prompt } from '../../../../utils/prompt.js';
/**
 * SPECIAL: Action should only be used by dev-infra members.
 *
 * Release action that cuts a new minor for an LTS major. The new LTS
 * minor branch is required to be created beforehand.
 */
export class SpecialCutLongTermSupportMinorAction extends ReleaseAction {
    async getDescription() {
        return `SPECIAL: Cut a new release for an LTS minor.`;
    }
    async perform() {
        const ltsBranch = await this._askForVersionBranch('Please specify the target LTS branch:');
        const compareVersionForReleaseNotes = semver.parse(await Prompt.input({ message: 'Compare version for release' }));
        const newVersion = semver.parse(`${ltsBranch.branchVersion.major}.${ltsBranch.branchVersion.minor}.0`);
        const { pullRequest, releaseNotes, builtPackagesWithInfo, beforeStagingSha } = await this.checkoutBranchAndStageVersion(newVersion, compareVersionForReleaseNotes, ltsBranch.branch);
        await this.promptAndWaitForPullRequestMerged(pullRequest);
        await this.publish(builtPackagesWithInfo, releaseNotes, beforeStagingSha, ltsBranch.branch, getLtsNpmDistTagOfMajor(newVersion.major), { showAsLatestOnGitHub: false });
        await this.cherryPickChangelogIntoNextBranch(releaseNotes, ltsBranch.branch);
    }
    async _askForVersionBranch(message) {
        const branch = await Prompt.input({ message });
        if (!isVersionBranch(branch)) {
            Log.error('Invalid release branch specified.');
            throw new FatalReleaseActionError();
        }
        const branchVersion = convertVersionBranchToSemVer(branch);
        if (branchVersion === null) {
            Log.error('Could not parse version branch.');
            throw new FatalReleaseActionError();
        }
        return { branch, branchVersion };
    }
    static async isActive(_active) {
        // Only enabled if explicitly enabled for dev-infra team.
        return process.env['NG_DEV_SPECIAL_RELEASE_ACTIONS'] === '1';
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3V0LWx0cy1taW5vci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25nLWRldi9yZWxlYXNlL3B1Ymxpc2gvYWN0aW9ucy9zcGVjaWFsL2N1dC1sdHMtbWlub3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxNQUFNLE1BQU0sUUFBUSxDQUFDO0FBQzVCLE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUVqRCxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSwwQ0FBMEMsQ0FBQztBQUNqRixPQUFPLEVBQ0wsNEJBQTRCLEVBQzVCLGVBQWUsR0FDaEIsTUFBTSx5Q0FBeUMsQ0FBQztBQUNqRCxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUMvRCxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFDL0MsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBRW5EOzs7OztHQUtHO0FBQ0gsTUFBTSxPQUFPLG9DQUFxQyxTQUFRLGFBQWE7SUFDNUQsS0FBSyxDQUFDLGNBQWM7UUFDM0IsT0FBTyw4Q0FBOEMsQ0FBQztJQUN4RCxDQUFDO0lBRVEsS0FBSyxDQUFDLE9BQU87UUFDcEIsTUFBTSxTQUFTLEdBQUcsTUFBTSxJQUFJLENBQUMsb0JBQW9CLENBQUMsdUNBQXVDLENBQUMsQ0FBQztRQUMzRixNQUFNLDZCQUE2QixHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQ2hELE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFDLE9BQU8sRUFBRSw2QkFBNkIsRUFBQyxDQUFDLENBQzVELENBQUM7UUFFSCxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUM3QixHQUFHLFNBQVMsQ0FBQyxhQUFhLENBQUMsS0FBSyxJQUFJLFNBQVMsQ0FBQyxhQUFhLENBQUMsS0FBSyxJQUFJLENBQ3JFLENBQUM7UUFFSCxNQUFNLEVBQUMsV0FBVyxFQUFFLFlBQVksRUFBRSxxQkFBcUIsRUFBRSxnQkFBZ0IsRUFBQyxHQUN4RSxNQUFNLElBQUksQ0FBQyw2QkFBNkIsQ0FDdEMsVUFBVSxFQUNWLDZCQUE2QixFQUM3QixTQUFTLENBQUMsTUFBTSxDQUNqQixDQUFDO1FBRUosTUFBTSxJQUFJLENBQUMsaUNBQWlDLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDMUQsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUNoQixxQkFBcUIsRUFDckIsWUFBWSxFQUNaLGdCQUFnQixFQUNoQixTQUFTLENBQUMsTUFBTSxFQUNoQix1QkFBdUIsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQ3pDLEVBQUMsb0JBQW9CLEVBQUUsS0FBSyxFQUFDLENBQzlCLENBQUM7UUFDRixNQUFNLElBQUksQ0FBQyxpQ0FBaUMsQ0FBQyxZQUFZLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFFTyxLQUFLLENBQUMsb0JBQW9CLENBQUMsT0FBZTtRQUloRCxNQUFNLE1BQU0sR0FBRyxNQUFNLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBQyxPQUFPLEVBQUMsQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztZQUM3QixHQUFHLENBQUMsS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7WUFDL0MsTUFBTSxJQUFJLHVCQUF1QixFQUFFLENBQUM7UUFDdEMsQ0FBQztRQUVELE1BQU0sYUFBYSxHQUFHLDRCQUE0QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzNELElBQUksYUFBYSxLQUFLLElBQUksRUFBRSxDQUFDO1lBQzNCLEdBQUcsQ0FBQyxLQUFLLENBQUMsaUNBQWlDLENBQUMsQ0FBQztZQUM3QyxNQUFNLElBQUksdUJBQXVCLEVBQUUsQ0FBQztRQUN0QyxDQUFDO1FBQ0QsT0FBTyxFQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsTUFBTSxDQUFVLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBNEI7UUFDekQseURBQXlEO1FBQ3pELE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQ0FBZ0MsQ0FBQyxLQUFLLEdBQUcsQ0FBQztJQUMvRCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQ1xuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHNlbXZlciBmcm9tICdzZW12ZXInO1xuaW1wb3J0IHtMb2d9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL2xvZ2dpbmcuanMnO1xuaW1wb3J0IHtBY3RpdmVSZWxlYXNlVHJhaW5zfSBmcm9tICcuLi8uLi8uLi92ZXJzaW9uaW5nL2FjdGl2ZS1yZWxlYXNlLXRyYWlucy5qcyc7XG5pbXBvcnQge2dldEx0c05wbURpc3RUYWdPZk1ham9yfSBmcm9tICcuLi8uLi8uLi92ZXJzaW9uaW5nL2xvbmctdGVybS1zdXBwb3J0LmpzJztcbmltcG9ydCB7XG4gIGNvbnZlcnRWZXJzaW9uQnJhbmNoVG9TZW1WZXIsXG4gIGlzVmVyc2lvbkJyYW5jaCxcbn0gZnJvbSAnLi4vLi4vLi4vdmVyc2lvbmluZy92ZXJzaW9uLWJyYW5jaGVzLmpzJztcbmltcG9ydCB7RmF0YWxSZWxlYXNlQWN0aW9uRXJyb3J9IGZyb20gJy4uLy4uL2FjdGlvbnMtZXJyb3IuanMnO1xuaW1wb3J0IHtSZWxlYXNlQWN0aW9ufSBmcm9tICcuLi8uLi9hY3Rpb25zLmpzJztcbmltcG9ydCB7UHJvbXB0fSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy9wcm9tcHQuanMnO1xuXG4vKipcbiAqIFNQRUNJQUw6IEFjdGlvbiBzaG91bGQgb25seSBiZSB1c2VkIGJ5IGRldi1pbmZyYSBtZW1iZXJzLlxuICpcbiAqIFJlbGVhc2UgYWN0aW9uIHRoYXQgY3V0cyBhIG5ldyBtaW5vciBmb3IgYW4gTFRTIG1ham9yLiBUaGUgbmV3IExUU1xuICogbWlub3IgYnJhbmNoIGlzIHJlcXVpcmVkIHRvIGJlIGNyZWF0ZWQgYmVmb3JlaGFuZC5cbiAqL1xuZXhwb3J0IGNsYXNzIFNwZWNpYWxDdXRMb25nVGVybVN1cHBvcnRNaW5vckFjdGlvbiBleHRlbmRzIFJlbGVhc2VBY3Rpb24ge1xuICBvdmVycmlkZSBhc3luYyBnZXREZXNjcmlwdGlvbigpIHtcbiAgICByZXR1cm4gYFNQRUNJQUw6IEN1dCBhIG5ldyByZWxlYXNlIGZvciBhbiBMVFMgbWlub3IuYDtcbiAgfVxuXG4gIG92ZXJyaWRlIGFzeW5jIHBlcmZvcm0oKSB7XG4gICAgY29uc3QgbHRzQnJhbmNoID0gYXdhaXQgdGhpcy5fYXNrRm9yVmVyc2lvbkJyYW5jaCgnUGxlYXNlIHNwZWNpZnkgdGhlIHRhcmdldCBMVFMgYnJhbmNoOicpO1xuICAgIGNvbnN0IGNvbXBhcmVWZXJzaW9uRm9yUmVsZWFzZU5vdGVzID0gc2VtdmVyLnBhcnNlKFxuICAgICAgYXdhaXQgUHJvbXB0LmlucHV0KHttZXNzYWdlOiAnQ29tcGFyZSB2ZXJzaW9uIGZvciByZWxlYXNlJ30pLFxuICAgICkhO1xuXG4gICAgY29uc3QgbmV3VmVyc2lvbiA9IHNlbXZlci5wYXJzZShcbiAgICAgIGAke2x0c0JyYW5jaC5icmFuY2hWZXJzaW9uLm1ham9yfS4ke2x0c0JyYW5jaC5icmFuY2hWZXJzaW9uLm1pbm9yfS4wYCxcbiAgICApITtcblxuICAgIGNvbnN0IHtwdWxsUmVxdWVzdCwgcmVsZWFzZU5vdGVzLCBidWlsdFBhY2thZ2VzV2l0aEluZm8sIGJlZm9yZVN0YWdpbmdTaGF9ID1cbiAgICAgIGF3YWl0IHRoaXMuY2hlY2tvdXRCcmFuY2hBbmRTdGFnZVZlcnNpb24oXG4gICAgICAgIG5ld1ZlcnNpb24sXG4gICAgICAgIGNvbXBhcmVWZXJzaW9uRm9yUmVsZWFzZU5vdGVzLFxuICAgICAgICBsdHNCcmFuY2guYnJhbmNoLFxuICAgICAgKTtcblxuICAgIGF3YWl0IHRoaXMucHJvbXB0QW5kV2FpdEZvclB1bGxSZXF1ZXN0TWVyZ2VkKHB1bGxSZXF1ZXN0KTtcbiAgICBhd2FpdCB0aGlzLnB1Ymxpc2goXG4gICAgICBidWlsdFBhY2thZ2VzV2l0aEluZm8sXG4gICAgICByZWxlYXNlTm90ZXMsXG4gICAgICBiZWZvcmVTdGFnaW5nU2hhLFxuICAgICAgbHRzQnJhbmNoLmJyYW5jaCxcbiAgICAgIGdldEx0c05wbURpc3RUYWdPZk1ham9yKG5ld1ZlcnNpb24ubWFqb3IpLFxuICAgICAge3Nob3dBc0xhdGVzdE9uR2l0SHViOiBmYWxzZX0sXG4gICAgKTtcbiAgICBhd2FpdCB0aGlzLmNoZXJyeVBpY2tDaGFuZ2Vsb2dJbnRvTmV4dEJyYW5jaChyZWxlYXNlTm90ZXMsIGx0c0JyYW5jaC5icmFuY2gpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBfYXNrRm9yVmVyc2lvbkJyYW5jaChtZXNzYWdlOiBzdHJpbmcpOiBQcm9taXNlPHtcbiAgICBicmFuY2g6IHN0cmluZztcbiAgICBicmFuY2hWZXJzaW9uOiBzZW12ZXIuU2VtVmVyO1xuICB9PiB7XG4gICAgY29uc3QgYnJhbmNoID0gYXdhaXQgUHJvbXB0LmlucHV0KHttZXNzYWdlfSk7XG4gICAgaWYgKCFpc1ZlcnNpb25CcmFuY2goYnJhbmNoKSkge1xuICAgICAgTG9nLmVycm9yKCdJbnZhbGlkIHJlbGVhc2UgYnJhbmNoIHNwZWNpZmllZC4nKTtcbiAgICAgIHRocm93IG5ldyBGYXRhbFJlbGVhc2VBY3Rpb25FcnJvcigpO1xuICAgIH1cblxuICAgIGNvbnN0IGJyYW5jaFZlcnNpb24gPSBjb252ZXJ0VmVyc2lvbkJyYW5jaFRvU2VtVmVyKGJyYW5jaCk7XG4gICAgaWYgKGJyYW5jaFZlcnNpb24gPT09IG51bGwpIHtcbiAgICAgIExvZy5lcnJvcignQ291bGQgbm90IHBhcnNlIHZlcnNpb24gYnJhbmNoLicpO1xuICAgICAgdGhyb3cgbmV3IEZhdGFsUmVsZWFzZUFjdGlvbkVycm9yKCk7XG4gICAgfVxuICAgIHJldHVybiB7YnJhbmNoLCBicmFuY2hWZXJzaW9ufTtcbiAgfVxuXG4gIHN0YXRpYyBvdmVycmlkZSBhc3luYyBpc0FjdGl2ZShfYWN0aXZlOiBBY3RpdmVSZWxlYXNlVHJhaW5zKSB7XG4gICAgLy8gT25seSBlbmFibGVkIGlmIGV4cGxpY2l0bHkgZW5hYmxlZCBmb3IgZGV2LWluZnJhIHRlYW0uXG4gICAgcmV0dXJuIHByb2Nlc3MuZW52WydOR19ERVZfU1BFQ0lBTF9SRUxFQVNFX0FDVElPTlMnXSA9PT0gJzEnO1xuICB9XG59XG4iXX0=