import { existsSync } from 'node:fs';
import { green, Log } from '../../../utils/logging.js';
import { join } from 'node:path';
import { writeFile, readFile } from 'node:fs/promises';
/**
 * Updates the `renovate.json` configuration file to include a new base branch.
 *
 * @param projectDir - The project directory path.
 * @param newBranchName - The name of the new branch to add to the base branches list.
 * @returns A promise that resolves to an string containing the path to the modified `renovate.json` file,
 *          or null if config updating is disabled.
 */
export async function updateRenovateConfig(projectDir, newBranchName) {
    const renovateConfigPath = join(projectDir, 'renovate.json');
    if (!existsSync(renovateConfigPath)) {
        Log.warn(`  ✘   Skipped updating Renovate config as it was not found.`);
        return null;
    }
    const config = await readFile(renovateConfigPath, 'utf-8');
    const configJson = JSON.parse(config);
    const baseBranches = configJson.baseBranches;
    if (!Array.isArray(baseBranches) || baseBranches.length !== 2) {
        Log.warn(`  ✘   Skipped updating Renovate config: "baseBranches" must contain exactly 2 branches.`);
        return null;
    }
    configJson.baseBranches = ['main', newBranchName];
    await writeFile(renovateConfigPath, JSON.stringify(configJson, undefined, 2));
    Log.info(green(`  ✓   Updated Renovate config.`));
    return renovateConfigPath;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVub3ZhdGUtY29uZmlnLXVwZGF0ZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9uZy1kZXYvcmVsZWFzZS9wdWJsaXNoL2FjdGlvbnMvcmVub3ZhdGUtY29uZmlnLXVwZGF0ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUNuQyxPQUFPLEVBQUMsS0FBSyxFQUFFLEdBQUcsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ3JELE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDL0IsT0FBTyxFQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUVyRDs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxDQUFDLEtBQUssVUFBVSxvQkFBb0IsQ0FDeEMsVUFBa0IsRUFDbEIsYUFBcUI7SUFFckIsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQzdELElBQUksQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsRUFBRSxDQUFDO1FBQ3BDLEdBQUcsQ0FBQyxJQUFJLENBQUMsNkRBQTZELENBQUMsQ0FBQztRQUV4RSxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxNQUFNLE1BQU0sR0FBRyxNQUFNLFFBQVEsQ0FBQyxrQkFBa0IsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMzRCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBNEIsQ0FBQztJQUNqRSxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsWUFBWSxDQUFDO0lBQzdDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLFlBQVksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDOUQsR0FBRyxDQUFDLElBQUksQ0FDTix5RkFBeUYsQ0FDMUYsQ0FBQztRQUVGLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELFVBQVUsQ0FBQyxZQUFZLEdBQUcsQ0FBQyxNQUFNLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDbEQsTUFBTSxTQUFTLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUUsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQyxDQUFDO0lBRWxELE9BQU8sa0JBQWtCLENBQUM7QUFDNUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7ZXhpc3RzU3luY30gZnJvbSAnbm9kZTpmcyc7XG5pbXBvcnQge2dyZWVuLCBMb2d9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2xvZ2dpbmcuanMnO1xuaW1wb3J0IHtqb2lufSBmcm9tICdub2RlOnBhdGgnO1xuaW1wb3J0IHt3cml0ZUZpbGUsIHJlYWRGaWxlfSBmcm9tICdub2RlOmZzL3Byb21pc2VzJztcblxuLyoqXG4gKiBVcGRhdGVzIHRoZSBgcmVub3ZhdGUuanNvbmAgY29uZmlndXJhdGlvbiBmaWxlIHRvIGluY2x1ZGUgYSBuZXcgYmFzZSBicmFuY2guXG4gKlxuICogQHBhcmFtIHByb2plY3REaXIgLSBUaGUgcHJvamVjdCBkaXJlY3RvcnkgcGF0aC5cbiAqIEBwYXJhbSBuZXdCcmFuY2hOYW1lIC0gVGhlIG5hbWUgb2YgdGhlIG5ldyBicmFuY2ggdG8gYWRkIHRvIHRoZSBiYXNlIGJyYW5jaGVzIGxpc3QuXG4gKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBzdHJpbmcgY29udGFpbmluZyB0aGUgcGF0aCB0byB0aGUgbW9kaWZpZWQgYHJlbm92YXRlLmpzb25gIGZpbGUsXG4gKiAgICAgICAgICBvciBudWxsIGlmIGNvbmZpZyB1cGRhdGluZyBpcyBkaXNhYmxlZC5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVJlbm92YXRlQ29uZmlnKFxuICBwcm9qZWN0RGlyOiBzdHJpbmcsXG4gIG5ld0JyYW5jaE5hbWU6IHN0cmluZyxcbik6IFByb21pc2U8c3RyaW5nIHwgbnVsbD4ge1xuICBjb25zdCByZW5vdmF0ZUNvbmZpZ1BhdGggPSBqb2luKHByb2plY3REaXIsICdyZW5vdmF0ZS5qc29uJyk7XG4gIGlmICghZXhpc3RzU3luYyhyZW5vdmF0ZUNvbmZpZ1BhdGgpKSB7XG4gICAgTG9nLndhcm4oYCAg4pyYICAgU2tpcHBlZCB1cGRhdGluZyBSZW5vdmF0ZSBjb25maWcgYXMgaXQgd2FzIG5vdCBmb3VuZC5gKTtcblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgY29uZmlnID0gYXdhaXQgcmVhZEZpbGUocmVub3ZhdGVDb25maWdQYXRoLCAndXRmLTgnKTtcbiAgY29uc3QgY29uZmlnSnNvbiA9IEpTT04ucGFyc2UoY29uZmlnKSBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbiAgY29uc3QgYmFzZUJyYW5jaGVzID0gY29uZmlnSnNvbi5iYXNlQnJhbmNoZXM7XG4gIGlmICghQXJyYXkuaXNBcnJheShiYXNlQnJhbmNoZXMpIHx8IGJhc2VCcmFuY2hlcy5sZW5ndGggIT09IDIpIHtcbiAgICBMb2cud2FybihcbiAgICAgIGAgIOKcmCAgIFNraXBwZWQgdXBkYXRpbmcgUmVub3ZhdGUgY29uZmlnOiBcImJhc2VCcmFuY2hlc1wiIG11c3QgY29udGFpbiBleGFjdGx5IDIgYnJhbmNoZXMuYCxcbiAgICApO1xuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25maWdKc29uLmJhc2VCcmFuY2hlcyA9IFsnbWFpbicsIG5ld0JyYW5jaE5hbWVdO1xuICBhd2FpdCB3cml0ZUZpbGUocmVub3ZhdGVDb25maWdQYXRoLCBKU09OLnN0cmluZ2lmeShjb25maWdKc29uLCB1bmRlZmluZWQsIDIpKTtcbiAgTG9nLmluZm8oZ3JlZW4oYCAg4pyTICAgVXBkYXRlZCBSZW5vdmF0ZSBjb25maWcuYCkpO1xuXG4gIHJldHVybiByZW5vdmF0ZUNvbmZpZ1BhdGg7XG59XG4iXX0=