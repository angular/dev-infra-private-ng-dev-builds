/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import semver from 'semver';
import { green, Log } from '../../../utils/logging.js';
import { workspaceRelativePackageJsonPath } from '../../../utils/constants.js';
import { ReleaseAction } from '../actions.js';
import { getCommitMessageForNextBranchMajorSwitch } from '../commit-message.js';
import { isFirstNextPrerelease } from '../../versioning/prerelease-version.js';
import { isVersionPublishedToNpm } from '../../versioning/npm-registry.js';
/**
 * Release action that configures the active next release-train to be for a major
 * version. This means that major changes can land in the next branch.
 */
export class ConfigureNextAsMajorAction extends ReleaseAction {
    constructor() {
        super(...arguments);
        this._newVersion = semver.parse(`${this.active.next.version.major + 1}.0.0-next.0`);
    }
    async getDescription() {
        const { branchName } = this.active.next;
        const newVersion = this._newVersion;
        return `Configure the "${branchName}" branch to be released as major (v${newVersion}).`;
    }
    async perform() {
        const { branchName } = this.active.next;
        const newVersion = this._newVersion;
        const beforeStagingSha = await this.getLatestCommitOfBranch(branchName);
        await this.assertPassingGithubStatus(beforeStagingSha, branchName);
        await this.checkoutUpstreamBranch(branchName);
        await this.updateProjectVersion(newVersion);
        await this.createCommit(getCommitMessageForNextBranchMajorSwitch(newVersion), [
            workspaceRelativePackageJsonPath,
            ...this.getAspectLockFiles(),
        ]);
        const pullRequest = await this.pushChangesToForkAndCreatePullRequest(branchName, `switch-next-to-major-${newVersion}`, `Configure next branch to receive major changes for v${newVersion}`);
        Log.info(green('  âœ“   Next branch update pull request has been created.'));
        await this.promptAndWaitForPullRequestMerged(pullRequest);
    }
    static async isActive(active, config) {
        // The `next` branch can be switched to a major version, unless it already
        // is targeting a new major, or if pre-releases have already started.
        return (!active.next.isMajor &&
            isFirstNextPrerelease(active.next.version) &&
            !(await isVersionPublishedToNpm(active.next.version, config)));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJlLW5leHQtYXMtbWFqb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9uZy1kZXYvcmVsZWFzZS9wdWJsaXNoL2FjdGlvbnMvY29uZmlndXJlLW5leHQtYXMtbWFqb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxNQUFNLE1BQU0sUUFBUSxDQUFDO0FBRTVCLE9BQU8sRUFBQyxLQUFLLEVBQUUsR0FBRyxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDckQsT0FBTyxFQUFDLGdDQUFnQyxFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFFN0UsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM1QyxPQUFPLEVBQUMsd0NBQXdDLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUM5RSxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSx3Q0FBd0MsQ0FBQztBQUM3RSxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSxrQ0FBa0MsQ0FBQztBQUd6RTs7O0dBR0c7QUFDSCxNQUFNLE9BQU8sMEJBQTJCLFNBQVEsYUFBYTtJQUE3RDs7UUFDVSxnQkFBVyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLENBQUMsYUFBYSxDQUFFLENBQUM7SUF5QzFGLENBQUM7SUF2Q1UsS0FBSyxDQUFDLGNBQWM7UUFDM0IsTUFBTSxFQUFDLFVBQVUsRUFBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ3RDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDcEMsT0FBTyxrQkFBa0IsVUFBVSxzQ0FBc0MsVUFBVSxJQUFJLENBQUM7SUFDMUYsQ0FBQztJQUVRLEtBQUssQ0FBQyxPQUFPO1FBQ3BCLE1BQU0sRUFBQyxVQUFVLEVBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUN0QyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQ3BDLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxJQUFJLENBQUMsdUJBQXVCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFeEUsTUFBTSxJQUFJLENBQUMseUJBQXlCLENBQUMsZ0JBQWdCLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDbkUsTUFBTSxJQUFJLENBQUMsc0JBQXNCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDOUMsTUFBTSxJQUFJLENBQUMsb0JBQW9CLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFNUMsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLHdDQUF3QyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQzVFLGdDQUFnQztZQUNoQyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtTQUM3QixDQUFDLENBQUM7UUFDSCxNQUFNLFdBQVcsR0FBRyxNQUFNLElBQUksQ0FBQyxxQ0FBcUMsQ0FDbEUsVUFBVSxFQUNWLHdCQUF3QixVQUFVLEVBQUUsRUFDcEMsdURBQXVELFVBQVUsRUFBRSxDQUNwRSxDQUFDO1FBRUYsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMseURBQXlELENBQUMsQ0FBQyxDQUFDO1FBRTNFLE1BQU0sSUFBSSxDQUFDLGlDQUFpQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRCxNQUFNLENBQVUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUEyQixFQUFFLE1BQXFCO1FBQy9FLDBFQUEwRTtRQUMxRSxxRUFBcUU7UUFDckUsT0FBTyxDQUNMLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPO1lBQ3BCLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQzFDLENBQUMsQ0FBQyxNQUFNLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQzlELENBQUM7SUFDSixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQ1xuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHNlbXZlciBmcm9tICdzZW12ZXInO1xuXG5pbXBvcnQge2dyZWVuLCBMb2d9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2xvZ2dpbmcuanMnO1xuaW1wb3J0IHt3b3Jrc3BhY2VSZWxhdGl2ZVBhY2thZ2VKc29uUGF0aH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvY29uc3RhbnRzLmpzJztcbmltcG9ydCB7QWN0aXZlUmVsZWFzZVRyYWluc30gZnJvbSAnLi4vLi4vdmVyc2lvbmluZy9hY3RpdmUtcmVsZWFzZS10cmFpbnMuanMnO1xuaW1wb3J0IHtSZWxlYXNlQWN0aW9ufSBmcm9tICcuLi9hY3Rpb25zLmpzJztcbmltcG9ydCB7Z2V0Q29tbWl0TWVzc2FnZUZvck5leHRCcmFuY2hNYWpvclN3aXRjaH0gZnJvbSAnLi4vY29tbWl0LW1lc3NhZ2UuanMnO1xuaW1wb3J0IHtpc0ZpcnN0TmV4dFByZXJlbGVhc2V9IGZyb20gJy4uLy4uL3ZlcnNpb25pbmcvcHJlcmVsZWFzZS12ZXJzaW9uLmpzJztcbmltcG9ydCB7aXNWZXJzaW9uUHVibGlzaGVkVG9OcG19IGZyb20gJy4uLy4uL3ZlcnNpb25pbmcvbnBtLXJlZ2lzdHJ5LmpzJztcbmltcG9ydCB7UmVsZWFzZUNvbmZpZ30gZnJvbSAnLi4vLi4vY29uZmlnL2luZGV4LmpzJztcblxuLyoqXG4gKiBSZWxlYXNlIGFjdGlvbiB0aGF0IGNvbmZpZ3VyZXMgdGhlIGFjdGl2ZSBuZXh0IHJlbGVhc2UtdHJhaW4gdG8gYmUgZm9yIGEgbWFqb3JcbiAqIHZlcnNpb24uIFRoaXMgbWVhbnMgdGhhdCBtYWpvciBjaGFuZ2VzIGNhbiBsYW5kIGluIHRoZSBuZXh0IGJyYW5jaC5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbmZpZ3VyZU5leHRBc01ham9yQWN0aW9uIGV4dGVuZHMgUmVsZWFzZUFjdGlvbiB7XG4gIHByaXZhdGUgX25ld1ZlcnNpb24gPSBzZW12ZXIucGFyc2UoYCR7dGhpcy5hY3RpdmUubmV4dC52ZXJzaW9uLm1ham9yICsgMX0uMC4wLW5leHQuMGApITtcblxuICBvdmVycmlkZSBhc3luYyBnZXREZXNjcmlwdGlvbigpIHtcbiAgICBjb25zdCB7YnJhbmNoTmFtZX0gPSB0aGlzLmFjdGl2ZS5uZXh0O1xuICAgIGNvbnN0IG5ld1ZlcnNpb24gPSB0aGlzLl9uZXdWZXJzaW9uO1xuICAgIHJldHVybiBgQ29uZmlndXJlIHRoZSBcIiR7YnJhbmNoTmFtZX1cIiBicmFuY2ggdG8gYmUgcmVsZWFzZWQgYXMgbWFqb3IgKHYke25ld1ZlcnNpb259KS5gO1xuICB9XG5cbiAgb3ZlcnJpZGUgYXN5bmMgcGVyZm9ybSgpIHtcbiAgICBjb25zdCB7YnJhbmNoTmFtZX0gPSB0aGlzLmFjdGl2ZS5uZXh0O1xuICAgIGNvbnN0IG5ld1ZlcnNpb24gPSB0aGlzLl9uZXdWZXJzaW9uO1xuICAgIGNvbnN0IGJlZm9yZVN0YWdpbmdTaGEgPSBhd2FpdCB0aGlzLmdldExhdGVzdENvbW1pdE9mQnJhbmNoKGJyYW5jaE5hbWUpO1xuXG4gICAgYXdhaXQgdGhpcy5hc3NlcnRQYXNzaW5nR2l0aHViU3RhdHVzKGJlZm9yZVN0YWdpbmdTaGEsIGJyYW5jaE5hbWUpO1xuICAgIGF3YWl0IHRoaXMuY2hlY2tvdXRVcHN0cmVhbUJyYW5jaChicmFuY2hOYW1lKTtcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZVByb2plY3RWZXJzaW9uKG5ld1ZlcnNpb24pO1xuXG4gICAgYXdhaXQgdGhpcy5jcmVhdGVDb21taXQoZ2V0Q29tbWl0TWVzc2FnZUZvck5leHRCcmFuY2hNYWpvclN3aXRjaChuZXdWZXJzaW9uKSwgW1xuICAgICAgd29ya3NwYWNlUmVsYXRpdmVQYWNrYWdlSnNvblBhdGgsXG4gICAgICAuLi50aGlzLmdldEFzcGVjdExvY2tGaWxlcygpLFxuICAgIF0pO1xuICAgIGNvbnN0IHB1bGxSZXF1ZXN0ID0gYXdhaXQgdGhpcy5wdXNoQ2hhbmdlc1RvRm9ya0FuZENyZWF0ZVB1bGxSZXF1ZXN0KFxuICAgICAgYnJhbmNoTmFtZSxcbiAgICAgIGBzd2l0Y2gtbmV4dC10by1tYWpvci0ke25ld1ZlcnNpb259YCxcbiAgICAgIGBDb25maWd1cmUgbmV4dCBicmFuY2ggdG8gcmVjZWl2ZSBtYWpvciBjaGFuZ2VzIGZvciB2JHtuZXdWZXJzaW9ufWAsXG4gICAgKTtcblxuICAgIExvZy5pbmZvKGdyZWVuKCcgIOKckyAgIE5leHQgYnJhbmNoIHVwZGF0ZSBwdWxsIHJlcXVlc3QgaGFzIGJlZW4gY3JlYXRlZC4nKSk7XG5cbiAgICBhd2FpdCB0aGlzLnByb21wdEFuZFdhaXRGb3JQdWxsUmVxdWVzdE1lcmdlZChwdWxsUmVxdWVzdCk7XG4gIH1cblxuICBzdGF0aWMgb3ZlcnJpZGUgYXN5bmMgaXNBY3RpdmUoYWN0aXZlOiBBY3RpdmVSZWxlYXNlVHJhaW5zLCBjb25maWc6IFJlbGVhc2VDb25maWcpIHtcbiAgICAvLyBUaGUgYG5leHRgIGJyYW5jaCBjYW4gYmUgc3dpdGNoZWQgdG8gYSBtYWpvciB2ZXJzaW9uLCB1bmxlc3MgaXQgYWxyZWFkeVxuICAgIC8vIGlzIHRhcmdldGluZyBhIG5ldyBtYWpvciwgb3IgaWYgcHJlLXJlbGVhc2VzIGhhdmUgYWxyZWFkeSBzdGFydGVkLlxuICAgIHJldHVybiAoXG4gICAgICAhYWN0aXZlLm5leHQuaXNNYWpvciAmJlxuICAgICAgaXNGaXJzdE5leHRQcmVyZWxlYXNlKGFjdGl2ZS5uZXh0LnZlcnNpb24pICYmXG4gICAgICAhKGF3YWl0IGlzVmVyc2lvblB1Ymxpc2hlZFRvTnBtKGFjdGl2ZS5uZXh0LnZlcnNpb24sIGNvbmZpZykpXG4gICAgKTtcbiAgfVxufVxuIl19