/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import semver from 'semver';
import { green, Log } from '../../../utils/logging.js';
import { workspaceRelativePackageJsonPath } from '../../../utils/constants.js';
import { ReleaseAction } from '../actions.js';
import { getCommitMessageForNextBranchMajorSwitch } from '../commit-message.js';
import { isFirstNextPrerelease } from '../../versioning/prerelease-version.js';
import { isVersionPublishedToNpm } from '../../versioning/npm-registry.js';
/**
 * Release action that configures the active next release-train to be for a major
 * version. This means that major changes can land in the next branch.
 */
export class ConfigureNextAsMajorAction extends ReleaseAction {
    constructor() {
        super(...arguments);
        this._newVersion = semver.parse(`${this.active.next.version.major + 1}.0.0-next.0`);
    }
    async getDescription() {
        const { branchName } = this.active.next;
        const newVersion = this._newVersion;
        return `Configure the "${branchName}" branch to be released as major (v${newVersion}).`;
    }
    async perform() {
        const { branchName } = this.active.next;
        const newVersion = this._newVersion;
        const { sha: beforeStagingSha } = await this.getLatestCommitOfBranch(branchName);
        await this.assertPassingGithubStatus(beforeStagingSha, branchName);
        await this.checkoutUpstreamBranch(branchName);
        await this.updateProjectVersion(newVersion);
        await this.createCommit(getCommitMessageForNextBranchMajorSwitch(newVersion), [
            workspaceRelativePackageJsonPath,
            ...this.getAspectLockFiles(),
        ]);
        const pullRequest = await this.pushChangesToForkAndCreatePullRequest(branchName, `switch-next-to-major-${newVersion}`, `Configure next branch to receive major changes for v${newVersion}`);
        Log.info(green('  âœ“   Next branch update pull request has been created.'));
        await this.promptAndWaitForPullRequestMerged(pullRequest);
    }
    static async isActive(active, config) {
        // The `next` branch can be switched to a major version, unless it already
        // is targeting a new major, or if pre-releases have already started.
        return (!active.next.isMajor &&
            isFirstNextPrerelease(active.next.version) &&
            !(await isVersionPublishedToNpm(active.next.version, config)));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJlLW5leHQtYXMtbWFqb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9uZy1kZXYvcmVsZWFzZS9wdWJsaXNoL2FjdGlvbnMvY29uZmlndXJlLW5leHQtYXMtbWFqb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxNQUFNLE1BQU0sUUFBUSxDQUFDO0FBRTVCLE9BQU8sRUFBQyxLQUFLLEVBQUUsR0FBRyxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDckQsT0FBTyxFQUFDLGdDQUFnQyxFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFFN0UsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM1QyxPQUFPLEVBQUMsd0NBQXdDLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUM5RSxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSx3Q0FBd0MsQ0FBQztBQUM3RSxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSxrQ0FBa0MsQ0FBQztBQUd6RTs7O0dBR0c7QUFDSCxNQUFNLE9BQU8sMEJBQTJCLFNBQVEsYUFBYTtJQUE3RDs7UUFDVSxnQkFBVyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLENBQUMsYUFBYSxDQUFFLENBQUM7SUF5QzFGLENBQUM7SUF2Q1UsS0FBSyxDQUFDLGNBQWM7UUFDM0IsTUFBTSxFQUFDLFVBQVUsRUFBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ3RDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDcEMsT0FBTyxrQkFBa0IsVUFBVSxzQ0FBc0MsVUFBVSxJQUFJLENBQUM7SUFDMUYsQ0FBQztJQUVRLEtBQUssQ0FBQyxPQUFPO1FBQ3BCLE1BQU0sRUFBQyxVQUFVLEVBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUN0QyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQ3BDLE1BQU0sRUFBQyxHQUFHLEVBQUUsZ0JBQWdCLEVBQUMsR0FBRyxNQUFNLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUUvRSxNQUFNLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxnQkFBZ0IsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNuRSxNQUFNLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM5QyxNQUFNLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUU1QyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsd0NBQXdDLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDNUUsZ0NBQWdDO1lBQ2hDLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixFQUFFO1NBQzdCLENBQUMsQ0FBQztRQUNILE1BQU0sV0FBVyxHQUFHLE1BQU0sSUFBSSxDQUFDLHFDQUFxQyxDQUNsRSxVQUFVLEVBQ1Ysd0JBQXdCLFVBQVUsRUFBRSxFQUNwQyx1REFBdUQsVUFBVSxFQUFFLENBQ3BFLENBQUM7UUFFRixHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyx5REFBeUQsQ0FBQyxDQUFDLENBQUM7UUFFM0UsTUFBTSxJQUFJLENBQUMsaUNBQWlDLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVELE1BQU0sQ0FBVSxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQTJCLEVBQUUsTUFBcUI7UUFDL0UsMEVBQTBFO1FBQzFFLHFFQUFxRTtRQUNyRSxPQUFPLENBQ0wsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU87WUFDcEIscUJBQXFCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDMUMsQ0FBQyxDQUFDLE1BQU0sdUJBQXVCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FDOUQsQ0FBQztJQUNKLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQgc2VtdmVyIGZyb20gJ3NlbXZlcic7XG5cbmltcG9ydCB7Z3JlZW4sIExvZ30gZnJvbSAnLi4vLi4vLi4vdXRpbHMvbG9nZ2luZy5qcyc7XG5pbXBvcnQge3dvcmtzcGFjZVJlbGF0aXZlUGFja2FnZUpzb25QYXRofSBmcm9tICcuLi8uLi8uLi91dGlscy9jb25zdGFudHMuanMnO1xuaW1wb3J0IHtBY3RpdmVSZWxlYXNlVHJhaW5zfSBmcm9tICcuLi8uLi92ZXJzaW9uaW5nL2FjdGl2ZS1yZWxlYXNlLXRyYWlucy5qcyc7XG5pbXBvcnQge1JlbGVhc2VBY3Rpb259IGZyb20gJy4uL2FjdGlvbnMuanMnO1xuaW1wb3J0IHtnZXRDb21taXRNZXNzYWdlRm9yTmV4dEJyYW5jaE1ham9yU3dpdGNofSBmcm9tICcuLi9jb21taXQtbWVzc2FnZS5qcyc7XG5pbXBvcnQge2lzRmlyc3ROZXh0UHJlcmVsZWFzZX0gZnJvbSAnLi4vLi4vdmVyc2lvbmluZy9wcmVyZWxlYXNlLXZlcnNpb24uanMnO1xuaW1wb3J0IHtpc1ZlcnNpb25QdWJsaXNoZWRUb05wbX0gZnJvbSAnLi4vLi4vdmVyc2lvbmluZy9ucG0tcmVnaXN0cnkuanMnO1xuaW1wb3J0IHtSZWxlYXNlQ29uZmlnfSBmcm9tICcuLi8uLi9jb25maWcvaW5kZXguanMnO1xuXG4vKipcbiAqIFJlbGVhc2UgYWN0aW9uIHRoYXQgY29uZmlndXJlcyB0aGUgYWN0aXZlIG5leHQgcmVsZWFzZS10cmFpbiB0byBiZSBmb3IgYSBtYWpvclxuICogdmVyc2lvbi4gVGhpcyBtZWFucyB0aGF0IG1ham9yIGNoYW5nZXMgY2FuIGxhbmQgaW4gdGhlIG5leHQgYnJhbmNoLlxuICovXG5leHBvcnQgY2xhc3MgQ29uZmlndXJlTmV4dEFzTWFqb3JBY3Rpb24gZXh0ZW5kcyBSZWxlYXNlQWN0aW9uIHtcbiAgcHJpdmF0ZSBfbmV3VmVyc2lvbiA9IHNlbXZlci5wYXJzZShgJHt0aGlzLmFjdGl2ZS5uZXh0LnZlcnNpb24ubWFqb3IgKyAxfS4wLjAtbmV4dC4wYCkhO1xuXG4gIG92ZXJyaWRlIGFzeW5jIGdldERlc2NyaXB0aW9uKCkge1xuICAgIGNvbnN0IHticmFuY2hOYW1lfSA9IHRoaXMuYWN0aXZlLm5leHQ7XG4gICAgY29uc3QgbmV3VmVyc2lvbiA9IHRoaXMuX25ld1ZlcnNpb247XG4gICAgcmV0dXJuIGBDb25maWd1cmUgdGhlIFwiJHticmFuY2hOYW1lfVwiIGJyYW5jaCB0byBiZSByZWxlYXNlZCBhcyBtYWpvciAodiR7bmV3VmVyc2lvbn0pLmA7XG4gIH1cblxuICBvdmVycmlkZSBhc3luYyBwZXJmb3JtKCkge1xuICAgIGNvbnN0IHticmFuY2hOYW1lfSA9IHRoaXMuYWN0aXZlLm5leHQ7XG4gICAgY29uc3QgbmV3VmVyc2lvbiA9IHRoaXMuX25ld1ZlcnNpb247XG4gICAgY29uc3Qge3NoYTogYmVmb3JlU3RhZ2luZ1NoYX0gPSBhd2FpdCB0aGlzLmdldExhdGVzdENvbW1pdE9mQnJhbmNoKGJyYW5jaE5hbWUpO1xuXG4gICAgYXdhaXQgdGhpcy5hc3NlcnRQYXNzaW5nR2l0aHViU3RhdHVzKGJlZm9yZVN0YWdpbmdTaGEsIGJyYW5jaE5hbWUpO1xuICAgIGF3YWl0IHRoaXMuY2hlY2tvdXRVcHN0cmVhbUJyYW5jaChicmFuY2hOYW1lKTtcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZVByb2plY3RWZXJzaW9uKG5ld1ZlcnNpb24pO1xuXG4gICAgYXdhaXQgdGhpcy5jcmVhdGVDb21taXQoZ2V0Q29tbWl0TWVzc2FnZUZvck5leHRCcmFuY2hNYWpvclN3aXRjaChuZXdWZXJzaW9uKSwgW1xuICAgICAgd29ya3NwYWNlUmVsYXRpdmVQYWNrYWdlSnNvblBhdGgsXG4gICAgICAuLi50aGlzLmdldEFzcGVjdExvY2tGaWxlcygpLFxuICAgIF0pO1xuICAgIGNvbnN0IHB1bGxSZXF1ZXN0ID0gYXdhaXQgdGhpcy5wdXNoQ2hhbmdlc1RvRm9ya0FuZENyZWF0ZVB1bGxSZXF1ZXN0KFxuICAgICAgYnJhbmNoTmFtZSxcbiAgICAgIGBzd2l0Y2gtbmV4dC10by1tYWpvci0ke25ld1ZlcnNpb259YCxcbiAgICAgIGBDb25maWd1cmUgbmV4dCBicmFuY2ggdG8gcmVjZWl2ZSBtYWpvciBjaGFuZ2VzIGZvciB2JHtuZXdWZXJzaW9ufWAsXG4gICAgKTtcblxuICAgIExvZy5pbmZvKGdyZWVuKCcgIOKckyAgIE5leHQgYnJhbmNoIHVwZGF0ZSBwdWxsIHJlcXVlc3QgaGFzIGJlZW4gY3JlYXRlZC4nKSk7XG5cbiAgICBhd2FpdCB0aGlzLnByb21wdEFuZFdhaXRGb3JQdWxsUmVxdWVzdE1lcmdlZChwdWxsUmVxdWVzdCk7XG4gIH1cblxuICBzdGF0aWMgb3ZlcnJpZGUgYXN5bmMgaXNBY3RpdmUoYWN0aXZlOiBBY3RpdmVSZWxlYXNlVHJhaW5zLCBjb25maWc6IFJlbGVhc2VDb25maWcpIHtcbiAgICAvLyBUaGUgYG5leHRgIGJyYW5jaCBjYW4gYmUgc3dpdGNoZWQgdG8gYSBtYWpvciB2ZXJzaW9uLCB1bmxlc3MgaXQgYWxyZWFkeVxuICAgIC8vIGlzIHRhcmdldGluZyBhIG5ldyBtYWpvciwgb3IgaWYgcHJlLXJlbGVhc2VzIGhhdmUgYWxyZWFkeSBzdGFydGVkLlxuICAgIHJldHVybiAoXG4gICAgICAhYWN0aXZlLm5leHQuaXNNYWpvciAmJlxuICAgICAgaXNGaXJzdE5leHRQcmVyZWxlYXNlKGFjdGl2ZS5uZXh0LnZlcnNpb24pICYmXG4gICAgICAhKGF3YWl0IGlzVmVyc2lvblB1Ymxpc2hlZFRvTnBtKGFjdGl2ZS5uZXh0LnZlcnNpb24sIGNvbmZpZykpXG4gICAgKTtcbiAgfVxufVxuIl19