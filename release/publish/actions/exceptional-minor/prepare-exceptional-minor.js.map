{"version":3,"file":"prepare-exceptional-minor.js","sourceRoot":"","sources":["prepare-exceptional-minor.ts"],"names":[],"mappings":"AAQA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAC,gCAAgC,EAAC,MAAM,gCAAgC,CAAC;AAChF,OAAO,EAAC,KAAK,EAAE,GAAG,EAAC,MAAM,8BAA8B,CAAC;AAExD,OAAO,EAAC,gCAAgC,EAAC,MAAM,yCAAyC,CAAC;AACzF,OAAO,EAAC,aAAa,EAAC,MAAM,kBAAkB,CAAC;AAc/C,MAAM,OAAO,6BAA8B,SAAQ,aAAa;IAAhE;;QACU,WAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QAC5B,gBAAW,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;QACrC,kBAAa,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;QACpC,eAAU,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC;QAC7E,gBAAW,GAAG,MAAM,CAAC,KAAK,CAChC,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK,GAAG,CAAC,WAAW,CACtE,CAAC;IAmDL,CAAC;IAjDC,KAAK,CAAC,cAAc;QAClB,OAAO,uDAAuD,IAAI,CAAC,WAAW,aAAa,IAAI,CAAC,UAAU,IAAI,CAAC;IACjH,CAAC;IAED,KAAK,CAAC,OAAO;QACX,MAAM,EAAC,GAAG,EAAE,mBAAmB,EAAC,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAExF,MAAM,IAAI,CAAC,yBAAyB,CAAC,mBAAmB,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAE5E,MAAM,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACpD,MAAM,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACtD,MAAM,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,EAAE,EAAE;YAC5D,OAAO,CAAC,gCAAgC,CAAC,GAAG,IAAI,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,MAAM,aAAa,GAAa;YAC9B,gCAAgC;YAChC,GAAG,IAAI,CAAC,kBAAkB,EAAE;SAC7B,CAAC;QAEF,MAAM,mBAAmB,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAC1D,IAAI,mBAAmB,EAAE,CAAC;YACxB,aAAa,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAC1C,CAAC;QAED,MAAM,IAAI,CAAC,YAAY,CACrB,4CAA4C,IAAI,CAAC,UAAU,EAAE,EAC7D,aAAa,CACd,CAAC;QAEF,MAAM,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAEnD,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,yBAAyB,IAAI,CAAC,UAAU,YAAY,CAAC,CAAC,CAAC;QACtE,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,sDAAsD,CAAC,CAAC,CAAC;IAC1E,CAAC;IAED,MAAM,CAAU,KAAK,CAAC,QAAQ,CAAC,MAA2B;QACxD,IAAI,MAAM,CAAC,gBAAgB,KAAK,IAAI,EAAE,CAAC;YACrC,OAAO,KAAK,CAAC;QACf,CAAC;QAGD,IAAI,MAAM,CAAC,gBAAgB,KAAK,IAAI,EAAE,CAAC;YACrC,OAAO,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC;QACzC,CAAC;QAGD,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;IAC7B,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport semver from 'semver';\nimport {workspaceRelativePackageJsonPath} from '../../../../utils/constants.js';\nimport {green, Log} from '../../../../utils/logging.js';\nimport {ActiveReleaseTrains} from '../../../versioning/active-release-trains.js';\nimport {exceptionalMinorPackageIndicator} from '../../../versioning/version-branches.js';\nimport {ReleaseAction} from '../../actions.js';\n\n/**\n * Release action for initiating an exceptional minor release-train. This\n * action is active when a new major is already in-progress but another\n * minor is suddenly needed for the previous major.\n *\n * The action will create a new branch based on the existing \"latest\"\n * release-train. No release will be published immediately to allow for\n * changes to be made. Once changes have been made, an exceptional minor\n * can switch into the `release-candidate` phase, and then become \"latest\".\n *\n * More details can be found here: http://go/angular-exceptional-minor.\n */\nexport class PrepareExceptionalMinorAction extends ReleaseAction {\n  private _patch = this.active.latest;\n  private _baseBranch = this._patch.branchName;\n  private _patchVersion = this._patch.version;\n  private _newBranch = `${this._patchVersion.major}.${this._patchVersion.minor + 1}.x`;\n  private _newVersion = semver.parse(\n    `${this._patchVersion.major}.${this._patchVersion.minor + 1}.0-next.0`,\n  )!;\n\n  async getDescription(): Promise<string> {\n    return `Prepare an exceptional minor based on the existing \"${this._baseBranch}\" branch (${this._newBranch}).`;\n  }\n\n  async perform(): Promise<void> {\n    const {sha: latestBaseBranchSha} = await this.getLatestCommitOfBranch(this._baseBranch);\n\n    await this.assertPassingGithubStatus(latestBaseBranchSha, this._baseBranch);\n\n    await this.checkoutUpstreamBranch(this._baseBranch);\n    await this.createLocalBranchFromHead(this._newBranch);\n    await this.updateProjectVersion(this._newVersion, (pkgJson) => {\n      pkgJson[exceptionalMinorPackageIndicator] = true;\n    });\n\n    const filesToCommit: string[] = [\n      workspaceRelativePackageJsonPath,\n      ...this.getAspectLockFiles(),\n    ];\n\n    const bazelModuleLockFile = this.getModuleBazelLockFile();\n    if (bazelModuleLockFile) {\n      filesToCommit.push(bazelModuleLockFile);\n    }\n\n    await this.createCommit(\n      `build: prepare exceptional minor branch: ${this._newBranch}`,\n      filesToCommit,\n    );\n\n    await this.pushHeadToRemoteBranch(this._newBranch);\n\n    Log.info(green(`  âœ“   Version branch \"${this._newBranch}\" created.`));\n    Log.info(green(`      Exceptional minor release-train is now active.`));\n  }\n\n  static override async isActive(active: ActiveReleaseTrains): Promise<boolean> {\n    if (active.exceptionalMinor !== null) {\n      return false;\n    }\n    // If a FF/RC train is in-progress and it's for a major, we allow\n    // for an exceptional minor.\n    if (active.releaseCandidate !== null) {\n      return active.releaseCandidate.isMajor;\n    }\n    // Otherwise if there is no FF/RC train and `next` is for a major,\n    // an exceptional minor is allowed.\n    return active.next.isMajor;\n  }\n}\n"]}