{"version":3,"file":"cut-exceptional-minor-prerelease.js","sourceRoot":"","sources":["cut-exceptional-minor-prerelease.ts"],"names":[],"mappings":"AAUA,OAAO,EAAC,uBAAuB,EAAC,MAAM,qCAAqC,CAAC;AAC5E,OAAO,EAAC,qBAAqB,EAAC,MAAM,2CAA2C,CAAC;AAChF,OAAO,EAAC,uBAAuB,EAAC,MAAM,6BAA6B,CAAC;AASpE,MAAM,OAAO,mCAAoC,SAAQ,uBAAuB;IAAhF;;QACE,iBAAY,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAiB,CAAC;QAU7C,eAAU,GAAG,8BAAuC,CAAC;QAErD,6BAAwB,GAAG,CAAC,KAAK,IAAI,EAAE;YAIrC,OAAO,CACL,qBAAqB,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;gBAChD,CAAC,CAAC,MAAM,uBAAuB,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CACzE,CAAC;QACJ,CAAC,CAAC,EAAE,CAAC;QAEL,+BAA0B,GAA2B,CAAC,KAAK,IAAI,EAAE;YAC/D,IAAI,MAAM,IAAI,CAAC,wBAAwB,EAAE,CAAC;gBACxC,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC;YACpC,CAAC;YACD,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;QACnC,CAAC,CAAC,EAAE,CAAC;IAUP,CAAC;IARU,KAAK,CAAC,cAAc;QAE3B,OAAO,sBAAsB,MAAM,KAAK,CAAC,cAAc,EAAE,EAAE,CAAC;IAC9D,CAAC;IAED,MAAM,CAAU,KAAK,CAAC,QAAQ,CAAC,MAA2B;QACxD,OAAO,MAAM,CAAC,gBAAgB,KAAK,IAAI,CAAC;IAC1C,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport semver from 'semver';\nimport {ActiveReleaseTrains} from '../../../versioning/active-release-trains.js';\nimport {isVersionPublishedToNpm} from '../../../versioning/npm-registry.js';\nimport {isFirstNextPrerelease} from '../../../versioning/prerelease-version.js';\nimport {CutPrereleaseBaseAction} from '../shared/cut-prerelease.js';\n\n/**\n * Release action that allows for `-next` pre-releases of an in-progress\n * exceptional minor. The action is active when there is an exceptional minor.\n *\n * The action will bump the pre-release version to the next increment\n * and publish it to NPM. Note that it would not be tagged on NPM as `@next`.\n */\nexport class CutExceptionalMinorPrereleaseAction extends CutPrereleaseBaseAction {\n  releaseTrain = this.active.exceptionalMinor!;\n\n  // An exceptional minor will never be released as `@next`. The NPM next dist tag\n  // will be reserved for the normal FF/RC or `next` release trains. Specifically\n  // we cannot override the `@next` NPM dist tag when it already points to a more\n  // recent major. This would most commonly be the case, and in the other edge-case\n  // of where no NPM next release has occurred yet- arguably an exceptional minor\n  // should not prevent actual pre-releases for an on-going FF/RC or the next branch.\n  // Note that NPM always requires a dist-tag, so we explicitly have one dedicated\n  // for exceptional minors. This tag could be deleted in the future.\n  npmDistTag = 'do-not-use-exceptional-minor' as const;\n\n  shouldUseExistingVersion = (async () => {\n    // If an exceptional minor branch has just been created, the actual version\n    // will not be published directly. To account for this case, based on if the\n    // version is already published or not, the version is NOT incremented.\n    return (\n      isFirstNextPrerelease(this.releaseTrain.version) &&\n      !(await isVersionPublishedToNpm(this.releaseTrain.version, this.config))\n    );\n  })();\n\n  releaseNotesCompareVersion: Promise<semver.SemVer> = (async () => {\n    if (await this.shouldUseExistingVersion) {\n      return this.active.latest.version;\n    }\n    return this.releaseTrain.version;\n  })();\n\n  override async getDescription(): Promise<string> {\n    // Make it more obvious that this action is for an exceptional minor.\n    return `Exceptional Minor: ${await super.getDescription()}`;\n  }\n\n  static override async isActive(active: ActiveReleaseTrains) {\n    return active.exceptionalMinor !== null;\n  }\n}\n"]}