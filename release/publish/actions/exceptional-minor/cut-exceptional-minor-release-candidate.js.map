{"version":3,"file":"cut-exceptional-minor-release-candidate.js","sourceRoot":"","sources":["cut-exceptional-minor-release-candidate.ts"],"names":[],"mappings":"AASA,OAAO,EAAC,SAAS,EAAC,MAAM,6BAA6B,CAAC;AAEtD,OAAO,EAAC,mCAAmC,EAAC,MAAM,uCAAuC,CAAC;AAY1F,MAAM,OAAO,yCAA0C,SAAQ,mCAAmC;IACvF,KAAK,CAAC,cAAc;QAE3B,OAAO,sBAAsB,MAAM,KAAK,CAAC,8BAA8B,EAAE,EAAE,CAAC;IAC9E,CAAC;IAEQ,KAAK,CAAC,aAAa;QAC1B,OAAO,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;IAClE,CAAC;IAED,MAAM,CAAU,KAAK,CAAC,QAAQ,CAAC,MAA2B;QACxD,OAAO,CAGL,MAAM,CAAC,gBAAgB,KAAK,IAAI,IAAI,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,MAAM,CAC7F,CAAC;IACJ,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport semver from 'semver';\nimport {semverInc} from '../../../../utils/semver.js';\nimport {ActiveReleaseTrains} from '../../../versioning/active-release-trains.js';\nimport {CutExceptionalMinorPrereleaseAction} from './cut-exceptional-minor-prerelease.js';\n\n/**\n * Release action that allows for the first exceptional minor release-candidate. The\n * action is only active when there is an in-progress exceptional minor that\n * is still in the `-next` pre-release phase.\n *\n * The action will bump the pre-release version from the `-next` prerelease to\n * the first release-candidate. The action will then become inactive again as\n * additional RC pre-releases would be handled by `CutExceptionalMinorPrereleaseAction`\n * then.\n */\nexport class CutExceptionalMinorReleaseCandidateAction extends CutExceptionalMinorPrereleaseAction {\n  override async getDescription(): Promise<string> {\n    // Use the RC description and make it clear that this action is for an exceptional minor.\n    return `Exceptional Minor: ${await super.getReleaseCandidateDescription()}`;\n  }\n\n  override async getNewVersion(): Promise<semver.SemVer> {\n    return semverInc(this.releaseTrain.version, 'prerelease', 'rc');\n  }\n\n  static override async isActive(active: ActiveReleaseTrains) {\n    return (\n      // If there is an exceptional minor and we are still in `-next` pre-releases,\n      // the first RC pre-release can be cut.\n      active.exceptionalMinor !== null && active.exceptionalMinor.version.prerelease[0] === 'next'\n    );\n  }\n}\n"]}