/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import semver from 'semver';
import { fetchProjectNpmPackageInfo } from '../../versioning/npm-registry.js';
import { ReleaseAction } from '../actions.js';
import { ExternalCommands } from '../external-commands.js';
import { getReleaseTagForVersion } from '../../versioning/version-tags.js';
/**
 * Release action that tags the recently published major as latest within the NPM
 * registry. Major versions are published to the `next` NPM dist tag initially and
 * can be re-tagged to the `latest` NPM dist tag. This allows caretakers to make major
 * releases available at the same time. e.g. Framework, Tooling and Components
 * are able to publish v12 to `@latest` at the same time. This wouldn't be possible if
 * we directly publish to `@latest` because Tooling and Components needs to wait
 * for the major framework release to be available on NPM.
 * @see {CutStableAction#perform} for more details.
 */
export class TagRecentMajorAsLatest extends ReleaseAction {
    async getDescription() {
        return `Retag recently published major v${this.active.latest.version} as "latest" in NPM.`;
    }
    async perform() {
        await this.updateGithubReleaseEntryToStable(this.active.latest.version);
        await this.checkoutUpstreamBranch(this.active.latest.branchName);
        await this.installDependenciesForCurrentBranch();
        await ExternalCommands.invokeSetNpmDist(this.projectDir, 'latest', this.active.latest.version, this.pnpmVersioning);
    }
    /**
     * Updates the Github release entry for the specified version to show
     * it as stable release, compared to it being shown as a pre-release.
     */
    async updateGithubReleaseEntryToStable(version) {
        const releaseTagName = getReleaseTagForVersion(version);
        const { data: releaseInfo } = await this.git.github.repos.getReleaseByTag({
            ...this.git.remoteParams,
            tag: releaseTagName,
        });
        await this.git.github.repos.updateRelease({
            ...this.git.remoteParams,
            release_id: releaseInfo.id,
            prerelease: false,
        });
    }
    static async isActive({ latest }, config) {
        // If the latest release-train does currently not have a major version as version. e.g.
        // the latest branch is `10.0.x` with the version being `10.0.2`. In such cases, a major
        // has not been released recently, and this action should never become active.
        if (latest.version.minor !== 0 || latest.version.patch !== 0) {
            return false;
        }
        const packageInfo = await fetchProjectNpmPackageInfo(config);
        const npmLatestVersion = semver.parse(packageInfo['dist-tags']['latest']);
        // This action only becomes active if a major just has been released recently, but is
        // not set to the `latest` NPM dist tag in the NPM registry. Note that we only allow
        // re-tagging if the current `@latest` in NPM is the previous major version.
        return npmLatestVersion !== null && npmLatestVersion.major === latest.version.major - 1;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLXJlY2VudC1tYWpvci1hcy1sYXRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9uZy1kZXYvcmVsZWFzZS9wdWJsaXNoL2FjdGlvbnMvdGFnLXJlY2VudC1tYWpvci1hcy1sYXRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxNQUFNLE1BQU0sUUFBUSxDQUFDO0FBSTVCLE9BQU8sRUFBQywwQkFBMEIsRUFBQyxNQUFNLGtDQUFrQyxDQUFDO0FBQzVFLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDNUMsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDekQsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sa0NBQWtDLENBQUM7QUFFekU7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBTSxPQUFPLHNCQUF1QixTQUFRLGFBQWE7SUFDOUMsS0FBSyxDQUFDLGNBQWM7UUFDM0IsT0FBTyxtQ0FBbUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxzQkFBc0IsQ0FBQztJQUM3RixDQUFDO0lBRVEsS0FBSyxDQUFDLE9BQU87UUFDcEIsTUFBTSxJQUFJLENBQUMsZ0NBQWdDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDeEUsTUFBTSxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDakUsTUFBTSxJQUFJLENBQUMsbUNBQW1DLEVBQUUsQ0FBQztRQUNqRCxNQUFNLGdCQUFnQixDQUFDLGdCQUFnQixDQUNyQyxJQUFJLENBQUMsVUFBVSxFQUNmLFFBQVEsRUFDUixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQzFCLElBQUksQ0FBQyxjQUFjLENBQ3BCLENBQUM7SUFDSixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLE9BQXNCO1FBQzNELE1BQU0sY0FBYyxHQUFHLHVCQUF1QixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3hELE1BQU0sRUFBQyxJQUFJLEVBQUUsV0FBVyxFQUFDLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDO1lBQ3RFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZO1lBQ3hCLEdBQUcsRUFBRSxjQUFjO1NBQ3BCLENBQUMsQ0FBQztRQUVILE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQztZQUN4QyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWTtZQUN4QixVQUFVLEVBQUUsV0FBVyxDQUFDLEVBQUU7WUFDMUIsVUFBVSxFQUFFLEtBQUs7U0FDbEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELE1BQU0sQ0FBVSxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUMsTUFBTSxFQUFzQixFQUFFLE1BQXFCO1FBQ2pGLHVGQUF1RjtRQUN2Rix3RkFBd0Y7UUFDeEYsOEVBQThFO1FBQzlFLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQzdELE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQztRQUVELE1BQU0sV0FBVyxHQUFHLE1BQU0sMEJBQTBCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0QsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQzFFLHFGQUFxRjtRQUNyRixvRkFBb0Y7UUFDcEYsNEVBQTRFO1FBQzVFLE9BQU8sZ0JBQWdCLEtBQUssSUFBSSxJQUFJLGdCQUFnQixDQUFDLEtBQUssS0FBSyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDMUYsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTENcbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCBzZW12ZXIgZnJvbSAnc2VtdmVyJztcblxuaW1wb3J0IHtSZWxlYXNlQ29uZmlnfSBmcm9tICcuLi8uLi9jb25maWcvaW5kZXguanMnO1xuaW1wb3J0IHtBY3RpdmVSZWxlYXNlVHJhaW5zfSBmcm9tICcuLi8uLi92ZXJzaW9uaW5nL2FjdGl2ZS1yZWxlYXNlLXRyYWlucy5qcyc7XG5pbXBvcnQge2ZldGNoUHJvamVjdE5wbVBhY2thZ2VJbmZvfSBmcm9tICcuLi8uLi92ZXJzaW9uaW5nL25wbS1yZWdpc3RyeS5qcyc7XG5pbXBvcnQge1JlbGVhc2VBY3Rpb259IGZyb20gJy4uL2FjdGlvbnMuanMnO1xuaW1wb3J0IHtFeHRlcm5hbENvbW1hbmRzfSBmcm9tICcuLi9leHRlcm5hbC1jb21tYW5kcy5qcyc7XG5pbXBvcnQge2dldFJlbGVhc2VUYWdGb3JWZXJzaW9ufSBmcm9tICcuLi8uLi92ZXJzaW9uaW5nL3ZlcnNpb24tdGFncy5qcyc7XG5cbi8qKlxuICogUmVsZWFzZSBhY3Rpb24gdGhhdCB0YWdzIHRoZSByZWNlbnRseSBwdWJsaXNoZWQgbWFqb3IgYXMgbGF0ZXN0IHdpdGhpbiB0aGUgTlBNXG4gKiByZWdpc3RyeS4gTWFqb3IgdmVyc2lvbnMgYXJlIHB1Ymxpc2hlZCB0byB0aGUgYG5leHRgIE5QTSBkaXN0IHRhZyBpbml0aWFsbHkgYW5kXG4gKiBjYW4gYmUgcmUtdGFnZ2VkIHRvIHRoZSBgbGF0ZXN0YCBOUE0gZGlzdCB0YWcuIFRoaXMgYWxsb3dzIGNhcmV0YWtlcnMgdG8gbWFrZSBtYWpvclxuICogcmVsZWFzZXMgYXZhaWxhYmxlIGF0IHRoZSBzYW1lIHRpbWUuIGUuZy4gRnJhbWV3b3JrLCBUb29saW5nIGFuZCBDb21wb25lbnRzXG4gKiBhcmUgYWJsZSB0byBwdWJsaXNoIHYxMiB0byBgQGxhdGVzdGAgYXQgdGhlIHNhbWUgdGltZS4gVGhpcyB3b3VsZG4ndCBiZSBwb3NzaWJsZSBpZlxuICogd2UgZGlyZWN0bHkgcHVibGlzaCB0byBgQGxhdGVzdGAgYmVjYXVzZSBUb29saW5nIGFuZCBDb21wb25lbnRzIG5lZWRzIHRvIHdhaXRcbiAqIGZvciB0aGUgbWFqb3IgZnJhbWV3b3JrIHJlbGVhc2UgdG8gYmUgYXZhaWxhYmxlIG9uIE5QTS5cbiAqIEBzZWUge0N1dFN0YWJsZUFjdGlvbiNwZXJmb3JtfSBmb3IgbW9yZSBkZXRhaWxzLlxuICovXG5leHBvcnQgY2xhc3MgVGFnUmVjZW50TWFqb3JBc0xhdGVzdCBleHRlbmRzIFJlbGVhc2VBY3Rpb24ge1xuICBvdmVycmlkZSBhc3luYyBnZXREZXNjcmlwdGlvbigpIHtcbiAgICByZXR1cm4gYFJldGFnIHJlY2VudGx5IHB1Ymxpc2hlZCBtYWpvciB2JHt0aGlzLmFjdGl2ZS5sYXRlc3QudmVyc2lvbn0gYXMgXCJsYXRlc3RcIiBpbiBOUE0uYDtcbiAgfVxuXG4gIG92ZXJyaWRlIGFzeW5jIHBlcmZvcm0oKSB7XG4gICAgYXdhaXQgdGhpcy51cGRhdGVHaXRodWJSZWxlYXNlRW50cnlUb1N0YWJsZSh0aGlzLmFjdGl2ZS5sYXRlc3QudmVyc2lvbik7XG4gICAgYXdhaXQgdGhpcy5jaGVja291dFVwc3RyZWFtQnJhbmNoKHRoaXMuYWN0aXZlLmxhdGVzdC5icmFuY2hOYW1lKTtcbiAgICBhd2FpdCB0aGlzLmluc3RhbGxEZXBlbmRlbmNpZXNGb3JDdXJyZW50QnJhbmNoKCk7XG4gICAgYXdhaXQgRXh0ZXJuYWxDb21tYW5kcy5pbnZva2VTZXROcG1EaXN0KFxuICAgICAgdGhpcy5wcm9qZWN0RGlyLFxuICAgICAgJ2xhdGVzdCcsXG4gICAgICB0aGlzLmFjdGl2ZS5sYXRlc3QudmVyc2lvbixcbiAgICAgIHRoaXMucG5wbVZlcnNpb25pbmcsXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBHaXRodWIgcmVsZWFzZSBlbnRyeSBmb3IgdGhlIHNwZWNpZmllZCB2ZXJzaW9uIHRvIHNob3dcbiAgICogaXQgYXMgc3RhYmxlIHJlbGVhc2UsIGNvbXBhcmVkIHRvIGl0IGJlaW5nIHNob3duIGFzIGEgcHJlLXJlbGVhc2UuXG4gICAqL1xuICBhc3luYyB1cGRhdGVHaXRodWJSZWxlYXNlRW50cnlUb1N0YWJsZSh2ZXJzaW9uOiBzZW12ZXIuU2VtVmVyKSB7XG4gICAgY29uc3QgcmVsZWFzZVRhZ05hbWUgPSBnZXRSZWxlYXNlVGFnRm9yVmVyc2lvbih2ZXJzaW9uKTtcbiAgICBjb25zdCB7ZGF0YTogcmVsZWFzZUluZm99ID0gYXdhaXQgdGhpcy5naXQuZ2l0aHViLnJlcG9zLmdldFJlbGVhc2VCeVRhZyh7XG4gICAgICAuLi50aGlzLmdpdC5yZW1vdGVQYXJhbXMsXG4gICAgICB0YWc6IHJlbGVhc2VUYWdOYW1lLFxuICAgIH0pO1xuXG4gICAgYXdhaXQgdGhpcy5naXQuZ2l0aHViLnJlcG9zLnVwZGF0ZVJlbGVhc2Uoe1xuICAgICAgLi4udGhpcy5naXQucmVtb3RlUGFyYW1zLFxuICAgICAgcmVsZWFzZV9pZDogcmVsZWFzZUluZm8uaWQsXG4gICAgICBwcmVyZWxlYXNlOiBmYWxzZSxcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBvdmVycmlkZSBhc3luYyBpc0FjdGl2ZSh7bGF0ZXN0fTogQWN0aXZlUmVsZWFzZVRyYWlucywgY29uZmlnOiBSZWxlYXNlQ29uZmlnKSB7XG4gICAgLy8gSWYgdGhlIGxhdGVzdCByZWxlYXNlLXRyYWluIGRvZXMgY3VycmVudGx5IG5vdCBoYXZlIGEgbWFqb3IgdmVyc2lvbiBhcyB2ZXJzaW9uLiBlLmcuXG4gICAgLy8gdGhlIGxhdGVzdCBicmFuY2ggaXMgYDEwLjAueGAgd2l0aCB0aGUgdmVyc2lvbiBiZWluZyBgMTAuMC4yYC4gSW4gc3VjaCBjYXNlcywgYSBtYWpvclxuICAgIC8vIGhhcyBub3QgYmVlbiByZWxlYXNlZCByZWNlbnRseSwgYW5kIHRoaXMgYWN0aW9uIHNob3VsZCBuZXZlciBiZWNvbWUgYWN0aXZlLlxuICAgIGlmIChsYXRlc3QudmVyc2lvbi5taW5vciAhPT0gMCB8fCBsYXRlc3QudmVyc2lvbi5wYXRjaCAhPT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IHBhY2thZ2VJbmZvID0gYXdhaXQgZmV0Y2hQcm9qZWN0TnBtUGFja2FnZUluZm8oY29uZmlnKTtcbiAgICBjb25zdCBucG1MYXRlc3RWZXJzaW9uID0gc2VtdmVyLnBhcnNlKHBhY2thZ2VJbmZvWydkaXN0LXRhZ3MnXVsnbGF0ZXN0J10pO1xuICAgIC8vIFRoaXMgYWN0aW9uIG9ubHkgYmVjb21lcyBhY3RpdmUgaWYgYSBtYWpvciBqdXN0IGhhcyBiZWVuIHJlbGVhc2VkIHJlY2VudGx5LCBidXQgaXNcbiAgICAvLyBub3Qgc2V0IHRvIHRoZSBgbGF0ZXN0YCBOUE0gZGlzdCB0YWcgaW4gdGhlIE5QTSByZWdpc3RyeS4gTm90ZSB0aGF0IHdlIG9ubHkgYWxsb3dcbiAgICAvLyByZS10YWdnaW5nIGlmIHRoZSBjdXJyZW50IGBAbGF0ZXN0YCBpbiBOUE0gaXMgdGhlIHByZXZpb3VzIG1ham9yIHZlcnNpb24uXG4gICAgcmV0dXJuIG5wbUxhdGVzdFZlcnNpb24gIT09IG51bGwgJiYgbnBtTGF0ZXN0VmVyc2lvbi5tYWpvciA9PT0gbGF0ZXN0LnZlcnNpb24ubWFqb3IgLSAxO1xuICB9XG59XG4iXX0=