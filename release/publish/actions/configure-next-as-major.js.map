{"version":3,"file":"configure-next-as-major.js","sourceRoot":"","sources":["configure-next-as-major.ts"],"names":[],"mappings":"AAQA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAE5B,OAAO,EAAC,KAAK,EAAE,GAAG,EAAC,MAAM,2BAA2B,CAAC;AACrD,OAAO,EAAC,gCAAgC,EAAC,MAAM,6BAA6B,CAAC;AAE7E,OAAO,EAAC,aAAa,EAAC,MAAM,eAAe,CAAC;AAC5C,OAAO,EAAC,wCAAwC,EAAC,MAAM,sBAAsB,CAAC;AAC9E,OAAO,EAAC,qBAAqB,EAAC,MAAM,wCAAwC,CAAC;AAC7E,OAAO,EAAC,uBAAuB,EAAC,MAAM,kCAAkC,CAAC;AAOzE,MAAM,OAAO,0BAA2B,SAAQ,aAAa;IAA7D;;QACU,gBAAW,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC,aAAa,CAAE,CAAC;IAyC1F,CAAC;IAvCU,KAAK,CAAC,cAAc;QAC3B,MAAM,EAAC,UAAU,EAAC,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QACtC,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;QACpC,OAAO,kBAAkB,UAAU,sCAAsC,UAAU,IAAI,CAAC;IAC1F,CAAC;IAEQ,KAAK,CAAC,OAAO;QACpB,MAAM,EAAC,UAAU,EAAC,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QACtC,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;QACpC,MAAM,EAAC,GAAG,EAAE,gBAAgB,EAAC,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAC;QAE/E,MAAM,IAAI,CAAC,yBAAyB,CAAC,gBAAgB,EAAE,UAAU,CAAC,CAAC;QACnE,MAAM,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;QAC9C,MAAM,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;QAE5C,MAAM,IAAI,CAAC,YAAY,CAAC,wCAAwC,CAAC,UAAU,CAAC,EAAE;YAC5E,gCAAgC;YAChC,GAAG,IAAI,CAAC,kBAAkB,EAAE;SAC7B,CAAC,CAAC;QACH,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,qCAAqC,CAClE,UAAU,EACV,wBAAwB,UAAU,EAAE,EACpC,uDAAuD,UAAU,EAAE,CACpE,CAAC;QAEF,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,yDAAyD,CAAC,CAAC,CAAC;QAE3E,MAAM,IAAI,CAAC,iCAAiC,CAAC,WAAW,CAAC,CAAC;IAC5D,CAAC;IAED,MAAM,CAAU,KAAK,CAAC,QAAQ,CAAC,MAA2B,EAAE,MAAqB;QAG/E,OAAO,CACL,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO;YACpB,qBAAqB,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;YAC1C,CAAC,CAAC,MAAM,uBAAuB,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAC9D,CAAC;IACJ,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport semver from 'semver';\n\nimport {green, Log} from '../../../utils/logging.js';\nimport {workspaceRelativePackageJsonPath} from '../../../utils/constants.js';\nimport {ActiveReleaseTrains} from '../../versioning/active-release-trains.js';\nimport {ReleaseAction} from '../actions.js';\nimport {getCommitMessageForNextBranchMajorSwitch} from '../commit-message.js';\nimport {isFirstNextPrerelease} from '../../versioning/prerelease-version.js';\nimport {isVersionPublishedToNpm} from '../../versioning/npm-registry.js';\nimport {ReleaseConfig} from '../../config/index.js';\n\n/**\n * Release action that configures the active next release-train to be for a major\n * version. This means that major changes can land in the next branch.\n */\nexport class ConfigureNextAsMajorAction extends ReleaseAction {\n  private _newVersion = semver.parse(`${this.active.next.version.major + 1}.0.0-next.0`)!;\n\n  override async getDescription() {\n    const {branchName} = this.active.next;\n    const newVersion = this._newVersion;\n    return `Configure the \"${branchName}\" branch to be released as major (v${newVersion}).`;\n  }\n\n  override async perform() {\n    const {branchName} = this.active.next;\n    const newVersion = this._newVersion;\n    const {sha: beforeStagingSha} = await this.getLatestCommitOfBranch(branchName);\n\n    await this.assertPassingGithubStatus(beforeStagingSha, branchName);\n    await this.checkoutUpstreamBranch(branchName);\n    await this.updateProjectVersion(newVersion);\n\n    await this.createCommit(getCommitMessageForNextBranchMajorSwitch(newVersion), [\n      workspaceRelativePackageJsonPath,\n      ...this.getAspectLockFiles(),\n    ]);\n    const pullRequest = await this.pushChangesToForkAndCreatePullRequest(\n      branchName,\n      `switch-next-to-major-${newVersion}`,\n      `Configure next branch to receive major changes for v${newVersion}`,\n    );\n\n    Log.info(green('  âœ“   Next branch update pull request has been created.'));\n\n    await this.promptAndWaitForPullRequestMerged(pullRequest);\n  }\n\n  static override async isActive(active: ActiveReleaseTrains, config: ReleaseConfig) {\n    // The `next` branch can be switched to a major version, unless it already\n    // is targeting a new major, or if pre-releases have already started.\n    return (\n      !active.next.isMajor &&\n      isFirstNextPrerelease(active.next.version) &&\n      !(await isVersionPublishedToNpm(active.next.version, config))\n    );\n  }\n}\n"]}