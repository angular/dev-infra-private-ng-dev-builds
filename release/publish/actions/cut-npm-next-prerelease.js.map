{"version":3,"file":"cut-npm-next-prerelease.js","sourceRoot":"","sources":["cut-npm-next-prerelease.ts"],"names":[],"mappings":"AAUA,OAAO,EAAC,uBAAuB,EAAC,MAAM,kCAAkC,CAAC;AACzE,OAAO,EAAC,qBAAqB,EAAC,MAAM,wCAAwC,CAAC;AAC7E,OAAO,EAAC,uBAAuB,EAAC,MAAM,4BAA4B,CAAC;AAUnE,MAAM,OAAO,0BAA2B,SAAQ,uBAAuB;IAAvE;;QACE,iBAAY,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QAChE,eAAU,GAAG,MAAe,CAAC;QAE7B,6BAAwB,GAAG,CAAC,KAAK,IAAI,EAAE;YAMrC,IAAI,IAAI,CAAC,YAAY,KAAK,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC;gBAC9F,OAAO,CAAC,CAAC,MAAM,uBAAuB,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACjF,CAAC;YACD,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,EAAE,CAAC;QAEL,+BAA0B,GAA2B,CAAC,KAAK,IAAI,EAAE;YAM/D,IAAI,IAAI,CAAC,YAAY,KAAK,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,wBAAwB,CAAC,EAAE,CAAC;gBACpF,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC;YACpC,CAAC;YACD,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;QACnC,CAAC,CAAC,EAAE,CAAC;IAOP,CAAC;IALC,MAAM,CAAU,KAAK,CAAC,QAAQ,CAAC,OAA4B;QAGzD,OAAO,IAAI,CAAC;IACd,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport semver from 'semver';\nimport {ActiveReleaseTrains} from '../../versioning/active-release-trains.js';\nimport {isVersionPublishedToNpm} from '../../versioning/npm-registry.js';\nimport {isFirstNextPrerelease} from '../../versioning/prerelease-version.js';\nimport {CutPrereleaseBaseAction} from './shared/cut-prerelease.js';\n\n/**\n * Release action that allows NPM `@next` pre-releases. The action will\n * always be active and operate on the an ongoing FF/RC train, or the\n * next release-train.\n *\n * The action will bump the pre-release version to the next increment\n * and publish it to NPM along with the `@npm` dist tag.\n */\nexport class CutNpmNextPrereleaseAction extends CutPrereleaseBaseAction {\n  releaseTrain = this.active.releaseCandidate ?? this.active.next;\n  npmDistTag = 'next' as const;\n\n  shouldUseExistingVersion = (async () => {\n    // Special-case where the version in the `next` release-train is not published yet. This\n    // happens when we recently branched off for feature-freeze. We already bump the version to\n    // the next minor or major, but do not publish immediately. Cutting a release immediately\n    // would be not helpful as there are no other changes than in the feature-freeze branch. If\n    // we happen to detect this case, we stage the release as usual but do not increment the version.\n    if (this.releaseTrain === this.active.next && isFirstNextPrerelease(this.active.next.version)) {\n      return !(await isVersionPublishedToNpm(this.active.next.version, this.config));\n    }\n    return false;\n  })();\n\n  releaseNotesCompareVersion: Promise<semver.SemVer> = (async () => {\n    // If we happen to detect the case from above, we use the most recent patch version as base\n    // for building release notes. This is better than finding the \"next\" version when we\n    // branched off as it also prevents us from duplicating many commits that have already\n    // landed in the new patch that was worked on when we branched off.\n    // For more details see the release notes generation and commit range determination.\n    if (this.releaseTrain === this.active.next && (await this.shouldUseExistingVersion)) {\n      return this.active.latest.version;\n    }\n    return this.releaseTrain.version;\n  })();\n\n  static override async isActive(_active: ActiveReleaseTrains) {\n    // Pre-releases for the `next` NPM dist tag can always be cut. A NPM next\n    // release could always either occur for an in-progress FF/RCm, or `next`.\n    return true;\n  }\n}\n"]}