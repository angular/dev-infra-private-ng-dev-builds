{"version":3,"file":"pull-request-state.js","sourceRoot":"","sources":["pull-request-state.ts"],"names":[],"mappings":"AAyBA,MAAM,CAAC,KAAK,UAAU,mBAAmB,CAAC,GAAc,EAAE,EAAU;IAClE,MAAM,EAAC,IAAI,EAAC,GAAG,MAAM,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,EAAC,GAAG,GAAG,CAAC,YAAY,EAAE,WAAW,EAAE,EAAE,EAAC,CAAC,CAAC;IAClF,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;QAChB,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO,MAAM,uCAAuC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;AAChE,CAAC;AAQD,KAAK,UAAU,uCAAuC,CAAC,GAAc,EAAE,EAAU;IAC/E,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE;QACrE,GAAG,GAAG,CAAC,YAAY;QACnB,YAAY,EAAE,EAAE;KACjB,CAAC,CAAC;IAKH,KAAK,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;QAC5C,MAAM,EAAC,KAAK,EAAE,SAAS,EAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QAGrC,IAAI,KAAK,KAAK,UAAU,EAAE,CAAC;YACzB,OAAO,KAAK,CAAC;QACf,CAAC;QAGD,IAAI,KAAK,KAAK,QAAQ,IAAI,SAAS,EAAE,CAAC;YACpC,OAAO,IAAI,CAAC;QACd,CAAC;QAMD,IACE,KAAK,KAAK,YAAY;YACtB,SAAS;YACT,CAAC,MAAM,0BAA0B,CAAC,GAAG,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC,EACtD,CAAC;YACD,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAGD,KAAK,UAAU,0BAA0B,CAAC,GAAc,EAAE,GAAW,EAAE,EAAU;IAC/E,MAAM,EAAC,IAAI,EAAC,GAAG,MAAM,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,EAAC,GAAG,GAAG,CAAC,YAAY,EAAE,GAAG,EAAE,GAAG,EAAC,CAAC,CAAC;IAGjF,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAC9B,IAAI,MAAM,CAAC,gDAAgD,EAAE,SAAS,EAAE,GAAG,CAAC,CAC7E,CAAC;AACJ,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {GitClient} from '../../utils/git/git-client.js';\n\n/** State of a pull request in Github. */\nexport type PullRequestState = 'merged' | 'unknown';\n\n/**\n * Gets whether a given pull request has been merged.\n *\n * Note: There are situations where GitHub still processes the merging or\n * closing action and temporarily this function would return `false`. Make\n * sure to account for this when logic relies on this method.\n *\n * More details here: https://github.com/angular/angular/pull/40181.\n *\n * @throws May throw Github API request errors if e.g. a pull request\n *   cannot be found, or the repository is not existing/visible.\n */\nexport async function isPullRequestMerged(api: GitClient, id: number): Promise<boolean> {\n  const {data} = await api.github.pulls.get({...api.remoteParams, pull_number: id});\n  if (data.merged) {\n    return true;\n  }\n  return await isPullRequestClosedWithAssociatedCommit(api, id);\n}\n\n/**\n * Whether the pull request has been closed with an associated commit. This is usually\n * the case if a PR has been merged using the autosquash merge script strategy. Since\n * the merge is not fast-forward, Github does not consider the PR as merged and instead\n * shows the PR as closed. See for example: https://github.com/angular/angular/pull/37918.\n */\nasync function isPullRequestClosedWithAssociatedCommit(api: GitClient, id: number) {\n  const events = await api.github.paginate(api.github.issues.listEvents, {\n    ...api.remoteParams,\n    issue_number: id,\n  });\n  // Iterate through the events of the pull request in reverse. We want to find the most\n  // recent events and check if the PR has been closed with a commit associated with it.\n  // If the PR has been closed through a commit, we assume that the PR has been merged\n  // using the autosquash merge strategy. For more details. See the `AutosquashMergeStrategy`.\n  for (let i = events.length - 1; i >= 0; i--) {\n    const {event, commit_id} = events[i];\n    // If we come across a \"reopened\" event, we abort looking for referenced commits. Any\n    // commits that closed the PR before, are no longer relevant and did not close the PR.\n    if (event === 'reopened') {\n      return false;\n    }\n    // If a `closed` event is captured with a commit assigned, then we assume that\n    // this PR has been merged properly.\n    if (event === 'closed' && commit_id) {\n      return true;\n    }\n    // If the PR has been referenced by a commit, check if the commit closes this pull\n    // request. Note that this is needed besides checking `closed` as PRs could be merged\n    // into any non-default branch where the `Closes <..>` keyword does not work and the PR\n    // is simply closed without an associated `commit_id`. For more details see:\n    // https://docs.github.com/en/enterprise/2.16/user/github/managing-your-work-on-github/closing-issues-using-keywords#:~:text=non-default.\n    if (\n      event === 'referenced' &&\n      commit_id &&\n      (await isCommitClosingPullRequest(api, commit_id, id))\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/** Checks whether the specified commit is closing the given pull request. */\nasync function isCommitClosingPullRequest(api: GitClient, sha: string, id: number) {\n  const {data} = await api.github.repos.getCommit({...api.remoteParams, ref: sha});\n  // Matches the closing keyword supported in commit messages. See:\n  // https://docs.github.com/en/enterprise/2.16/user/github/managing-your-work-on-github/closing-issues-using-keywords.\n  return data.commit.message.match(\n    new RegExp(`(?:close[sd]?|fix(?:e[sd]?)|resolve[sd]?):? #${id}(?!\\\\d)`, 'i'),\n  );\n}\n"]}