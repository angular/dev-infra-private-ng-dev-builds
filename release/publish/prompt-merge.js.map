{"version":3,"file":"prompt-merge.js","sourceRoot":"","sources":["prompt-merge.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AuthenticatedGitClient} from '../../utils/git/authenticated-git-client.js';\nimport {bold, green, Log} from '../../utils/logging.js';\nimport {isGithubApiError} from '../../utils/git/github.js';\n\nimport {PullRequest} from './actions.js';\nimport {isPullRequestMerged} from './pull-request-state.js';\nimport {Prompt} from '../../utils/prompt.js';\n\n/**\n * Prints the pull request to the console and informs the user about\n * the process of getting the pull request merged.\n *\n * The user will then be prompted, allowing the user to initiate the\n * merging. The tool will then attempt to merge the pull request\n * automatically.\n */\nexport async function promptToInitiatePullRequestMerge(\n  git: AuthenticatedGitClient,\n  {id, url}: PullRequest,\n): Promise<void> {\n  Log.info();\n  Log.info();\n  Log.info(green(bold(`      Pull request #${id} is sent out for review: ${url}`)));\n  Log.warn(bold(`      Do not merge it manually. The tool will automatically merge it.`));\n  Log.info('');\n  Log.warn(`      The tool is ${bold('not')} ensuring that all tests pass. Branch protection`);\n  Log.warn('      rules always apply, but other non-required checks can be skipped.');\n  Log.info('');\n  Log.info(`      If you think it is ready (i.e. has the necessary approvals), you can continue`);\n  Log.info(`      by confirming the prompt. The tool will then auto-merge the PR if possible.`);\n  Log.info('');\n\n  // We will loop forever until the PR has been merged. If a user wants to abort,\n  // the script needs to be aborted e.g. using CTRL + C.\n  while (true) {\n    if (!(await Prompt.confirm({message: `Do you want to continue with merging PR #${id}?`}))) {\n      continue;\n    }\n\n    Log.info(`      Attempting to merge pull request #${id}..`);\n    Log.info(``);\n\n    try {\n      // Special logic that will check if the pull request is already merged. This should never\n      // happen but there may be situations where a caretaker merged manually. We wouldn't want\n      // the process to stuck forever here but continue given the caretaker explicitly confirming\n      // that they would like to continue (assuming they expect the PR to be recognized as merged).\n      if (await gracefulCheckIfPullRequestIsMerged(git, id)) {\n        break;\n      }\n\n      const {data, status, headers} = await git.github.pulls.merge({\n        ...git.remoteParams,\n        pull_number: id,\n        merge_method: 'rebase',\n      });\n\n      // If merge is successful, break out of the loop and complete the function.\n      if (data.merged) {\n        break;\n      }\n\n      // Octokit throws for non-200 status codes, but there may be unknown cases\n      // where `merged` is false but we have a 200 status code. We handle this here\n      // and allow for the merge to be re-attempted.\n      Log.error(`  ✘   Pull request #${id} could not be merged.`);\n      Log.error(`      ${data.message} (${status})`);\n      Log.debug(data, status, headers);\n    } catch (e) {\n      if (!isGithubApiError(e)) {\n        throw e;\n      }\n\n      // If there is an request error, e.g. 403 permissions or insufficient permissions\n      // due to active branch protections, then we want to print the message and allow\n      // for the user to re-attempt the merge (by continuing in the loop).\n      Log.error(`  ✘   Pull request #${id} could not be merged.`);\n      Log.error(`      ${e.message} (${e.status})`);\n      Log.debug(e);\n    }\n  }\n\n  Log.info(green(`  ✓   Pull request #${id} has been merged.`));\n}\n\n/** Gracefully checks whether the given pull request has been merged. */\nasync function gracefulCheckIfPullRequestIsMerged(\n  git: AuthenticatedGitClient,\n  id: number,\n): Promise<boolean> {\n  try {\n    return await isPullRequestMerged(git, id);\n  } catch (e) {\n    if (isGithubApiError(e)) {\n      Log.debug(`Unable to determine if pull request #${id} has been merged.`);\n      Log.debug(e);\n      return false;\n    }\n    throw e;\n  }\n}\n"]}