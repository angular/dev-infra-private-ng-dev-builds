{"version":3,"file":"cli.js","sourceRoot":"","sources":["cli.ts"],"names":[],"mappings":"AAcA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAG5B,OAAO,EAAC,6BAA6B,EAAC,MAAM,YAAY,CAAC;AACzD,OAAO,EAAC,SAAS,EAAC,MAAM,uBAAuB,CAAC;AAChD,OAAO,EAAC,8BAA8B,EAAC,MAAM,wCAAwC,CAAC;AACtF,OAAO,EAAC,wBAAwB,EAAuB,MAAM,oBAAoB,CAAC;AAClF,OAAO,EAAC,GAAG,EAAC,MAAM,wBAAwB,CAAC;AAiB3C,KAAK,UAAU,OAAO;IAIpB,MAAM,KAAK,GAAG,MAAM,8BAA8B,EAAE,CAAC;IACrD,MAAM,MAAM,GAAG,MAAM,SAAS,EAAE,CAAC;IACjC,wBAAwB,CAAC,MAAM,CAAC,CAAC;IAGjC,MAAM,EAAC,qBAAqB,EAAE,UAAU,EAAE,aAAa,EAAC,GAAG,IAAI,CAAC,KAAK,CACnE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CACK,CAAC;IAE9B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,qBAAqB,CAAC,EAAE,CAAC;QAC1C,GAAG,CAAC,KAAK,CAAC,+EAA+E,CAAC,CAAC;QAC3F,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC;QACrB,OAAO;IACT,CAAC;IAED,MAAM,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IAC/C,IAAI,UAAU,KAAK,IAAI,EAAE,CAAC;QACxB,GAAG,CAAC,KAAK,CAAC,oEAAoE,CAAC,CAAC;QAChF,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC;QACrB,OAAO;IACT,CAAC;IAED,IAAI,CAAC,CAAC,MAAM,6BAA6B,CAAC,MAAM,CAAC,OAAO,EAAE,UAAU,EAAE,qBAAqB,CAAC,CAAC,EAAE,CAAC;QAC9F,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC;IACvB,CAAC;AACH,CAAC;AAGD,MAAM,CAAC,MAAM,4BAA4B,GAA0B;IACjE,OAAO;IACP,OAAO,EAAE,UAAU;IACnB,QAAQ,EAAE,KAAK;CAChB,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// ---- **IMPORTANT** ----\n// This command is part of our external commands invoked by the release publish\n// command. Before making changes, keep in mind that more recent `ng-dev` versions\n// can still invoke this command.\n// ------------------------\n\nimport semver from 'semver';\nimport {CommandModule} from 'yargs';\n\nimport {assertPassingReleasePrechecks} from './index.js';\nimport {getConfig} from '../../utils/config.js';\nimport {readBufferFromStdinUntilClosed} from '../../utils/read-stdin-until-closed.js';\nimport {assertValidReleaseConfig, BuiltPackageWithInfo} from '../config/index.js';\nimport {Log} from '../../utils/logging.js';\n\n/**\n * Type describing the JSON stdin input of this command. The release tool will\n * deliver this information through `stdin` because command line arguments are\n * less reliable and have max-length limits.\n *\n * @important When changing this, make sure the release action\n *   invocation is updated as well.\n */\nexport interface ReleasePrecheckJsonStdin {\n  /** Package output that has been built and can be checked. */\n  builtPackagesWithInfo: BuiltPackageWithInfo[];\n  /** New version that is intended to be released. */\n  newVersion: string;\n}\n\nasync function handler() {\n  // Note: Stdin input is buffered until we start reading from it. This allows us to\n  // asynchronously start reading the `stdin` input. With the default `readableFlowing`\n  // value of `null`, data is buffered. See: https://nodejs.org/api/stream.html#three-states.\n  const stdin = await readBufferFromStdinUntilClosed();\n  const config = await getConfig();\n  assertValidReleaseConfig(config);\n\n  // Parse the JSON metadata read from `stdin`.\n  const {builtPackagesWithInfo, newVersion: newVersionRaw} = JSON.parse(\n    stdin.toString('utf8'),\n  ) as ReleasePrecheckJsonStdin;\n\n  if (!Array.isArray(builtPackagesWithInfo)) {\n    Log.error(`  ✘   Release pre-checks failed. Invalid list of built packages was provided.`);\n    process.exitCode = 1;\n    return;\n  }\n\n  const newVersion = semver.parse(newVersionRaw);\n  if (newVersion === null) {\n    Log.error(`  ✘   Release pre-checks failed. Invalid new version was provided.`);\n    process.exitCode = 1;\n    return;\n  }\n\n  if (!(await assertPassingReleasePrechecks(config.release, newVersion, builtPackagesWithInfo))) {\n    process.exitCode = 1;\n  }\n}\n\n/** CLI command module for running checks before releasing. */\nexport const ReleasePrecheckCommandModule: CommandModule<{}, {}> = {\n  handler,\n  command: 'precheck',\n  describe: false,\n};\n"]}