{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"AAQA,OAAO,EAAC,KAAK,EAAC,MAAM,SAAS,CAAC;AAE9B,OAAO,EAAC,KAAK,EAAE,GAAG,EAAC,MAAM,wBAAwB,CAAC;AAOlD,MAAM,OAAO,oBAAqB,SAAQ,KAAK;CAAG;AAQlD,MAAM,CAAC,KAAK,UAAU,6BAA6B,CACjD,MAAqB,EACrB,UAAwB,EACxB,qBAA6C;IAE7C,IAAI,MAAM,CAAC,eAAe,KAAK,SAAS,EAAE,CAAC;QACzC,GAAG,CAAC,IAAI,CAAC,0DAA0D,CAAC,CAAC;QACrE,OAAO,IAAI,CAAC;IACd,CAAC;IAID,IAAI,CAAC;QAIH,MAAM,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,MAAM,EAAE,EAAE,qBAAqB,CAAC,CAAC;QACzE,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,mCAAmC,CAAC,CAAC,CAAC;QACrD,OAAO,IAAI,CAAC;IACd,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,IAAI,CAAC,YAAY,oBAAoB,EAAE,CAAC;YAEtC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;YACjB,GAAG,CAAC,KAAK,CAAC,iEAAiE,CAAC,CAAC;QAC/E,CAAC;aAAM,CAAC;YACN,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YACnB,GAAG,CAAC,KAAK,CAAC,iEAAiE,CAAC,CAAC;QAC/E,CAAC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {debug} from 'console';\nimport yargs from 'semver';\nimport {green, Log} from '../../utils/logging.js';\nimport {BuiltPackageWithInfo, ReleaseConfig} from '../config/index.js';\n\n/**\n * Error class that can be used to report precheck failures. Messaging with\n * respect to the pre-check error is required to be handled manually.\n */\nexport class ReleasePrecheckError extends Error {}\n\n/**\n * Runs the release prechecks and checks whether they are passing for the\n * specified release config, intended new version and built release packages.\n *\n * @returns A boolean that indicates whether the prechecks are passing or not.\n */\nexport async function assertPassingReleasePrechecks(\n  config: ReleaseConfig,\n  newVersion: yargs.SemVer,\n  builtPackagesWithInfo: BuiltPackageWithInfo[],\n): Promise<boolean> {\n  if (config.prereleaseCheck === undefined) {\n    Log.warn('  ⚠   Skipping release pre-checks. No checks configured.');\n    return true;\n  }\n\n  // The user-defined release precheck function is supposed to throw errors upon unmet\n  // checks. We catch this here and print a better message and determine the status.\n  try {\n    // Note: We do not pass the `SemVer` instance to the user-customizable precheck\n    // function. This is because we bundled our version of `semver` and the version\n    // used in the precheck logic might be different, causing unexpected issues.\n    await config.prereleaseCheck(newVersion.format(), builtPackagesWithInfo);\n    Log.info(green('  ✓   Release pre-checks passing.'));\n    return true;\n  } catch (e) {\n    if (e instanceof ReleasePrecheckError) {\n      // Note: Error messaging is expected to be handled manually.\n      debug(e.message);\n      Log.error(`  ✘   Release pre-checks failed. Please check the output above.`);\n    } else {\n      Log.error(e, '\\n');\n      Log.error(`  ✘   Release pre-checks errored with unexpected runtime error.`);\n    }\n\n    return false;\n  }\n}\n"]}