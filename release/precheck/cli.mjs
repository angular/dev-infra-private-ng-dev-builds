/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// ---- **IMPORTANT** ----
// This command is part of our external commands invoked by the release publish
// command. Before making changes, keep in mind that more recent `ng-dev` versions
// can still invoke this command.
// ------------------------
import semver from 'semver';
import { assertPassingReleasePrechecks } from './index.js';
import { getConfig } from '../../utils/config.js';
import { readBufferFromStdinUntilClosed } from '../../utils/read-stdin-until-closed.js';
import { assertValidReleaseConfig } from '../config/index.js';
import { Log } from '../../utils/logging.js';
async function handler() {
    // Note: Stdin input is buffered until we start reading from it. This allows us to
    // asynchronously start reading the `stdin` input. With the default `readableFlowing`
    // value of `null`, data is buffered. See: https://nodejs.org/api/stream.html#three-states.
    const stdin = await readBufferFromStdinUntilClosed();
    const config = await getConfig();
    assertValidReleaseConfig(config);
    // Parse the JSON metadata read from `stdin`.
    const { builtPackagesWithInfo, newVersion: newVersionRaw } = JSON.parse(stdin.toString('utf8'));
    if (!Array.isArray(builtPackagesWithInfo)) {
        Log.error(`  ✘   Release pre-checks failed. Invalid list of built packages was provided.`);
        process.exitCode = 1;
        return;
    }
    const newVersion = semver.parse(newVersionRaw);
    if (newVersion === null) {
        Log.error(`  ✘   Release pre-checks failed. Invalid new version was provided.`);
        process.exitCode = 1;
        return;
    }
    if (!(await assertPassingReleasePrechecks(config.release, newVersion, builtPackagesWithInfo))) {
        process.exitCode = 1;
    }
}
/** CLI command module for running checks before releasing. */
export const ReleasePrecheckCommandModule = {
    handler,
    command: 'precheck',
    describe: false,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbmctZGV2L3JlbGVhc2UvcHJlY2hlY2svY2xpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILDBCQUEwQjtBQUMxQiwrRUFBK0U7QUFDL0Usa0ZBQWtGO0FBQ2xGLGlDQUFpQztBQUNqQywyQkFBMkI7QUFFM0IsT0FBTyxNQUFNLE1BQU0sUUFBUSxDQUFDO0FBRzVCLE9BQU8sRUFBQyw2QkFBNkIsRUFBQyxNQUFNLFlBQVksQ0FBQztBQUN6RCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDaEQsT0FBTyxFQUFDLDhCQUE4QixFQUFDLE1BQU0sd0NBQXdDLENBQUM7QUFDdEYsT0FBTyxFQUFDLHdCQUF3QixFQUF1QixNQUFNLG9CQUFvQixDQUFDO0FBQ2xGLE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQWlCM0MsS0FBSyxVQUFVLE9BQU87SUFDcEIsa0ZBQWtGO0lBQ2xGLHFGQUFxRjtJQUNyRiwyRkFBMkY7SUFDM0YsTUFBTSxLQUFLLEdBQUcsTUFBTSw4QkFBOEIsRUFBRSxDQUFDO0lBQ3JELE1BQU0sTUFBTSxHQUFHLE1BQU0sU0FBUyxFQUFFLENBQUM7SUFDakMsd0JBQXdCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFakMsNkNBQTZDO0lBQzdDLE1BQU0sRUFBQyxxQkFBcUIsRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FDbkUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FDSyxDQUFDO0lBRTlCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLEVBQUUsQ0FBQztRQUMxQyxHQUFHLENBQUMsS0FBSyxDQUFDLCtFQUErRSxDQUFDLENBQUM7UUFDM0YsT0FBTyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7UUFDckIsT0FBTztJQUNULENBQUM7SUFFRCxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQy9DLElBQUksVUFBVSxLQUFLLElBQUksRUFBRSxDQUFDO1FBQ3hCLEdBQUcsQ0FBQyxLQUFLLENBQUMsb0VBQW9FLENBQUMsQ0FBQztRQUNoRixPQUFPLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztRQUNyQixPQUFPO0lBQ1QsQ0FBQztJQUVELElBQUksQ0FBQyxDQUFDLE1BQU0sNkJBQTZCLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUscUJBQXFCLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDOUYsT0FBTyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDdkIsQ0FBQztBQUNILENBQUM7QUFFRCw4REFBOEQ7QUFDOUQsTUFBTSxDQUFDLE1BQU0sNEJBQTRCLEdBQTBCO0lBQ2pFLE9BQU87SUFDUCxPQUFPLEVBQUUsVUFBVTtJQUNuQixRQUFRLEVBQUUsS0FBSztDQUNoQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTENcbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbi8vIC0tLS0gKipJTVBPUlRBTlQqKiAtLS0tXG4vLyBUaGlzIGNvbW1hbmQgaXMgcGFydCBvZiBvdXIgZXh0ZXJuYWwgY29tbWFuZHMgaW52b2tlZCBieSB0aGUgcmVsZWFzZSBwdWJsaXNoXG4vLyBjb21tYW5kLiBCZWZvcmUgbWFraW5nIGNoYW5nZXMsIGtlZXAgaW4gbWluZCB0aGF0IG1vcmUgcmVjZW50IGBuZy1kZXZgIHZlcnNpb25zXG4vLyBjYW4gc3RpbGwgaW52b2tlIHRoaXMgY29tbWFuZC5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5pbXBvcnQgc2VtdmVyIGZyb20gJ3NlbXZlcic7XG5pbXBvcnQge0NvbW1hbmRNb2R1bGV9IGZyb20gJ3lhcmdzJztcblxuaW1wb3J0IHthc3NlcnRQYXNzaW5nUmVsZWFzZVByZWNoZWNrc30gZnJvbSAnLi9pbmRleC5qcyc7XG5pbXBvcnQge2dldENvbmZpZ30gZnJvbSAnLi4vLi4vdXRpbHMvY29uZmlnLmpzJztcbmltcG9ydCB7cmVhZEJ1ZmZlckZyb21TdGRpblVudGlsQ2xvc2VkfSBmcm9tICcuLi8uLi91dGlscy9yZWFkLXN0ZGluLXVudGlsLWNsb3NlZC5qcyc7XG5pbXBvcnQge2Fzc2VydFZhbGlkUmVsZWFzZUNvbmZpZywgQnVpbHRQYWNrYWdlV2l0aEluZm99IGZyb20gJy4uL2NvbmZpZy9pbmRleC5qcyc7XG5pbXBvcnQge0xvZ30gZnJvbSAnLi4vLi4vdXRpbHMvbG9nZ2luZy5qcyc7XG5cbi8qKlxuICogVHlwZSBkZXNjcmliaW5nIHRoZSBKU09OIHN0ZGluIGlucHV0IG9mIHRoaXMgY29tbWFuZC4gVGhlIHJlbGVhc2UgdG9vbCB3aWxsXG4gKiBkZWxpdmVyIHRoaXMgaW5mb3JtYXRpb24gdGhyb3VnaCBgc3RkaW5gIGJlY2F1c2UgY29tbWFuZCBsaW5lIGFyZ3VtZW50cyBhcmVcbiAqIGxlc3MgcmVsaWFibGUgYW5kIGhhdmUgbWF4LWxlbmd0aCBsaW1pdHMuXG4gKlxuICogQGltcG9ydGFudCBXaGVuIGNoYW5naW5nIHRoaXMsIG1ha2Ugc3VyZSB0aGUgcmVsZWFzZSBhY3Rpb25cbiAqICAgaW52b2NhdGlvbiBpcyB1cGRhdGVkIGFzIHdlbGwuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVsZWFzZVByZWNoZWNrSnNvblN0ZGluIHtcbiAgLyoqIFBhY2thZ2Ugb3V0cHV0IHRoYXQgaGFzIGJlZW4gYnVpbHQgYW5kIGNhbiBiZSBjaGVja2VkLiAqL1xuICBidWlsdFBhY2thZ2VzV2l0aEluZm86IEJ1aWx0UGFja2FnZVdpdGhJbmZvW107XG4gIC8qKiBOZXcgdmVyc2lvbiB0aGF0IGlzIGludGVuZGVkIHRvIGJlIHJlbGVhc2VkLiAqL1xuICBuZXdWZXJzaW9uOiBzdHJpbmc7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIoKSB7XG4gIC8vIE5vdGU6IFN0ZGluIGlucHV0IGlzIGJ1ZmZlcmVkIHVudGlsIHdlIHN0YXJ0IHJlYWRpbmcgZnJvbSBpdC4gVGhpcyBhbGxvd3MgdXMgdG9cbiAgLy8gYXN5bmNocm9ub3VzbHkgc3RhcnQgcmVhZGluZyB0aGUgYHN0ZGluYCBpbnB1dC4gV2l0aCB0aGUgZGVmYXVsdCBgcmVhZGFibGVGbG93aW5nYFxuICAvLyB2YWx1ZSBvZiBgbnVsbGAsIGRhdGEgaXMgYnVmZmVyZWQuIFNlZTogaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9zdHJlYW0uaHRtbCN0aHJlZS1zdGF0ZXMuXG4gIGNvbnN0IHN0ZGluID0gYXdhaXQgcmVhZEJ1ZmZlckZyb21TdGRpblVudGlsQ2xvc2VkKCk7XG4gIGNvbnN0IGNvbmZpZyA9IGF3YWl0IGdldENvbmZpZygpO1xuICBhc3NlcnRWYWxpZFJlbGVhc2VDb25maWcoY29uZmlnKTtcblxuICAvLyBQYXJzZSB0aGUgSlNPTiBtZXRhZGF0YSByZWFkIGZyb20gYHN0ZGluYC5cbiAgY29uc3Qge2J1aWx0UGFja2FnZXNXaXRoSW5mbywgbmV3VmVyc2lvbjogbmV3VmVyc2lvblJhd30gPSBKU09OLnBhcnNlKFxuICAgIHN0ZGluLnRvU3RyaW5nKCd1dGY4JyksXG4gICkgYXMgUmVsZWFzZVByZWNoZWNrSnNvblN0ZGluO1xuXG4gIGlmICghQXJyYXkuaXNBcnJheShidWlsdFBhY2thZ2VzV2l0aEluZm8pKSB7XG4gICAgTG9nLmVycm9yKGAgIOKcmCAgIFJlbGVhc2UgcHJlLWNoZWNrcyBmYWlsZWQuIEludmFsaWQgbGlzdCBvZiBidWlsdCBwYWNrYWdlcyB3YXMgcHJvdmlkZWQuYCk7XG4gICAgcHJvY2Vzcy5leGl0Q29kZSA9IDE7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgbmV3VmVyc2lvbiA9IHNlbXZlci5wYXJzZShuZXdWZXJzaW9uUmF3KTtcbiAgaWYgKG5ld1ZlcnNpb24gPT09IG51bGwpIHtcbiAgICBMb2cuZXJyb3IoYCAg4pyYICAgUmVsZWFzZSBwcmUtY2hlY2tzIGZhaWxlZC4gSW52YWxpZCBuZXcgdmVyc2lvbiB3YXMgcHJvdmlkZWQuYCk7XG4gICAgcHJvY2Vzcy5leGl0Q29kZSA9IDE7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCEoYXdhaXQgYXNzZXJ0UGFzc2luZ1JlbGVhc2VQcmVjaGVja3MoY29uZmlnLnJlbGVhc2UsIG5ld1ZlcnNpb24sIGJ1aWx0UGFja2FnZXNXaXRoSW5mbykpKSB7XG4gICAgcHJvY2Vzcy5leGl0Q29kZSA9IDE7XG4gIH1cbn1cblxuLyoqIENMSSBjb21tYW5kIG1vZHVsZSBmb3IgcnVubmluZyBjaGVja3MgYmVmb3JlIHJlbGVhc2luZy4gKi9cbmV4cG9ydCBjb25zdCBSZWxlYXNlUHJlY2hlY2tDb21tYW5kTW9kdWxlOiBDb21tYW5kTW9kdWxlPHt9LCB7fT4gPSB7XG4gIGhhbmRsZXIsXG4gIGNvbW1hbmQ6ICdwcmVjaGVjaycsXG4gIGRlc2NyaWJlOiBmYWxzZSxcbn07XG4iXX0=