{"version":3,"file":"workflow.js","sourceRoot":"","sources":["workflow.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,YAAY,EAAC,MAAM,8BAA8B,CAAC;AAC1D,OAAO,EAAC,OAAO,EAAC,MAAM,wBAAwB,CAAC;AAG/C,MAAM,CAAC,KAAK,UAAU,eAAe,CAAC,EAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAW;IAChF,MAAM,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC;IAC9B,IAAI,CAAC;QACH,IAAI,OAAO,EAAE,CAAC;YACZ,OAAO,CAAC,MAAM,CAAC,8CAA8C,CAAC,CAAC;YAG/D,MAAM,WAAW,CAAC,OAAO,CAAC,CAAC;YAC3B,OAAO,CAAC,MAAM,CAAC,mCAAmC,CAAC,CAAC;QACtD,CAAC;QAED,OAAO,CAAC,MAAM,CAAC,uBAAuB,IAAI,GAAG,CAAC,CAAC;QAG/C,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC1B,MAAM,WAAW,CAAC,QAAQ,CAAC,CAAC;QAC5B,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAExB,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;QAErC,IAAI,OAAO,EAAE,CAAC;YACZ,OAAO,CAAC,MAAM,CAAC,wCAAwC,CAAC,CAAC;YAEzD,MAAM,WAAW,CAAC,OAAO,CAAC,CAAC;YAC3B,OAAO,CAAC,MAAM,CAAC,8BAA8B,CAAC,CAAC;QACjD,CAAC;QAED,MAAM,OAAO,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;QAE1D,OAAO,CAAC,OAAO,CAAC,GAAG,IAAI,KAAK,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAE7D,OAAO;YACL,IAAI;YACJ,KAAK,EAAE,OAAO,CAAC,QAAQ;SACxB,CAAC;IACJ,CAAC;YAAS,CAAC;QACT,OAAO,CAAC,QAAQ,EAAE,CAAC;IACrB,CAAC;AACH,CAAC;AAMD,KAAK,UAAU,WAAW,CAAC,QAAmB;IAC5C,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACvC,OAAO;IACT,CAAC;IACD,KAAK,IAAI,GAAG,IAAI,QAAQ,EAAE,CAAC;QACzB,MAAM,YAAY,CAAC,IAAI,CAAC,GAAG,EAAE,EAAC,IAAI,EAAE,QAAQ,EAAC,CAAC,CAAC;IACjD,CAAC;AACH,CAAC","sourcesContent":["import {ChildProcess} from '../../utils/child-process.js';\nimport {Spinner} from '../../utils/spinner.js';\nimport {Workflow} from './loader.js';\n\nexport async function measureWorkflow({name, workflow, prepare, cleanup}: Workflow) {\n  const spinner = new Spinner();\n  try {\n    if (prepare) {\n      spinner.update('Preparing environment for workflow execution');\n      // Run the `prepare` commands to establish the environment, caching, etc prior to running the\n      // workflow.\n      await runCommands(prepare);\n      spinner.update('Environment preperation completed');\n    }\n\n    spinner.update(`Executing workflow (${name})`);\n    // Mark the start time of the workflow, execute all of the commands provided in the workflow and\n    // then mark the ending time.\n    performance.mark('start');\n    await runCommands(workflow);\n    performance.mark('end');\n\n    spinner.update('Workflow completed');\n\n    if (cleanup) {\n      spinner.update('Cleaning up environment after workflow');\n      // Run the clean up commands to reset the environment and undo changes made during the workflow.\n      await runCommands(cleanup);\n      spinner.update('Environment cleanup complete');\n    }\n\n    const results = performance.measure(name, 'start', 'end');\n\n    spinner.success(`${name}: ${results.duration.toFixed(2)}ms`);\n\n    return {\n      name,\n      value: results.duration,\n    };\n  } finally {\n    spinner.complete();\n  }\n}\n\n/**\n * Run a set of commands provided as a multiline text block. Commands are assumed to always be\n * provided on a single line.\n */\nasync function runCommands(commands?: string[]) {\n  if (!commands || commands.length === 0) {\n    return;\n  }\n  for (let cmd of commands) {\n    await ChildProcess.exec(cmd, {mode: 'silent'});\n  }\n}\n"]}