{"version":3,"file":"loader.js","sourceRoot":"","sources":["loader.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,QAAQ,EAAC,MAAM,aAAa,CAAC;AACrC,OAAO,EAAC,KAAK,EAAC,MAAM,MAAM,CAAC;AAe3B,MAAM,CAAC,KAAK,UAAU,aAAa,CAAC,GAAW;IAE7C,MAAM,iBAAiB,GAA8B,EAAE,CAAC;IAExD,MAAM,YAAY,GAAG,MAAM,QAAQ,CAAC,GAAG,EAAE,EAAC,QAAQ,EAAE,OAAO,EAAC,CAAC,CAAC;IAE9D,MAAM,SAAS,GAAG,KAAK,CAAC,YAAY,CAAC,CAAC,SAAsC,CAAC;IAG7E,KAAK,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC;QACzD,IAAI,QAAQ,CAAC,QAAQ,KAAK,IAAI,EAAE,CAAC;YAC/B,iBAAiB,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC;QACrC,CAAC;IACH,CAAC;IAED,OAAO,iBAAiB,CAAC;AAC3B,CAAC","sourcesContent":["import {readFile} from 'fs/promises';\nimport {parse} from 'yaml';\n\nexport interface Workflow {\n  // The friendly name of the workflow.\n  name: string;\n  // The set of commands to run under timing test for the workflow.\n  workflow: string[];\n  // The set of commands to run in preparation for the workflow.\n  prepare?: string[];\n  // The set of commands to run as a cleanup.\n  cleanup?: string[];\n  // Whether the workflow is temporarily disabled.\n  disabled?: true;\n}\n\nexport async function loadWorkflows(src: string) {\n  /** The set of workflows which can be executed. */\n  const filteredWorkflows: {[key: string]: Workflow} = {};\n  /** The workflow configuration file content as a string.  */\n  const rawWorkflows = await readFile(src, {encoding: 'utf-8'});\n  /** The object parsed from the workflow configuration file, holding the workflow configurations. */\n  const workflows = parse(rawWorkflows).workflows as {[key: string]: Workflow};\n\n  // Remove any workflow which is marked as disabled.\n  for (const [name, workflow] of Object.entries(workflows)) {\n    if (workflow.disabled !== true) {\n      filteredWorkflows[name] = workflow;\n    }\n  }\n\n  return filteredWorkflows;\n}\n"]}