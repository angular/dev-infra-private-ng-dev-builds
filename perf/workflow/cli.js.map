{"version":3,"file":"cli.js","sourceRoot":"","sources":["cli.ts"],"names":[],"mappings":"AASA,OAAO,EAAC,eAAe,EAAC,MAAM,eAAe,CAAC;AAC9C,OAAO,EAAC,aAAa,EAAC,MAAM,aAAa,CAAC;AAC1C,OAAO,EAAC,IAAI,EAAC,MAAM,MAAM,CAAC;AAC1B,OAAO,EAAC,2BAA2B,EAAC,MAAM,+BAA+B,CAAC;AAC1E,OAAO,EAAC,4BAA4B,EAAC,MAAM,eAAe,CAAC;AAC3D,OAAO,EAAC,OAAO,EAAC,MAAM,wBAAwB,CAAC;AAU/C,SAAS,OAAO,CAAC,KAAW;IAC1B,OAAO,KAAK;SACT,MAAM,CAAC,aAA6B,EAAE;QACrC,OAAO,EAAE,+BAA+B;QACxC,IAAI,EAAE,QAAQ;QACd,WAAW,EAAE,oDAAoD;KAClE,CAAC;SACD,MAAM,CAAC,MAAM,EAAE;QACd,OAAO,EAAE,KAAK;QACd,IAAI,EAAE,SAAS;QACf,WAAW,EAAE,8DAA8D;KAC5E,CAAC;SACD,MAAM,CAAC,MAAM,EAAE;QACd,IAAI,EAAE,QAAQ;QACd,WAAW,EAAE,oCAAoC;KAClD,CAAC;SACD,MAAM,CAAC,YAA2B,EAAE;QACnC,IAAI,EAAE,QAAQ;QACd,WAAW,EAAE,gFAAgF;KAC9F,CAAC,CAAC;AACP,CAAC;AAGD,KAAK,UAAU,OAAO,CAAC,EAAC,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAkB;IACzE,MAAM,SAAS,GAAG,MAAM,aAAa,CAAC,IAAI,CAAC,2BAA2B,EAAE,EAAE,UAAU,CAAC,CAAC,CAAC;IAEvF,IAAI,IAAI,EAAE,CAAC;QACT,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAC7D,OAAO;IACT,CAAC;IAED,MAAM,OAAO,GAAoC,EAAE,CAAC;IAEpD,IAAI,IAAI,EAAE,CAAC;QACT,MAAM,EAAC,KAAK,EAAC,GAAG,MAAM,eAAe,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QACvD,OAAO,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC,CAAC;IAC9B,CAAC;SAAM,CAAC;QACN,KAAK,MAAM,QAAQ,IAAI,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC;YAChD,MAAM,EAAC,IAAI,EAAE,KAAK,EAAC,GAAG,MAAM,eAAe,CAAC,QAAQ,CAAC,CAAC;YACtD,OAAO,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC;IAED,IAAI,SAAS,EAAE,CAAC;QACd,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,2CAA2C,CAAC,CAAC;QACzE,IAAI,CAAC;YACH,KAAK,IAAI,EAAC,KAAK,EAAE,IAAI,EAAC,IAAI,OAAO,EAAE,CAAC;gBAClC,MAAM,4BAA4B,CAAC;oBACjC,IAAI;oBACJ,KAAK;oBACL,UAAU,EAAE,SAAS;iBACtB,CAAC,CAAC;YACL,CAAC;QACH,CAAC;gBAAS,CAAC;YACT,OAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;QACrC,CAAC;IACH,CAAC;AACH,CAAC;AAGD,MAAM,CAAC,MAAM,eAAe,GAAuC;IACjE,OAAO;IACP,OAAO;IACP,OAAO,EAAE,WAAW;IACpB,QAAQ,EAAE,oDAAoD;CAC/D,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Argv, CommandModule} from 'yargs';\nimport {measureWorkflow} from './workflow.js';\nimport {loadWorkflows} from './loader.js';\nimport {join} from 'path';\nimport {determineRepoBaseDirFromCwd} from '../../utils/repo-directory.js';\nimport {addWorkflowPerformanceResult} from './database.js';\nimport {Spinner} from '../../utils/spinner.js';\n\ninterface WorkflowsParams {\n  configFile: string;\n  list: boolean;\n  name?: string;\n  commitSha?: string;\n}\n\n/** Builds the checkout pull request command. */\nfunction builder(yargs: Argv) {\n  return yargs\n    .option('config-file' as 'configFile', {\n      default: '.ng-dev/dx-perf-workflows.yml',\n      type: 'string',\n      description: 'The path to the workflow definitions in a yml file',\n    })\n    .option('list', {\n      default: false,\n      type: 'boolean',\n      description: 'Whether to get back a list of workflows that can be executed',\n    })\n    .option('name', {\n      type: 'string',\n      description: 'A specific workflow to run by name',\n    })\n    .option('commit-sha' as 'commitSha', {\n      type: 'string',\n      description: 'The commit sha to associate the measurement with, uploading it to our database',\n    });\n}\n\n/** Handles the checkout pull request command. */\nasync function handler({configFile, list, name, commitSha}: WorkflowsParams) {\n  const workflows = await loadWorkflows(join(determineRepoBaseDirFromCwd(), configFile));\n\n  if (list) {\n    process.stdout.write(JSON.stringify(Object.keys(workflows)));\n    return;\n  }\n\n  const results: {name: string; value: number}[] = [];\n\n  if (name) {\n    const {value} = await measureWorkflow(workflows[name]);\n    results.push({value, name});\n  } else {\n    for (const workflow of Object.values(workflows)) {\n      const {name, value} = await measureWorkflow(workflow);\n      results.push({value, name});\n    }\n  }\n\n  if (commitSha) {\n    const spinner = new Spinner('Uploading performance results to database');\n    try {\n      for (let {value, name} of results) {\n        await addWorkflowPerformanceResult({\n          name,\n          value,\n          commit_sha: commitSha,\n        });\n      }\n    } finally {\n      spinner.success('Upload complete');\n    }\n  }\n}\n\n/** yargs command module for checking out a PR. */\nexport const WorkflowsModule: CommandModule<{}, WorkflowsParams> = {\n  handler,\n  builder,\n  command: 'workflows',\n  describe: 'Evaluate the performance of the provided workflows',\n};\n"]}