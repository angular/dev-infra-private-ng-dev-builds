/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { measureWorkflow } from './workflow.js';
import { loadWorkflows } from './loader.js';
import { join } from 'path';
import { determineRepoBaseDirFromCwd } from '../../utils/repo-directory.js';
/** Builds the checkout pull request command. */
function builder(yargs) {
    return yargs
        .option('config-file', {
        default: '.ng-dev/dx-perf-workflows.yml',
        type: 'string',
        description: 'The path to the workflow definitions in a yml file',
    })
        .option('list', {
        default: false,
        type: 'boolean',
        description: 'Whether to get back a list of workflows that can be executed',
    })
        .option('name', {
        type: 'string',
        description: 'A specific workflow to run by name',
    });
}
/** Handles the checkout pull request command. */
async function handler({ configFile, list, name }) {
    const workflows = await loadWorkflows(join(determineRepoBaseDirFromCwd(), configFile));
    if (list) {
        process.stdout.write(JSON.stringify(Object.keys(workflows)));
        return;
    }
    if (name) {
        const { duration } = await measureWorkflow(workflows[name]);
        process.stdout.write(JSON.stringify({ [name]: duration }));
        return;
    }
    const results = {};
    for (const workflow of Object.values(workflows)) {
        const { name, duration } = await measureWorkflow(workflow);
        results[name] = duration;
    }
    process.stdout.write(JSON.stringify(results));
}
/** yargs command module for checking out a PR. */
export const WorkflowsModule = {
    handler,
    builder,
    command: 'workflows',
    describe: 'Evaluate the performance of the provided workflows',
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbmctZGV2L3BlcmYvd29ya2Zsb3cvY2xpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUdILE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDOUMsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUMxQyxPQUFPLEVBQUMsSUFBSSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQzFCLE9BQU8sRUFBQywyQkFBMkIsRUFBQyxNQUFNLCtCQUErQixDQUFDO0FBUTFFLGdEQUFnRDtBQUNoRCxTQUFTLE9BQU8sQ0FBQyxLQUFXO0lBQzFCLE9BQU8sS0FBSztTQUNULE1BQU0sQ0FBQyxhQUE2QixFQUFFO1FBQ3JDLE9BQU8sRUFBRSwrQkFBK0I7UUFDeEMsSUFBSSxFQUFFLFFBQVE7UUFDZCxXQUFXLEVBQUUsb0RBQW9EO0tBQ2xFLENBQUM7U0FDRCxNQUFNLENBQUMsTUFBTSxFQUFFO1FBQ2QsT0FBTyxFQUFFLEtBQUs7UUFDZCxJQUFJLEVBQUUsU0FBUztRQUNmLFdBQVcsRUFBRSw4REFBOEQ7S0FDNUUsQ0FBQztTQUNELE1BQU0sQ0FBQyxNQUFNLEVBQUU7UUFDZCxJQUFJLEVBQUUsUUFBUTtRQUNkLFdBQVcsRUFBRSxvQ0FBb0M7S0FDbEQsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQUVELGlEQUFpRDtBQUNqRCxLQUFLLFVBQVUsT0FBTyxDQUFDLEVBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQWtCO0lBQzlELE1BQU0sU0FBUyxHQUFHLE1BQU0sYUFBYSxDQUFDLElBQUksQ0FBQywyQkFBMkIsRUFBRSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFFdkYsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNULE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0QsT0FBTztJQUNULENBQUM7SUFFRCxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ1QsTUFBTSxFQUFDLFFBQVEsRUFBQyxHQUFHLE1BQU0sZUFBZSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzFELE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsRUFBQyxDQUFDLENBQUMsQ0FBQztRQUN6RCxPQUFPO0lBQ1QsQ0FBQztJQUVELE1BQU0sT0FBTyxHQUE0QixFQUFFLENBQUM7SUFDNUMsS0FBSyxNQUFNLFFBQVEsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUM7UUFDaEQsTUFBTSxFQUFDLElBQUksRUFBRSxRQUFRLEVBQUMsR0FBRyxNQUFNLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN6RCxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7SUFDRCxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDaEQsQ0FBQztBQUVELGtEQUFrRDtBQUNsRCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQXVDO0lBQ2pFLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTyxFQUFFLFdBQVc7SUFDcEIsUUFBUSxFQUFFLG9EQUFvRDtDQUMvRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTENcbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7QXJndiwgQ29tbWFuZE1vZHVsZX0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHttZWFzdXJlV29ya2Zsb3d9IGZyb20gJy4vd29ya2Zsb3cuanMnO1xuaW1wb3J0IHtsb2FkV29ya2Zsb3dzfSBmcm9tICcuL2xvYWRlci5qcyc7XG5pbXBvcnQge2pvaW59IGZyb20gJ3BhdGgnO1xuaW1wb3J0IHtkZXRlcm1pbmVSZXBvQmFzZURpckZyb21Dd2R9IGZyb20gJy4uLy4uL3V0aWxzL3JlcG8tZGlyZWN0b3J5LmpzJztcblxuaW50ZXJmYWNlIFdvcmtmbG93c1BhcmFtcyB7XG4gIGNvbmZpZ0ZpbGU6IHN0cmluZztcbiAgbGlzdDogYm9vbGVhbjtcbiAgbmFtZT86IHN0cmluZztcbn1cblxuLyoqIEJ1aWxkcyB0aGUgY2hlY2tvdXQgcHVsbCByZXF1ZXN0IGNvbW1hbmQuICovXG5mdW5jdGlvbiBidWlsZGVyKHlhcmdzOiBBcmd2KSB7XG4gIHJldHVybiB5YXJnc1xuICAgIC5vcHRpb24oJ2NvbmZpZy1maWxlJyBhcyAnY29uZmlnRmlsZScsIHtcbiAgICAgIGRlZmF1bHQ6ICcubmctZGV2L2R4LXBlcmYtd29ya2Zsb3dzLnltbCcsXG4gICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnVGhlIHBhdGggdG8gdGhlIHdvcmtmbG93IGRlZmluaXRpb25zIGluIGEgeW1sIGZpbGUnLFxuICAgIH0pXG4gICAgLm9wdGlvbignbGlzdCcsIHtcbiAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgZGVzY3JpcHRpb246ICdXaGV0aGVyIHRvIGdldCBiYWNrIGEgbGlzdCBvZiB3b3JrZmxvd3MgdGhhdCBjYW4gYmUgZXhlY3V0ZWQnLFxuICAgIH0pXG4gICAgLm9wdGlvbignbmFtZScsIHtcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgZGVzY3JpcHRpb246ICdBIHNwZWNpZmljIHdvcmtmbG93IHRvIHJ1biBieSBuYW1lJyxcbiAgICB9KTtcbn1cblxuLyoqIEhhbmRsZXMgdGhlIGNoZWNrb3V0IHB1bGwgcmVxdWVzdCBjb21tYW5kLiAqL1xuYXN5bmMgZnVuY3Rpb24gaGFuZGxlcih7Y29uZmlnRmlsZSwgbGlzdCwgbmFtZX06IFdvcmtmbG93c1BhcmFtcykge1xuICBjb25zdCB3b3JrZmxvd3MgPSBhd2FpdCBsb2FkV29ya2Zsb3dzKGpvaW4oZGV0ZXJtaW5lUmVwb0Jhc2VEaXJGcm9tQ3dkKCksIGNvbmZpZ0ZpbGUpKTtcblxuICBpZiAobGlzdCkge1xuICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKEpTT04uc3RyaW5naWZ5KE9iamVjdC5rZXlzKHdvcmtmbG93cykpKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAobmFtZSkge1xuICAgIGNvbnN0IHtkdXJhdGlvbn0gPSBhd2FpdCBtZWFzdXJlV29ya2Zsb3cod29ya2Zsb3dzW25hbWVdKTtcbiAgICBwcm9jZXNzLnN0ZG91dC53cml0ZShKU09OLnN0cmluZ2lmeSh7W25hbWVdOiBkdXJhdGlvbn0pKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCByZXN1bHRzOiB7W2tleTogc3RyaW5nXTogbnVtYmVyfSA9IHt9O1xuICBmb3IgKGNvbnN0IHdvcmtmbG93IG9mIE9iamVjdC52YWx1ZXMod29ya2Zsb3dzKSkge1xuICAgIGNvbnN0IHtuYW1lLCBkdXJhdGlvbn0gPSBhd2FpdCBtZWFzdXJlV29ya2Zsb3cod29ya2Zsb3cpO1xuICAgIHJlc3VsdHNbbmFtZV0gPSBkdXJhdGlvbjtcbiAgfVxuICBwcm9jZXNzLnN0ZG91dC53cml0ZShKU09OLnN0cmluZ2lmeShyZXN1bHRzKSk7XG59XG5cbi8qKiB5YXJncyBjb21tYW5kIG1vZHVsZSBmb3IgY2hlY2tpbmcgb3V0IGEgUFIuICovXG5leHBvcnQgY29uc3QgV29ya2Zsb3dzTW9kdWxlOiBDb21tYW5kTW9kdWxlPHt9LCBXb3JrZmxvd3NQYXJhbXM+ID0ge1xuICBoYW5kbGVyLFxuICBidWlsZGVyLFxuICBjb21tYW5kOiAnd29ya2Zsb3dzJyxcbiAgZGVzY3JpYmU6ICdFdmFsdWF0ZSB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhlIHByb3ZpZGVkIHdvcmtmbG93cycsXG59O1xuIl19