{"version":3,"file":"validate-range.js","sourceRoot":"","sources":["validate-range.ts"],"names":[],"mappings":"AAOA,OAAO,EAAC,KAAK,EAAE,GAAG,EAAC,MAAM,wBAAwB,CAAC;AAElD,OAAO,EAAC,iBAAiB,EAAC,MAAM,aAAa,CAAC;AAC9C,OAAO,EACL,qBAAqB,EACrB,qBAAqB,GAEtB,MAAM,gBAAgB,CAAC;AAGxB,MAAM,UAAU,GAAG,CAAC,MAAc,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC;AAGvD,MAAM,mBAAmB,GAAG,CAAC,MAAc,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC;AAG9D,MAAM,CAAC,KAAK,UAAU,mBAAmB,CAAC,IAAY,EAAE,EAAU;IAEhE,MAAM,MAAM,GAA+C,EAAE,CAAC;IAG9D,MAAM,OAAO,GAAG,MAAM,iBAAiB,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IAClD,GAAG,CAAC,IAAI,CAAC,aAAa,OAAO,CAAC,MAAM,qCAAqC,IAAI,KAAK,EAAE,EAAE,CAAC,CAAC;IAMxF,IAAI,sBAAsB,GAAG,IAAI,CAAC;IAElC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACxC,MAAM,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QAC1B,MAAM,OAAO,GAAiC;YAC5C,cAAc,EAAE,IAAI;YACpB,qBAAqB,EAAE,UAAU,CAAC,MAAM,CAAC;gBACvC,CAAC,CAAC,SAAS;gBACX,CAAC,CAAC,OAAO;qBACJ,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;qBACZ,MAAM,CAAC,UAAU,CAAC;qBAClB,GAAG,CAAC,mBAAmB,CAAC;SAChC,CAAC;QAEF,MAAM,EAAC,KAAK,EAAE,MAAM,EAAE,WAAW,EAAC,GAAG,MAAM,qBAAqB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAClF,IAAI,WAAW,CAAC,MAAM,EAAE,CAAC;YACvB,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;QAC5C,CAAC;QAED,sBAAsB,GAAG,sBAAsB,IAAI,KAAK,CAAC;IAC3D,CAAC;IAED,IAAI,sBAAsB,EAAE,CAAC;QAC3B,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,wCAAwC,CAAC,CAAC,CAAC;IAC5D,CAAC;SAAM,CAAC;QACN,GAAG,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;QACvC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,EAAE,gBAAgB,CAAC,EAAE,EAAE;YAC5C,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACxB,qBAAqB,CAAC,gBAAgB,CAAC,CAAC;YACxC,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC;QAGH,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {green, Log} from '../../utils/logging.js';\nimport {Commit} from '../parse.js';\nimport {getCommitsInRange} from '../utils.js';\nimport {\n  printValidationErrors,\n  validateCommitMessage,\n  ValidateCommitMessageOptions,\n} from '../validate.js';\n\n// Whether the provided commit is a fixup commit.\nconst isNonFixup = (commit: Commit) => !commit.isFixup;\n\n// Extracts commit header (first line of commit message).\nconst extractCommitHeader = (commit: Commit) => commit.header;\n\n/** Validate all commits in a provided git commit range. */\nexport async function validateCommitRange(from: string, to: string): Promise<void> {\n  /** A list of tuples of the commit header string and a list of error messages for the commit. */\n  const errors: [commitHeader: string, errors: string[]][] = [];\n\n  /** A list of parsed commit messages from the range. */\n  const commits = await getCommitsInRange(from, to);\n  Log.info(`Examining ${commits.length} commit(s) in the provided range: ${from}..${to}`);\n\n  /**\n   * Whether all commits in the range are valid, commits are allowed to be fixup commits for other\n   * commits in the provided commit range.\n   */\n  let allCommitsInRangeValid = true;\n\n  for (let i = 0; i < commits.length; i++) {\n    const commit = commits[i];\n    const options: ValidateCommitMessageOptions = {\n      disallowSquash: true,\n      nonFixupCommitHeaders: isNonFixup(commit)\n        ? undefined\n        : commits\n            .slice(i + 1)\n            .filter(isNonFixup)\n            .map(extractCommitHeader),\n    };\n\n    const {valid, errors: localErrors} = await validateCommitMessage(commit, options);\n    if (localErrors.length) {\n      errors.push([commit.header, localErrors]);\n    }\n\n    allCommitsInRangeValid = allCommitsInRangeValid && valid;\n  }\n\n  if (allCommitsInRangeValid) {\n    Log.info(green('✔  All commit messages in range valid.'));\n  } else {\n    Log.error('✘  Invalid commit message');\n    errors.forEach(([header, validationErrors]) => {\n      Log.error.group(header);\n      printValidationErrors(validationErrors);\n      Log.error.groupEnd();\n    });\n    // Exit with a non-zero exit code if invalid commit messages have\n    // been discovered.\n    process.exit(1);\n  }\n}\n"]}