/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { restoreCommitMessage } from './restore-commit-message.js';
/** Builds the command. */
function builder(argv) {
    return argv
        .option('file-env-variable', {
        type: 'string',
        description: 'The key for the environment variable which holds the arguments for the\n' +
            'prepare-commit-msg hook as described here:\n' +
            'https://git-scm.com/docs/githooks#_prepare_commit_msg',
    })
        .positional('file', { type: 'string' })
        .positional('source', { type: 'string' });
}
/** Handles the command. */
async function handler({ fileEnvVariable, file, source }) {
    // File and source are provided as command line parameters
    if (file !== undefined) {
        restoreCommitMessage(file, source);
        return;
    }
    // File and source are provided as values held in an environment variable.
    if (fileEnvVariable !== undefined) {
        const [fileFromEnv, sourceFromEnv] = (process.env[fileEnvVariable] || '').split(' ');
        if (!fileFromEnv) {
            throw new Error(`Provided environment variable "${fileEnvVariable}" was not found.`);
        }
        restoreCommitMessage(fileFromEnv, sourceFromEnv);
        return;
    }
    throw new Error('No file path and commit message source provide. Provide values via positional command ' +
        'arguments, or via the --file-env-variable flag');
}
/** yargs command module describing the command. */
export const RestoreCommitMessageModule = {
    handler,
    builder,
    command: 'restore-commit-message-draft [file] [source]',
    // Description: Restore a commit message draft if one has been saved from a failed commit attempt.
    // No describe is defiend to hide the command from the --help.
    describe: false,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbmctZGV2L2NvbW1pdC1tZXNzYWdlL3Jlc3RvcmUtY29tbWl0LW1lc3NhZ2UvY2xpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQU1ILE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBUWpFLDBCQUEwQjtBQUMxQixTQUFTLE9BQU8sQ0FBQyxJQUFVO0lBQ3pCLE9BQU8sSUFBSTtTQUNSLE1BQU0sQ0FBQyxtQkFBd0MsRUFBRTtRQUNoRCxJQUFJLEVBQUUsUUFBUTtRQUNkLFdBQVcsRUFDVCwwRUFBMEU7WUFDMUUsOENBQThDO1lBQzlDLHVEQUF1RDtLQUMxRCxDQUFDO1NBQ0QsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFDLElBQUksRUFBRSxRQUFRLEVBQUMsQ0FBQztTQUNwQyxVQUFVLENBQUMsUUFBUSxFQUFFLEVBQUMsSUFBSSxFQUFFLFFBQVEsRUFBQyxDQUFDLENBQUM7QUFDNUMsQ0FBQztBQUVELDJCQUEyQjtBQUMzQixLQUFLLFVBQVUsT0FBTyxDQUFDLEVBQUMsZUFBZSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQXlDO0lBQzVGLDBEQUEwRDtJQUMxRCxJQUFJLElBQUksS0FBSyxTQUFTLEVBQUUsQ0FBQztRQUN2QixvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsTUFBeUIsQ0FBQyxDQUFDO1FBQ3RELE9BQU87SUFDVCxDQUFDO0lBRUQsMEVBQTBFO0lBQzFFLElBQUksZUFBZSxLQUFLLFNBQVMsRUFBRSxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsYUFBYSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWdCLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEYsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2pCLE1BQU0sSUFBSSxLQUFLLENBQUMsa0NBQWtDLGVBQWUsa0JBQWtCLENBQUMsQ0FBQztRQUN2RixDQUFDO1FBQ0Qsb0JBQW9CLENBQUMsV0FBVyxFQUFFLGFBQWdDLENBQUMsQ0FBQztRQUNwRSxPQUFPO0lBQ1QsQ0FBQztJQUVELE1BQU0sSUFBSSxLQUFLLENBQ2Isd0ZBQXdGO1FBQ3RGLGdEQUFnRCxDQUNuRCxDQUFDO0FBQ0osQ0FBQztBQUVELG1EQUFtRDtBQUNuRCxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBbUQ7SUFDeEYsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPLEVBQUUsOENBQThDO0lBQ3ZELGtHQUFrRztJQUNsRyw4REFBOEQ7SUFDOUQsUUFBUSxFQUFFLEtBQUs7Q0FDaEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge0FyZ3YsIEFyZ3VtZW50cywgQ29tbWFuZE1vZHVsZX0gZnJvbSAneWFyZ3MnO1xuXG5pbXBvcnQge0NvbW1pdE1zZ1NvdXJjZX0gZnJvbSAnLi9jb21taXQtbWVzc2FnZS1zb3VyY2UuanMnO1xuXG5pbXBvcnQge3Jlc3RvcmVDb21taXRNZXNzYWdlfSBmcm9tICcuL3Jlc3RvcmUtY29tbWl0LW1lc3NhZ2UuanMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlc3RvcmVDb21taXRNZXNzYWdlT3B0aW9ucyB7XG4gIGZpbGU/OiBzdHJpbmc7XG4gIHNvdXJjZT86IHN0cmluZztcbiAgZmlsZUVudlZhcmlhYmxlPzogc3RyaW5nO1xufVxuXG4vKiogQnVpbGRzIHRoZSBjb21tYW5kLiAqL1xuZnVuY3Rpb24gYnVpbGRlcihhcmd2OiBBcmd2KSB7XG4gIHJldHVybiBhcmd2XG4gICAgLm9wdGlvbignZmlsZS1lbnYtdmFyaWFibGUnIGFzICdmaWxlRW52VmFyaWFibGUnLCB7XG4gICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAnVGhlIGtleSBmb3IgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlIHdoaWNoIGhvbGRzIHRoZSBhcmd1bWVudHMgZm9yIHRoZVxcbicgK1xuICAgICAgICAncHJlcGFyZS1jb21taXQtbXNnIGhvb2sgYXMgZGVzY3JpYmVkIGhlcmU6XFxuJyArXG4gICAgICAgICdodHRwczovL2dpdC1zY20uY29tL2RvY3MvZ2l0aG9va3MjX3ByZXBhcmVfY29tbWl0X21zZycsXG4gICAgfSlcbiAgICAucG9zaXRpb25hbCgnZmlsZScsIHt0eXBlOiAnc3RyaW5nJ30pXG4gICAgLnBvc2l0aW9uYWwoJ3NvdXJjZScsIHt0eXBlOiAnc3RyaW5nJ30pO1xufVxuXG4vKiogSGFuZGxlcyB0aGUgY29tbWFuZC4gKi9cbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIoe2ZpbGVFbnZWYXJpYWJsZSwgZmlsZSwgc291cmNlfTogQXJndW1lbnRzPFJlc3RvcmVDb21taXRNZXNzYWdlT3B0aW9ucz4pIHtcbiAgLy8gRmlsZSBhbmQgc291cmNlIGFyZSBwcm92aWRlZCBhcyBjb21tYW5kIGxpbmUgcGFyYW1ldGVyc1xuICBpZiAoZmlsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmVzdG9yZUNvbW1pdE1lc3NhZ2UoZmlsZSwgc291cmNlIGFzIENvbW1pdE1zZ1NvdXJjZSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRmlsZSBhbmQgc291cmNlIGFyZSBwcm92aWRlZCBhcyB2YWx1ZXMgaGVsZCBpbiBhbiBlbnZpcm9ubWVudCB2YXJpYWJsZS5cbiAgaWYgKGZpbGVFbnZWYXJpYWJsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgW2ZpbGVGcm9tRW52LCBzb3VyY2VGcm9tRW52XSA9IChwcm9jZXNzLmVudltmaWxlRW52VmFyaWFibGUhXSB8fCAnJykuc3BsaXQoJyAnKTtcbiAgICBpZiAoIWZpbGVGcm9tRW52KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFByb3ZpZGVkIGVudmlyb25tZW50IHZhcmlhYmxlIFwiJHtmaWxlRW52VmFyaWFibGV9XCIgd2FzIG5vdCBmb3VuZC5gKTtcbiAgICB9XG4gICAgcmVzdG9yZUNvbW1pdE1lc3NhZ2UoZmlsZUZyb21FbnYsIHNvdXJjZUZyb21FbnYgYXMgQ29tbWl0TXNnU291cmNlKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ05vIGZpbGUgcGF0aCBhbmQgY29tbWl0IG1lc3NhZ2Ugc291cmNlIHByb3ZpZGUuIFByb3ZpZGUgdmFsdWVzIHZpYSBwb3NpdGlvbmFsIGNvbW1hbmQgJyArXG4gICAgICAnYXJndW1lbnRzLCBvciB2aWEgdGhlIC0tZmlsZS1lbnYtdmFyaWFibGUgZmxhZycsXG4gICk7XG59XG5cbi8qKiB5YXJncyBjb21tYW5kIG1vZHVsZSBkZXNjcmliaW5nIHRoZSBjb21tYW5kLiAqL1xuZXhwb3J0IGNvbnN0IFJlc3RvcmVDb21taXRNZXNzYWdlTW9kdWxlOiBDb21tYW5kTW9kdWxlPHt9LCBSZXN0b3JlQ29tbWl0TWVzc2FnZU9wdGlvbnM+ID0ge1xuICBoYW5kbGVyLFxuICBidWlsZGVyLFxuICBjb21tYW5kOiAncmVzdG9yZS1jb21taXQtbWVzc2FnZS1kcmFmdCBbZmlsZV0gW3NvdXJjZV0nLFxuICAvLyBEZXNjcmlwdGlvbjogUmVzdG9yZSBhIGNvbW1pdCBtZXNzYWdlIGRyYWZ0IGlmIG9uZSBoYXMgYmVlbiBzYXZlZCBmcm9tIGEgZmFpbGVkIGNvbW1pdCBhdHRlbXB0LlxuICAvLyBObyBkZXNjcmliZSBpcyBkZWZpZW5kIHRvIGhpZGUgdGhlIGNvbW1hbmQgZnJvbSB0aGUgLS1oZWxwLlxuICBkZXNjcmliZTogZmFsc2UsXG59O1xuIl19