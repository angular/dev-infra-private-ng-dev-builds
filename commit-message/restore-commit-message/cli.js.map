{"version":3,"file":"cli.js","sourceRoot":"","sources":["cli.ts"],"names":[],"mappings":"AAYA,OAAO,EAAC,oBAAoB,EAAC,MAAM,6BAA6B,CAAC;AASjE,SAAS,OAAO,CAAC,IAAU;IACzB,OAAO,IAAI;SACR,MAAM,CAAC,mBAAwC,EAAE;QAChD,IAAI,EAAE,QAAQ;QACd,WAAW,EACT,0EAA0E;YAC1E,8CAA8C;YAC9C,uDAAuD;KAC1D,CAAC;SACD,UAAU,CAAC,MAAM,EAAE,EAAC,IAAI,EAAE,QAAQ,EAAC,CAAC;SACpC,UAAU,CAAC,QAAQ,EAAE,EAAC,IAAI,EAAE,QAAQ,EAAC,CAAC,CAAC;AAC5C,CAAC;AAGD,KAAK,UAAU,OAAO,CAAC,EAAC,eAAe,EAAE,IAAI,EAAE,MAAM,EAAyC;IAE5F,IAAI,IAAI,KAAK,SAAS,EAAE,CAAC;QACvB,oBAAoB,CAAC,IAAI,EAAE,MAAyB,CAAC,CAAC;QACtD,OAAO;IACT,CAAC;IAGD,IAAI,eAAe,KAAK,SAAS,EAAE,CAAC;QAClC,MAAM,CAAC,WAAW,EAAE,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,eAAgB,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACtF,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,MAAM,IAAI,KAAK,CAAC,kCAAkC,eAAe,kBAAkB,CAAC,CAAC;QACvF,CAAC;QACD,oBAAoB,CAAC,WAAW,EAAE,aAAgC,CAAC,CAAC;QACpE,OAAO;IACT,CAAC;IAED,MAAM,IAAI,KAAK,CACb,wFAAwF;QACtF,gDAAgD,CACnD,CAAC;AACJ,CAAC;AAGD,MAAM,CAAC,MAAM,0BAA0B,GAAmD;IACxF,OAAO;IACP,OAAO;IACP,OAAO,EAAE,8CAA8C;IAGvD,QAAQ,EAAE,KAAK;CAChB,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Argv, Arguments, CommandModule} from 'yargs';\n\nimport {CommitMsgSource} from './commit-message-source.js';\n\nimport {restoreCommitMessage} from './restore-commit-message.js';\n\nexport interface RestoreCommitMessageOptions {\n  file?: string;\n  source?: string;\n  fileEnvVariable?: string;\n}\n\n/** Builds the command. */\nfunction builder(argv: Argv) {\n  return argv\n    .option('file-env-variable' as 'fileEnvVariable', {\n      type: 'string',\n      description:\n        'The key for the environment variable which holds the arguments for the\\n' +\n        'prepare-commit-msg hook as described here:\\n' +\n        'https://git-scm.com/docs/githooks#_prepare_commit_msg',\n    })\n    .positional('file', {type: 'string'})\n    .positional('source', {type: 'string'});\n}\n\n/** Handles the command. */\nasync function handler({fileEnvVariable, file, source}: Arguments<RestoreCommitMessageOptions>) {\n  // File and source are provided as command line parameters\n  if (file !== undefined) {\n    restoreCommitMessage(file, source as CommitMsgSource);\n    return;\n  }\n\n  // File and source are provided as values held in an environment variable.\n  if (fileEnvVariable !== undefined) {\n    const [fileFromEnv, sourceFromEnv] = (process.env[fileEnvVariable!] || '').split(' ');\n    if (!fileFromEnv) {\n      throw new Error(`Provided environment variable \"${fileEnvVariable}\" was not found.`);\n    }\n    restoreCommitMessage(fileFromEnv, sourceFromEnv as CommitMsgSource);\n    return;\n  }\n\n  throw new Error(\n    'No file path and commit message source provide. Provide values via positional command ' +\n      'arguments, or via the --file-env-variable flag',\n  );\n}\n\n/** yargs command module describing the command. */\nexport const RestoreCommitMessageModule: CommandModule<{}, RestoreCommitMessageOptions> = {\n  handler,\n  builder,\n  command: 'restore-commit-message-draft [file] [source]',\n  // Description: Restore a commit message draft if one has been saved from a failed commit attempt.\n  // No describe is defiend to hide the command from the --help.\n  describe: false,\n};\n"]}