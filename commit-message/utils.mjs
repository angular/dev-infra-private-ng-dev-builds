/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import gitCommits from 'git-raw-commits';
import { gitLogFormatForParsing, parseCommitFromGitLog } from './parse.js';
/**
 * Find all commits within the given range and return an object describing those.
 */
export function getCommitsInRange(from, to = 'HEAD') {
    return new Promise((resolve, reject) => {
        /** List of parsed commit objects. */
        const commits = [];
        /** Stream of raw git commit strings in the range provided. */
        const commitStream = gitCommits({ from, to, format: gitLogFormatForParsing });
        // Accumulate the parsed commits for each commit from the Readable stream into an array, then
        // resolve the promise with the array when the Readable stream ends.
        commitStream.on('data', (commit) => commits.push(parseCommitFromGitLog(commit)));
        commitStream.on('error', (err) => reject(err));
        commitStream.on('end', () => resolve(commits));
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9uZy1kZXYvY29tbWl0LW1lc3NhZ2UvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBQ0gsT0FBTyxVQUFVLE1BQU0saUJBQWlCLENBQUM7QUFFekMsT0FBTyxFQUFtQixzQkFBc0IsRUFBRSxxQkFBcUIsRUFBQyxNQUFNLFlBQVksQ0FBQztBQUUzRjs7R0FFRztBQUNILE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxJQUFZLEVBQUUsS0FBYSxNQUFNO0lBQ2pFLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDckMscUNBQXFDO1FBQ3JDLE1BQU0sT0FBTyxHQUF1QixFQUFFLENBQUM7UUFDdkMsOERBQThEO1FBQzlELE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxFQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLHNCQUFzQixFQUFDLENBQUMsQ0FBQztRQUU1RSw2RkFBNkY7UUFDN0Ysb0VBQW9FO1FBQ3BFLFlBQVksQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6RixZQUFZLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQVUsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdEQsWUFBWSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDakQsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTENcbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgZ2l0Q29tbWl0cyBmcm9tICdnaXQtcmF3LWNvbW1pdHMnO1xuXG5pbXBvcnQge0NvbW1pdEZyb21HaXRMb2csIGdpdExvZ0Zvcm1hdEZvclBhcnNpbmcsIHBhcnNlQ29tbWl0RnJvbUdpdExvZ30gZnJvbSAnLi9wYXJzZS5qcyc7XG5cbi8qKlxuICogRmluZCBhbGwgY29tbWl0cyB3aXRoaW4gdGhlIGdpdmVuIHJhbmdlIGFuZCByZXR1cm4gYW4gb2JqZWN0IGRlc2NyaWJpbmcgdGhvc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb21taXRzSW5SYW5nZShmcm9tOiBzdHJpbmcsIHRvOiBzdHJpbmcgPSAnSEVBRCcpOiBQcm9taXNlPENvbW1pdEZyb21HaXRMb2dbXT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIC8qKiBMaXN0IG9mIHBhcnNlZCBjb21taXQgb2JqZWN0cy4gKi9cbiAgICBjb25zdCBjb21taXRzOiBDb21taXRGcm9tR2l0TG9nW10gPSBbXTtcbiAgICAvKiogU3RyZWFtIG9mIHJhdyBnaXQgY29tbWl0IHN0cmluZ3MgaW4gdGhlIHJhbmdlIHByb3ZpZGVkLiAqL1xuICAgIGNvbnN0IGNvbW1pdFN0cmVhbSA9IGdpdENvbW1pdHMoe2Zyb20sIHRvLCBmb3JtYXQ6IGdpdExvZ0Zvcm1hdEZvclBhcnNpbmd9KTtcblxuICAgIC8vIEFjY3VtdWxhdGUgdGhlIHBhcnNlZCBjb21taXRzIGZvciBlYWNoIGNvbW1pdCBmcm9tIHRoZSBSZWFkYWJsZSBzdHJlYW0gaW50byBhbiBhcnJheSwgdGhlblxuICAgIC8vIHJlc29sdmUgdGhlIHByb21pc2Ugd2l0aCB0aGUgYXJyYXkgd2hlbiB0aGUgUmVhZGFibGUgc3RyZWFtIGVuZHMuXG4gICAgY29tbWl0U3RyZWFtLm9uKCdkYXRhJywgKGNvbW1pdDogQnVmZmVyKSA9PiBjb21taXRzLnB1c2gocGFyc2VDb21taXRGcm9tR2l0TG9nKGNvbW1pdCkpKTtcbiAgICBjb21taXRTdHJlYW0ub24oJ2Vycm9yJywgKGVycjogRXJyb3IpID0+IHJlamVjdChlcnIpKTtcbiAgICBjb21taXRTdHJlYW0ub24oJ2VuZCcsICgpID0+IHJlc29sdmUoY29tbWl0cykpO1xuICB9KTtcbn1cbiJdfQ==