{"version":3,"file":"parse.js","sourceRoot":"","sources":["parse.ts"],"names":[],"mappings":"AAQA,OAAO,EAAkC,IAAI,IAAI,KAAK,EAAC,MAAM,6BAA6B,CAAC;AA4C3F,MAAM,YAAY,GAAG;IACnB,IAAI,EAAE,IAAI;IACV,SAAS,EAAE,IAAI;IACf,MAAM,EAAE,KAAK;CACd,CAAC;AAIF,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,MAAoB,EAAE,EAAE;IAC3D,OAAO,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;SAC1B,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,MAAM,GAAG,MAAM,KAAK,EAAE,CAAC;SAC7C,IAAI,CAAC,EAAE,CAAC,CAAC;AACd,CAAC,CAAC;AAQF,MAAM,CAAC,MAAM,sBAAsB,GAAG,KAAK,oBAAoB,CAAC,YAAY,CAAC,EAAE,CAAC;AAEhF,IAAK,YAGJ;AAHD,WAAK,YAAY;IACf,mDAAmC,CAAA;IACnC,yCAAyB,CAAA;AAC3B,CAAC,EAHI,YAAY,KAAZ,YAAY,QAGhB;AAED,MAAM,eAAe,GAAG,WAAW,CAAC;AAEpC,MAAM,gBAAgB,GAAG,YAAY,CAAC;AAEtC,MAAM,gBAAgB,GAAG,aAAa,CAAC;AAYvC,MAAM,aAAa,GAAG,+BAA+B,CAAC;AAKtD,MAAM,oBAAoB,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;AAO1D,MAAM,YAAY,GAA2D;IAC3E,WAAW,EAAE,GAAG;IAChB,aAAa;IACb,oBAAoB;IACpB,YAAY,EAAE,CAAC,YAAY,CAAC,eAAe,EAAE,YAAY,CAAC,UAAU,CAAC;IACrE,YAAY,EAAE,CAAC,QAAgB,EAAE,EAAE,CAAC,IAAI,MAAM,CAAC,SAAS,QAAQ,UAAU,CAAC;CAC5E,CAAC;AAGF,MAAM,CAAC,MAAM,kBAAkB,GAAiC,aAAa,CAAC;AAG9E,MAAM,CAAC,MAAM,qBAAqB,GAA2C,aAAa,CAAC;AAK3F,SAAS,aAAa,CAAC,QAAyB;IAE9C,QAAQ,GAAG,QAAQ,CAAC,QAAQ,EAAE,CAAC;IAE/B,MAAM,iBAAiB,GAAG,QAAQ;SAC/B,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC;SAC5B,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC;SAC7B,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;IAEjC,MAAM,MAAM,GAAG,KAAK,CAAC,iBAAiB,EAAE,YAAY,CAAC,CAAC;IAEtD,MAAM,eAAe,GAAwB,EAAE,CAAC;IAEhD,MAAM,YAAY,GAAwB,EAAE,CAAC;IAG7C,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAuB,EAAE,EAAE;QAC/C,IAAI,IAAI,CAAC,KAAK,KAAK,YAAY,CAAC,eAAe,EAAE,CAAC;YAChD,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7B,CAAC;aAAM,IAAI,IAAI,CAAC,KAAK,KAAK,YAAY,CAAC,UAAU,EAAE,CAAC;YAClD,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1B,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,OAAO;QACL,QAAQ;QACR,eAAe;QACf,YAAY;QACZ,IAAI,EAAE,MAAM,CAAC,IAAI,IAAI,EAAE;QACvB,MAAM,EAAE,MAAM,CAAC,MAAM,IAAI,EAAE;QAC3B,MAAM,EAAE,MAAM,CAAC,MAAM,IAAI,EAAE;QAC3B,UAAU,EAAE,MAAM,CAAC,UAAU;QAC7B,KAAK,EAAE,MAAM,CAAC,KAAK,IAAI,EAAE;QACzB,OAAO,EAAE,MAAM,CAAC,OAAO,IAAI,EAAE;QAC7B,IAAI,EAAE,MAAM,CAAC,IAAI,IAAI,EAAE;QACvB,OAAO,EAAE,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC;QACvC,QAAQ,EAAE,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC;QACzC,QAAQ,EAAE,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC;QACzC,MAAM,EAAE,MAAM,CAAC,QAAQ,CAAC,IAAI,SAAS;QACrC,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,IAAI,SAAS;QACjC,SAAS,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI,SAAS;KAC5C,CAAC;AACJ,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Commit as ParsedCommit, Options, sync as parse} from 'conventional-commits-parser';\n\n/** A parsed commit, containing the information needed to validate the commit. */\nexport interface Commit {\n  /** The full raw text of the commit. */\n  fullText: string;\n  /** The header line of the commit, will be used in the changelog entries. */\n  header: string;\n  /** The full body of the commit, not including the footer. */\n  body: string;\n  /** The footer of the commit, containing issue references and note sections. */\n  footer: string;\n  /** A list of the references to other issues made throughout the commit message. */\n  references: ParsedCommit.Reference[];\n  /** The type of the commit message. */\n  type: string;\n  /** The scope of the commit message. */\n  scope: string;\n  /** The subject of the commit message. */\n  subject: string;\n  /** A list of breaking change notes in the commit message. */\n  breakingChanges: ParsedCommit.Note[];\n  /** A list of deprecation notes in the commit message. */\n  deprecations: ParsedCommit.Note[];\n  /** Whether the commit is a fixup commit. */\n  isFixup: boolean;\n  /** Whether the commit is a squash commit. */\n  isSquash: boolean;\n  /** Whether the commit is a revert commit. */\n  isRevert: boolean;\n}\n\n/** A parsed commit which originated from a Git Log entry */\nexport interface CommitFromGitLog extends Commit {\n  author: string;\n  hash: string;\n  shortHash: string;\n}\n\n/**\n * A list of tuples expressing the fields to extract from each commit log entry. The tuple contains\n * two values, the first is the key for the property and the second is the template shortcut for the\n * git log command.\n */\nconst commitFields = {\n  hash: '%H',\n  shortHash: '%h',\n  author: '%aN',\n};\n/** The additional fields to be included in commit log entries for parsing. */\nexport type CommitFields = typeof commitFields;\n/** The commit fields described as git log format entries for parsing. */\nexport const commitFieldsAsFormat = (fields: CommitFields) => {\n  return Object.entries(fields)\n    .map(([key, value]) => `%n-${key}-%n${value}`)\n    .join('');\n};\n/**\n * The git log format template to create git log entries for parsing.\n *\n * The conventional commits parser expects to parse the standard git log raw body (%B) into its\n * component parts. Additionally it will parse additional fields with keys defined by\n * `-{key name}-` separated by new lines.\n * */\nexport const gitLogFormatForParsing = `%B${commitFieldsAsFormat(commitFields)}`;\n/** Markers used to denote the start of a note section in a commit. */\nenum NoteSections {\n  BREAKING_CHANGE = 'BREAKING CHANGE',\n  DEPRECATED = 'DEPRECATED',\n}\n/** Regex determining if a commit is a fixup. */\nconst FIXUP_PREFIX_RE = /^fixup! /i;\n/** Regex determining if a commit is a squash. */\nconst SQUASH_PREFIX_RE = /^squash! /i;\n/** Regex determining if a commit is a revert. */\nconst REVERT_PREFIX_RE = /^revert:? /i;\n/**\n * Regex pattern for parsing the header line of a commit.\n *\n * Several groups are being matched to be used in the parsed commit object, being mapped to the\n * `headerCorrespondence` object.\n *\n * The pattern can be broken down into component parts:\n * - `(\\w+)` - a capturing group discovering the type of the commit.\n * - `(?:\\(([^)]+)\\))?` - an optional capturing group to capture the scope of the commit.\n * - `(.*)` - a capturing group discovering the subject of the commit.\n */\nconst headerPattern = /^(\\w+)(?:\\(([^)]+)\\))?: (.*)$/;\n/**\n * The property names used for the values extracted from the header via the\n * `headerPattern` regex.\n */\nconst headerCorrespondence = ['type', 'scope', 'subject'];\n/**\n * Configuration options for the commit parser.\n *\n * NOTE: An extended type from `Options` must be used because the current\n * @types/conventional-commits-parser version does not include the `notesPattern` field.\n */\nconst parseOptions: Options & {notesPattern: (keywords: string) => RegExp} = {\n  commentChar: '#',\n  headerPattern,\n  headerCorrespondence,\n  noteKeywords: [NoteSections.BREAKING_CHANGE, NoteSections.DEPRECATED],\n  notesPattern: (keywords: string) => new RegExp(`^\\\\s*(${keywords}): ?(.*)`),\n};\n\n/** Parse a commit message into its composite parts. */\nexport const parseCommitMessage: (fullText: string) => Commit = parseInternal;\n\n/** Parse a commit message from a git log entry into its composite parts. */\nexport const parseCommitFromGitLog: (fullText: Buffer) => CommitFromGitLog = parseInternal;\n\n/** Parse a full commit message into its composite parts. */\nfunction parseInternal(fullText: string): Commit;\nfunction parseInternal(fullText: Buffer): CommitFromGitLog;\nfunction parseInternal(fullText: string | Buffer): CommitFromGitLog | Commit {\n  // Ensure the fullText symbol is a `string`, even if a Buffer was provided.\n  fullText = fullText.toString();\n  /** The commit message text with the fixup and squash markers stripped out. */\n  const strippedCommitMsg = fullText\n    .replace(FIXUP_PREFIX_RE, '')\n    .replace(SQUASH_PREFIX_RE, '')\n    .replace(REVERT_PREFIX_RE, '');\n  /** The initially parsed commit. */\n  const commit = parse(strippedCommitMsg, parseOptions);\n  /** A list of breaking change notes from the commit. */\n  const breakingChanges: ParsedCommit.Note[] = [];\n  /** A list of deprecation notes from the commit. */\n  const deprecations: ParsedCommit.Note[] = [];\n\n  // Extract the commit message notes by marked types into their respective lists.\n  commit.notes.forEach((note: ParsedCommit.Note) => {\n    if (note.title === NoteSections.BREAKING_CHANGE) {\n      breakingChanges.push(note);\n    } else if (note.title === NoteSections.DEPRECATED) {\n      deprecations.push(note);\n    }\n  });\n\n  return {\n    fullText,\n    breakingChanges,\n    deprecations,\n    body: commit.body || '',\n    footer: commit.footer || '',\n    header: commit.header || '',\n    references: commit.references,\n    scope: commit.scope || '',\n    subject: commit.subject || '',\n    type: commit.type || '',\n    isFixup: FIXUP_PREFIX_RE.test(fullText),\n    isSquash: SQUASH_PREFIX_RE.test(fullText),\n    isRevert: REVERT_PREFIX_RE.test(fullText),\n    author: commit['author'] || undefined,\n    hash: commit['hash'] || undefined,\n    shortHash: commit['shortHash'] || undefined,\n  };\n}\n"]}