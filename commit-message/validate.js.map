{"version":3,"file":"validate.js","sourceRoot":"","sources":["validate.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getConfig} from '../utils/config.js';\nimport {Log} from '../utils/logging.js';\n\nimport {assertValidCommitMessageConfig, COMMIT_TYPES, ScopeRequirement} from './config.js';\nimport {Commit, parseCommitMessage} from './parse.js';\n\n/** Options for commit message validation. */\nexport interface ValidateCommitMessageOptions {\n  disallowSquash?: boolean;\n  nonFixupCommitHeaders?: string[];\n}\n\n/** The result of a commit message validation check. */\nexport interface ValidateCommitMessageResult {\n  valid: boolean;\n  errors: string[];\n  commit: Commit;\n}\n\n/** Regex matching a URL for an entire commit body line. */\nconst COMMIT_BODY_URL_LINE_RE = /^https?:\\/\\/.*$/;\n\n/**\n * Regular expression matching potential misuse of the `BREAKING CHANGE:` marker in a\n * commit message. Commit messages containing one of the following snippets will fail:\n *\n *   - `BREAKING CHANGE <some-content>` | Here we assume the colon is missing by accident.\n *   - `BREAKING-CHANGE: <some-content>` | The wrong keyword is used here.\n *   - `BREAKING CHANGES: <some-content>` | The wrong keyword is used here.\n *   - `BREAKING-CHANGES: <some-content>` | The wrong keyword is used here.\n */\nconst INCORRECT_BREAKING_CHANGE_BODY_RE =\n  /^(BREAKING CHANGE[^:]|BREAKING-CHANGE|BREAKING[ -]CHANGES)/m;\n\n/**\n * Regular expression matching potential misuse of the `DEPRECATED:` marker in a commit\n * message. Commit messages containing one of the following snippets will fail:\n *\n *   - `DEPRECATED <some-content>` | Here we assume the colon is missing by accident.\n *   - `DEPRECATIONS: <some-content>` | The wrong keyword is used here.\n *   - `DEPRECATION: <some-content>` | The wrong keyword is used here.\n *   - `DEPRECATE: <some-content>` | The wrong keyword is used here.\n *   - `DEPRECATES: <some-content>` | The wrong keyword is used here.\n */\nconst INCORRECT_DEPRECATION_BODY_RE = /^(DEPRECATED[^:]|DEPRECATIONS?|DEPRECATE:|DEPRECATES)/m;\n\n/** Validate a commit message against using the local repo's config. */\nexport async function validateCommitMessage(\n  commitMsg: string | Commit,\n  options: ValidateCommitMessageOptions = {},\n): Promise<ValidateCommitMessageResult> {\n  const _config = await getConfig();\n  assertValidCommitMessageConfig(_config);\n  const config = _config.commitMessage;\n  const commit = typeof commitMsg === 'string' ? parseCommitMessage(commitMsg) : commitMsg;\n  const errors: string[] = [];\n\n  /** Perform the validation checks against the parsed commit. */\n  function validateCommitAndCollectErrors() {\n    ////////////////////////////////////\n    // Checking revert, squash, fixup //\n    ////////////////////////////////////\n\n    // All revert commits are considered valid.\n    if (commit.isRevert) {\n      return true;\n    }\n\n    // All squashes are considered valid, as the commit will be squashed into another in\n    // the git history anyway, unless the options provided to not allow squash commits.\n    if (commit.isSquash) {\n      if (options.disallowSquash) {\n        errors.push('The commit must be manually squashed into the target commit');\n        return false;\n      }\n      return true;\n    }\n\n    // Fixups commits are considered valid, unless nonFixupCommitHeaders are provided to check\n    // against. If `nonFixupCommitHeaders` is not empty, we check whether there is a corresponding\n    // non-fixup commit (i.e. a commit whose header is identical to this commit's header after\n    // stripping the `fixup! ` prefix), otherwise we assume this verification will happen in another\n    // check.\n    if (commit.isFixup) {\n      if (config.disallowFixup) {\n        errors.push(\n          'The commit must be manually fixed-up into the target commit as fixup commits are disallowed',\n        );\n\n        return false;\n      }\n\n      if (options.nonFixupCommitHeaders && !options.nonFixupCommitHeaders.includes(commit.header)) {\n        errors.push(\n          'Unable to find match for fixup commit among prior commits: ' +\n            (options.nonFixupCommitHeaders.map((x) => `\\n      ${x}`).join('') || '-'),\n        );\n        return false;\n      }\n\n      return true;\n    }\n\n    ////////////////////////////\n    // Checking commit header //\n    ////////////////////////////\n    if (commit.header.length > config.maxLineLength) {\n      errors.push(`The commit message header is longer than ${config.maxLineLength} characters`);\n      return false;\n    }\n\n    if (!commit.type) {\n      errors.push(`The commit message header does not match the expected format.`);\n      return false;\n    }\n\n    if (COMMIT_TYPES[commit.type] === undefined) {\n      errors.push(\n        `'${commit.type}' is not an allowed type.\\n => TYPES: ${Object.keys(COMMIT_TYPES).join(\n          ', ',\n        )}`,\n      );\n      return false;\n    }\n\n    /** The scope requirement level for the provided type of the commit message. */\n    const scopeRequirementForType = COMMIT_TYPES[commit.type].scope;\n\n    if (scopeRequirementForType === ScopeRequirement.Forbidden && commit.scope) {\n      errors.push(\n        `Scopes are forbidden for commits with type '${commit.type}', but a scope of '${commit.scope}' was provided.`,\n      );\n      return false;\n    }\n\n    if (scopeRequirementForType === ScopeRequirement.Required && !commit.scope) {\n      errors.push(\n        `Scopes are required for commits with type '${commit.type}', but no scope was provided.`,\n      );\n      return false;\n    }\n\n    if (commit.scope && !config.scopes.includes(commit.scope)) {\n      errors.push(\n        `'${commit.scope}' is not an allowed scope.\\n => SCOPES: ${config.scopes.join(', ')}`,\n      );\n      return false;\n    }\n\n    // Commits with the type of `release` do not require a commit body.\n    if (commit.type === 'release') {\n      return true;\n    }\n\n    //////////////////////////\n    // Checking commit body //\n    //////////////////////////\n\n    // Due to an issue in which conventional-commits-parser considers all parts of a commit after\n    // a `#` reference to be the footer, we check the length of all of the commit content after the\n    // header. In the future, we expect to be able to check only the body once the parser properly\n    // handles this case.\n    const allNonHeaderContent = `${commit.body.trim()}\\n${commit.footer.trim()}`;\n\n    if (\n      !config.minBodyLengthTypeExcludes?.includes(commit.type) &&\n      allNonHeaderContent.length < config.minBodyLength\n    ) {\n      errors.push(\n        `The commit message body does not meet the minimum length of ${config.minBodyLength} characters`,\n      );\n      return false;\n    }\n\n    const bodyByLine = commit.body.split('\\n');\n    const lineExceedsMaxLength = bodyByLine.some((line: string) => {\n      // Check if any line exceeds the max line length limit. The limit is ignored for\n      // lines that just contain an URL (as these usually cannot be wrapped or shortened).\n      return line.length > config.maxLineLength && !COMMIT_BODY_URL_LINE_RE.test(line);\n    });\n\n    if (lineExceedsMaxLength) {\n      errors.push(\n        `The commit message body contains lines greater than ${config.maxLineLength} characters.`,\n      );\n      return false;\n    }\n\n    // Breaking change\n    // Check if the commit message contains a valid break change description.\n    // https://github.com/angular/angular/blob/88fbc066775ab1a2f6a8c75f933375b46d8fa9a4/CONTRIBUTING.md#commit-message-footer\n    if (INCORRECT_BREAKING_CHANGE_BODY_RE.test(commit.fullText)) {\n      errors.push(`The commit message body contains an invalid breaking change note.`);\n      return false;\n    }\n\n    if (INCORRECT_DEPRECATION_BODY_RE.test(commit.fullText)) {\n      errors.push(`The commit message body contains an invalid deprecation note.`);\n      return false;\n    }\n\n    return true;\n  }\n\n  return {valid: validateCommitAndCollectErrors(), errors, commit};\n}\n\n/** Print the error messages from the commit message validation to the console. */\nexport function printValidationErrors(errors: string[], print = Log.error) {\n  print.group(`Error${errors.length === 1 ? '' : 's'}:`);\n  errors.forEach((line) => print(line));\n  print.groupEnd();\n  print();\n  print('The expected format for a commit is: ');\n  print('<type>(<scope>): <summary>');\n  print();\n  print('<body>');\n  print();\n  print(`BREAKING CHANGE: <breaking change summary>`);\n  print();\n  print(`<breaking change description>`);\n  print();\n  print(`DEPRECATED: <deprecation summary>`);\n  print();\n  print(`<deprecation description>`);\n  print();\n  print();\n}\n"]}