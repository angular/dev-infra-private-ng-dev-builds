{"version":3,"file":"cli.js","sourceRoot":"","sources":["cli.ts"],"names":[],"mappings":"AAUA,OAAO,EAAC,aAAa,EAAC,MAAM,uBAAuB,CAAC;AAEpD,OAAO,EAAC,YAAY,EAAC,MAAM,oBAAoB,CAAC;AAShD,SAAS,OAAO,CAAC,IAAU;IACzB,OAAO,IAAI;SACR,MAAM,CAAC,MAAM,EAAE;QACd,IAAI,EAAE,QAAQ;QACd,SAAS,EAAE,CAAC,mBAAmB,CAAC;QAChC,WAAW,EAAE,sCAAsC;KACpD,CAAC;SACD,MAAM,CAAC,mBAAwC,EAAE;QAChD,IAAI,EAAE,QAAQ;QACd,SAAS,EAAE,CAAC,MAAM,CAAC;QACnB,WAAW,EAAE,8EAA8E;QAC3F,MAAM,EAAE,CAAC,GAAuB,EAAE,EAAE;YAClC,IAAI,GAAG,KAAK,SAAS,EAAE,CAAC;gBACtB,OAAO,GAAG,CAAC;YACb,CAAC;YACD,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC9B,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,MAAM,IAAI,KAAK,CAAC,kCAAkC,GAAG,kBAAkB,CAAC,CAAC;YAC3E,CAAC;YACD,OAAO,IAAI,CAAC;QACd,CAAC;KACF,CAAC;SACD,MAAM,CAAC,OAAO,EAAE;QACf,IAAI,EAAE,SAAS;QACf,WAAW,EACT,qFAAqF;QACvF,OAAO,EAAE,IAAI;QACb,kBAAkB,EAAE,4DAA4D;KACjF,CAAC,CAAC;AACP,CAAC;AAGD,KAAK,UAAU,OAAO,CAAC,EAAC,KAAK,EAAE,IAAI,EAAE,eAAe,EAAiC;IACnF,MAAM,WAAW,GAAG,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC,MAAM,qBAAqB,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;IAC3E,MAAM,QAAQ,GAAG,IAAI,IAAI,eAAe,IAAI,qBAAqB,CAAC;IAElE,MAAM,YAAY,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;AAC5C,CAAC;AAED,KAAK,UAAU,qBAAqB;IAClC,OAAO,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,aAAa,EAAE,CAAC,CAAC,eAAe,CAAC,EAAE,qBAAqB,CAAC;AAClG,CAAC;AAGD,MAAM,CAAC,MAAM,kBAAkB,GAA2C;IACxE,OAAO;IACP,OAAO;IACP,OAAO,EAAE,qBAAqB;IAC9B,QAAQ,EAAE,yCAAyC;CACpD,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Argv, Arguments, CommandModule} from 'yargs';\n\nimport {getUserConfig} from '../../utils/config.js';\n\nimport {validateFile} from './validate-file.js';\n\nexport interface ValidateFileOptions {\n  file?: string;\n  fileEnvVariable?: string;\n  error: boolean | null;\n}\n\n/** Builds the command. */\nfunction builder(argv: Argv) {\n  return argv\n    .option('file', {\n      type: 'string',\n      conflicts: ['file-env-variable'],\n      description: 'The path of the commit message file.',\n    })\n    .option('file-env-variable' as 'fileEnvVariable', {\n      type: 'string',\n      conflicts: ['file'],\n      description: 'The key of the environment variable for the path of the commit message file.',\n      coerce: (arg: string | undefined) => {\n        if (arg === undefined) {\n          return arg;\n        }\n        const file = process.env[arg];\n        if (!file) {\n          throw new Error(`Provided environment variable \"${arg}\" was not found.`);\n        }\n        return file;\n      },\n    })\n    .option('error', {\n      type: 'boolean',\n      description:\n        'Whether invalid commit messages should be treated as failures rather than a warning',\n      default: null,\n      defaultDescription: '`True` on CI or can be enabled through ng-dev user-config.',\n    });\n}\n\n/** Handles the command. */\nasync function handler({error, file, fileEnvVariable}: Arguments<ValidateFileOptions>) {\n  const isErrorMode = error === null ? await getIsErrorModeDefault() : error;\n  const filePath = file || fileEnvVariable || '.git/COMMIT_EDITMSG';\n\n  await validateFile(filePath, isErrorMode);\n}\n\nasync function getIsErrorModeDefault(): Promise<boolean> {\n  return !!process.env['CI'] || !!(await getUserConfig())['commitMessage']?.errorOnInvalidMessage;\n}\n\n/** yargs command module describing the command. */\nexport const ValidateFileModule: CommandModule<{}, ValidateFileOptions> = {\n  handler,\n  builder,\n  command: 'pre-commit-validate',\n  describe: 'Validate the most recent commit message',\n};\n"]}