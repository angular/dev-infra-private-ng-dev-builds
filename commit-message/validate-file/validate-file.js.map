{"version":3,"file":"validate-file.js","sourceRoot":"","sources":["validate-file.ts"],"names":[],"mappings":"AAOA,OAAO,EAAC,YAAY,EAAC,MAAM,IAAI,CAAC;AAChC,OAAO,EAAC,OAAO,EAAC,MAAM,MAAM,CAAC;AAE7B,OAAO,EAAC,KAAK,EAAE,GAAG,EAAE,MAAM,EAAC,MAAM,wBAAwB,CAAC;AAC1D,OAAO,EAAC,SAAS,EAAC,MAAM,+BAA+B,CAAC;AAExD,OAAO,EACL,wBAAwB,EACxB,sBAAsB,GACvB,MAAM,mDAAmD,CAAC;AAC3D,OAAO,EAAC,qBAAqB,EAAE,qBAAqB,EAAC,MAAM,gBAAgB,CAAC;AAG5E,MAAM,CAAC,KAAK,UAAU,YAAY,CAAC,QAAgB,EAAE,WAAoB;IACvE,MAAM,GAAG,GAAG,MAAM,SAAS,CAAC,GAAG,EAAE,CAAC;IAClC,MAAM,aAAa,GAAG,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE,MAAM,CAAC,CAAC;IAC3E,MAAM,EAAC,KAAK,EAAE,MAAM,EAAC,GAAG,MAAM,qBAAqB,CAAC,aAAa,CAAC,CAAC;IACnE,IAAI,KAAK,EAAE,CAAC;QACV,GAAG,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QAChD,wBAAwB,CAAC,QAAQ,CAAC,CAAC;QACnC,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC;QACrB,OAAO;IACT,CAAC;IAGD,IAAI,OAAO,GAAG,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;IAEhD,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,2BAA2B,CAAC,CAAC,CAAC,MAAM,CAAC,2BAA2B,CAAC,CAAC,CAAC;IACzF,qBAAqB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IACvC,IAAI,WAAW,EAAE,CAAC;QAChB,OAAO,CAAC,wDAAwD,CAAC,CAAC;QAClE,OAAO,CAAC,mFAAmF,CAAC,CAAC;IAC/F,CAAC;SAAM,CAAC;QACN,OAAO,CAAC,MAAM,CAAC,2EAA2E,CAAC,CAAC,CAAC;QAC7F,OAAO,CAAC,MAAM,CAAC,8CAA8C,CAAC,CAAC,CAAC;IAClE,CAAC;IAID,sBAAsB,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;IAEhD,OAAO,CAAC,QAAQ,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {readFileSync} from 'fs';\nimport {resolve} from 'path';\n\nimport {green, Log, yellow} from '../../utils/logging.js';\nimport {GitClient} from '../../utils/git/git-client.js';\n\nimport {\n  deleteCommitMessageDraft,\n  saveCommitMessageDraft,\n} from '../restore-commit-message/commit-message-draft.js';\nimport {printValidationErrors, validateCommitMessage} from '../validate.js';\n\n/** Validate commit message at the provided file path. */\nexport async function validateFile(filePath: string, isErrorMode: boolean) {\n  const git = await GitClient.get();\n  const commitMessage = readFileSync(resolve(git.baseDir, filePath), 'utf8');\n  const {valid, errors} = await validateCommitMessage(commitMessage);\n  if (valid) {\n    Log.info(`${green('✔')}  Valid commit message`);\n    deleteCommitMessageDraft(filePath);\n    process.exitCode = 0;\n    return;\n  }\n\n  /** Function used to print to the console log. */\n  let printFn = isErrorMode ? Log.error : Log.log;\n\n  printFn(isErrorMode ? '✘ Invalid commit message.' : yellow('! Invalid commit message.'));\n  printValidationErrors(errors, printFn);\n  if (isErrorMode) {\n    printFn('Aborting commit attempt due to invalid commit message.');\n    printFn('Commit message aborted as failure rather than warning due to local configuration.');\n  } else {\n    printFn(yellow('Before this commit can be merged into the upstream repository, it must be'));\n    printFn(yellow('amended to follow commit message guidelines.'));\n  }\n\n  // On all invalid commit messages, the commit message should be saved as a draft to be\n  // restored on the next commit attempt.\n  saveCommitMessageDraft(filePath, commitMessage);\n  // Set the correct exit code based on if invalid commit message is an error.\n  process.exitCode = isErrorMode ? 1 : 0;\n}\n"]}