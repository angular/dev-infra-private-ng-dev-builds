#!/usr/bin/env node
/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { runParserWithCompletedFunctions } from './utils/yargs.js';
import { buildCaretakerParser } from './caretaker/cli.js';
import { buildCommitMessageParser } from './commit-message/cli.js';
import { buildFormatParser } from './format/cli.js';
import { buildMiscParser } from './misc/cli.js';
import { buildNgbotParser } from './ngbot/cli.js';
import { buildPrParser } from './pr/cli.js';
import { buildPullapproveParser } from './pullapprove/cli.js';
import { buildReleaseParser } from './release/cli.js';
import { tsCircularDependenciesBuilder } from './ts-circular-dependencies/index.js';
import { captureLogOutputForCommand } from './utils/logging.js';
import { buildAuthParser } from './auth/cli.js';
import { buildPerfParser } from './perf/cli.js';
import { buildAiParser } from './ai/cli.js';
runParserWithCompletedFunctions((yargs) => {
    return yargs
        .scriptName('ng-dev')
        .middleware(captureLogOutputForCommand, true)
        .demandCommand()
        .recommendCommands()
        .command('auth <command>', false, buildAuthParser)
        .command('commit-message <command>', '', buildCommitMessageParser)
        .command('format <command>', '', buildFormatParser)
        .command('pr <command>', '', buildPrParser)
        .command('pullapprove <command>', '', buildPullapproveParser)
        .command('release <command>', '', buildReleaseParser)
        .command('ts-circular-deps <command>', '', tsCircularDependenciesBuilder)
        .command('caretaker <command>', '', buildCaretakerParser)
        .command('misc <command>', '', buildMiscParser)
        .command('ngbot <command>', false, buildNgbotParser)
        .command('perf <command>', '', buildPerfParser)
        .command('ai <command>', '', buildAiParser)
        .wrap(120)
        .strict();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vbmctZGV2L2NsaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUE7Ozs7OztHQU1HO0FBQ0gsT0FBTyxFQUFDLCtCQUErQixFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFFakUsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEQsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDakUsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDbEQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM5QyxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNoRCxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQzFDLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQzVELE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBQ3BELE9BQU8sRUFBQyw2QkFBNkIsRUFBQyxNQUFNLHFDQUFxQyxDQUFDO0FBQ2xGLE9BQU8sRUFBQywwQkFBMEIsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBQzlELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDOUMsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM5QyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBRzFDLCtCQUErQixDQUFDLENBQUMsS0FBVyxFQUFFLEVBQUU7SUFDOUMsT0FBTyxLQUFLO1NBQ1QsVUFBVSxDQUFDLFFBQVEsQ0FBQztTQUNwQixVQUFVLENBQUMsMEJBQTBCLEVBQUUsSUFBSSxDQUFDO1NBQzVDLGFBQWEsRUFBRTtTQUNmLGlCQUFpQixFQUFFO1NBQ25CLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLEVBQUUsZUFBZSxDQUFDO1NBQ2pELE9BQU8sQ0FBQywwQkFBMEIsRUFBRSxFQUFFLEVBQUUsd0JBQXdCLENBQUM7U0FDakUsT0FBTyxDQUFDLGtCQUFrQixFQUFFLEVBQUUsRUFBRSxpQkFBaUIsQ0FBQztTQUNsRCxPQUFPLENBQUMsY0FBYyxFQUFFLEVBQUUsRUFBRSxhQUFhLENBQUM7U0FDMUMsT0FBTyxDQUFDLHVCQUF1QixFQUFFLEVBQUUsRUFBRSxzQkFBc0IsQ0FBQztTQUM1RCxPQUFPLENBQUMsbUJBQW1CLEVBQUUsRUFBRSxFQUFFLGtCQUFrQixDQUFDO1NBQ3BELE9BQU8sQ0FBQyw0QkFBNEIsRUFBRSxFQUFFLEVBQUUsNkJBQTZCLENBQUM7U0FDeEUsT0FBTyxDQUFDLHFCQUFxQixFQUFFLEVBQUUsRUFBRSxvQkFBb0IsQ0FBQztTQUN4RCxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxFQUFFLGVBQWUsQ0FBQztTQUM5QyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsS0FBSyxFQUFFLGdCQUFnQixDQUFDO1NBQ25ELE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLEVBQUUsZUFBZSxDQUFDO1NBQzlDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsRUFBRSxFQUFFLGFBQWEsQ0FBQztTQUMxQyxJQUFJLENBQUMsR0FBRyxDQUFDO1NBQ1QsTUFBTSxFQUFFLENBQUM7QUFDZCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTENcbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQge3J1blBhcnNlcldpdGhDb21wbGV0ZWRGdW5jdGlvbnN9IGZyb20gJy4vdXRpbHMveWFyZ3MuanMnO1xuXG5pbXBvcnQge2J1aWxkQ2FyZXRha2VyUGFyc2VyfSBmcm9tICcuL2NhcmV0YWtlci9jbGkuanMnO1xuaW1wb3J0IHtidWlsZENvbW1pdE1lc3NhZ2VQYXJzZXJ9IGZyb20gJy4vY29tbWl0LW1lc3NhZ2UvY2xpLmpzJztcbmltcG9ydCB7YnVpbGRGb3JtYXRQYXJzZXJ9IGZyb20gJy4vZm9ybWF0L2NsaS5qcyc7XG5pbXBvcnQge2J1aWxkTWlzY1BhcnNlcn0gZnJvbSAnLi9taXNjL2NsaS5qcyc7XG5pbXBvcnQge2J1aWxkTmdib3RQYXJzZXJ9IGZyb20gJy4vbmdib3QvY2xpLmpzJztcbmltcG9ydCB7YnVpbGRQclBhcnNlcn0gZnJvbSAnLi9wci9jbGkuanMnO1xuaW1wb3J0IHtidWlsZFB1bGxhcHByb3ZlUGFyc2VyfSBmcm9tICcuL3B1bGxhcHByb3ZlL2NsaS5qcyc7XG5pbXBvcnQge2J1aWxkUmVsZWFzZVBhcnNlcn0gZnJvbSAnLi9yZWxlYXNlL2NsaS5qcyc7XG5pbXBvcnQge3RzQ2lyY3VsYXJEZXBlbmRlbmNpZXNCdWlsZGVyfSBmcm9tICcuL3RzLWNpcmN1bGFyLWRlcGVuZGVuY2llcy9pbmRleC5qcyc7XG5pbXBvcnQge2NhcHR1cmVMb2dPdXRwdXRGb3JDb21tYW5kfSBmcm9tICcuL3V0aWxzL2xvZ2dpbmcuanMnO1xuaW1wb3J0IHtidWlsZEF1dGhQYXJzZXJ9IGZyb20gJy4vYXV0aC9jbGkuanMnO1xuaW1wb3J0IHtidWlsZFBlcmZQYXJzZXJ9IGZyb20gJy4vcGVyZi9jbGkuanMnO1xuaW1wb3J0IHtidWlsZEFpUGFyc2VyfSBmcm9tICcuL2FpL2NsaS5qcyc7XG5pbXBvcnQge0FyZ3Z9IGZyb20gJ3lhcmdzJztcblxucnVuUGFyc2VyV2l0aENvbXBsZXRlZEZ1bmN0aW9ucygoeWFyZ3M6IEFyZ3YpID0+IHtcbiAgcmV0dXJuIHlhcmdzXG4gICAgLnNjcmlwdE5hbWUoJ25nLWRldicpXG4gICAgLm1pZGRsZXdhcmUoY2FwdHVyZUxvZ091dHB1dEZvckNvbW1hbmQsIHRydWUpXG4gICAgLmRlbWFuZENvbW1hbmQoKVxuICAgIC5yZWNvbW1lbmRDb21tYW5kcygpXG4gICAgLmNvbW1hbmQoJ2F1dGggPGNvbW1hbmQ+JywgZmFsc2UsIGJ1aWxkQXV0aFBhcnNlcilcbiAgICAuY29tbWFuZCgnY29tbWl0LW1lc3NhZ2UgPGNvbW1hbmQ+JywgJycsIGJ1aWxkQ29tbWl0TWVzc2FnZVBhcnNlcilcbiAgICAuY29tbWFuZCgnZm9ybWF0IDxjb21tYW5kPicsICcnLCBidWlsZEZvcm1hdFBhcnNlcilcbiAgICAuY29tbWFuZCgncHIgPGNvbW1hbmQ+JywgJycsIGJ1aWxkUHJQYXJzZXIpXG4gICAgLmNvbW1hbmQoJ3B1bGxhcHByb3ZlIDxjb21tYW5kPicsICcnLCBidWlsZFB1bGxhcHByb3ZlUGFyc2VyKVxuICAgIC5jb21tYW5kKCdyZWxlYXNlIDxjb21tYW5kPicsICcnLCBidWlsZFJlbGVhc2VQYXJzZXIpXG4gICAgLmNvbW1hbmQoJ3RzLWNpcmN1bGFyLWRlcHMgPGNvbW1hbmQ+JywgJycsIHRzQ2lyY3VsYXJEZXBlbmRlbmNpZXNCdWlsZGVyKVxuICAgIC5jb21tYW5kKCdjYXJldGFrZXIgPGNvbW1hbmQ+JywgJycsIGJ1aWxkQ2FyZXRha2VyUGFyc2VyKVxuICAgIC5jb21tYW5kKCdtaXNjIDxjb21tYW5kPicsICcnLCBidWlsZE1pc2NQYXJzZXIpXG4gICAgLmNvbW1hbmQoJ25nYm90IDxjb21tYW5kPicsIGZhbHNlLCBidWlsZE5nYm90UGFyc2VyKVxuICAgIC5jb21tYW5kKCdwZXJmIDxjb21tYW5kPicsICcnLCBidWlsZFBlcmZQYXJzZXIpXG4gICAgLmNvbW1hbmQoJ2FpIDxjb21tYW5kPicsICcnLCBidWlsZEFpUGFyc2VyKVxuICAgIC53cmFwKDEyMClcbiAgICAuc3RyaWN0KCk7XG59KTtcbiJdfQ==