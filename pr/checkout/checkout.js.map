{"version":3,"file":"checkout.js","sourceRoot":"","sources":["checkout.ts"],"names":[],"mappings":"AAQA,OAAO,EAAC,sBAAsB,EAAC,MAAM,6CAA6C,CAAC;AACnF,OAAO,EAAC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAC,MAAM,wBAAwB,CAAC;AACvD,OAAO,EAAC,0BAA0B,EAAC,MAAM,0BAA0B,CAAC;AACpE,OAAO,EAAC,MAAM,EAAC,MAAM,uBAAuB,CAAC;AAC7C,OAAO,EAAC,sBAAsB,EAAC,MAAM,aAAa,CAAC;AACnD,OAAO,EAAC,oBAAoB,EAAC,MAAM,eAAe,CAAC;AAQnD,MAAM,CAAC,KAAK,UAAU,mBAAmB,CAAC,MAAiC;IACzE,MAAM,EAAC,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAC,GAAG,MAAM,CAAC;IAEtC,MAAM,GAAG,GAAG,MAAM,sBAAsB,CAAC,GAAG,EAAE,CAAC;IAE/C,IAAI,QAAQ,IAAI,MAAM,EAAE,CAAC;QACvB,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,sEAAsE,CAAC,CAAC;QAC9F,OAAO;IACT,CAAC;IAGD,IAAI,GAAG,CAAC,qBAAqB,EAAE,EAAE,CAAC;QAChC,GAAG,CAAC,KAAK,CACP,IAAI,GAAG,CAAC,GAAG,CAAC,wFAAwF,CACrG,CAAC;QACF,OAAO;IACT,CAAC;IAED,MAAM,mBAAmB,GAAG,MAAM,0BAA0B,CAAC,EAAE,EAAE;QAC/D,6BAA6B,EAAE,IAAI;KACpC,CAAC,CAAC;IAEH,IAAI,QAAQ,EAAE,CAAC;QACb,OAAO,MAAM,oBAAoB,CAAC,EAAE,EAAE,mBAAmB,CAAC,CAAC;IAC7D,CAAC;IAED,IAAI,MAAM,EAAE,CAAC;QACX,OAAO,MAAM,sBAAsB,CAAC,EAAE,EAAE,MAAM,EAAE,mBAAmB,CAAC,CAAC;IACvE,CAAC;IAKD,MAAM,mBAAmB,GAAG,mBAAmB,CAAC,WAAW,CAAC,mBAAmB,CAAC;IAEhF,IAAI,CAAC,mBAAmB,EAAE,CAAC;QACzB,GAAG,CAAC,IAAI,CAAC,+EAA+E,CAAC,CAAC;QAC1F,GAAG,CAAC,IAAI,CAAC,kFAAkF,CAAC,CAAC;QAC7F,GAAG,CAAC,IAAI,CAAC,iFAAiF,CAAC,CAAC;QAC5F,GAAG,CAAC,IAAI,CAAC,gFAAgF,CAAC,CAAC;QAC3F,GAAG,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;QAE/C,IACE,MAAM,MAAM,CAAC,OAAO,CAAC;YACnB,OAAO,EAAE,mDAAmD;YAC5D,OAAO,EAAE,IAAI;SACd,CAAC,EACF,CAAC;YACD,OAAO,MAAM,oBAAoB,CAAC,EAAE,EAAE,mBAAmB,CAAC,CAAC;QAC7D,CAAC;IACH,CAAC;IAED,GAAG,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,oDAAoD,EAAE,EAAE,CAAC,CAAC;IACjF,IAAI,mBAAmB,EAAE,CAAC;QACxB,GAAG,CAAC,IAAI,CAAC,2EAA2E,CAAC,CAAC;QACtF,GAAG,CAAC,IAAI,CAAC,OAAO,mBAAmB,CAAC,qBAAqB,EAAE,CAAC,CAAC;IAC/D,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AuthenticatedGitClient} from '../../utils/git/authenticated-git-client.js';\nimport {green, Log, red} from '../../utils/logging.js';\nimport {checkOutPullRequestLocally} from '../common/checkout-pr.js';\nimport {Prompt} from '../../utils/prompt.js';\nimport {checkoutToTargetBranch} from './target.js';\nimport {checkoutAsPrTakeover} from './takeover.js';\n\nexport interface CheckoutPullRequestParams {\n  pr: number;\n  takeover?: boolean;\n  target?: string;\n}\n\nexport async function checkoutPullRequest(params: CheckoutPullRequestParams): Promise<void> {\n  const {pr, takeover, target} = params;\n  /** An authenticated git client. */\n  const git = await AuthenticatedGitClient.get();\n\n  if (takeover && target) {\n    Log.error(` ${red('✘')} The --takeover and --target flags cannot be provided simultaneously`);\n    return;\n  }\n\n  // Make sure the local repository is clean.\n  if (git.hasUncommittedChanges()) {\n    Log.error(\n      ` ${red('✘')} Local working repository not clean. Please make sure there are no uncommitted changes`,\n    );\n    return;\n  }\n\n  const localCheckoutResult = await checkOutPullRequestLocally(pr, {\n    allowIfMaintainerCannotModify: true,\n  });\n\n  if (takeover) {\n    return await checkoutAsPrTakeover(pr, localCheckoutResult);\n  }\n\n  if (target) {\n    return await checkoutToTargetBranch(pr, target, localCheckoutResult);\n  }\n\n  /**\n   * Whether the pull request is configured to allow for the maintainers to modify the pull request.\n   */\n  const maintainerCanModify = localCheckoutResult.pullRequest.maintainerCanModify;\n\n  if (!maintainerCanModify) {\n    Log.info('The author of this pull request does not allow maintainers to modify the pull');\n    Log.info('request. Since you will not be able to push changes to the original pull request');\n    Log.info('you will instead need to perform a \"takeover.\" In a takeover, the original pull');\n    Log.info('request will be checked out, the commits are modified to close the original on');\n    Log.info('merge of the newly created branch.');\n\n    if (\n      await Prompt.confirm({\n        message: `Would you like to create a takeover pull request?`,\n        default: true,\n      })\n    ) {\n      return await checkoutAsPrTakeover(pr, localCheckoutResult);\n    }\n  }\n\n  Log.info(` ${green('✔')} Checked out the remote branch for pull request #${pr}`);\n  if (maintainerCanModify) {\n    Log.info('To push the checked out branch back to its PR, run the following command:');\n    Log.info(`  $ ${localCheckoutResult.pushToUpstreamCommand}`);\n  }\n}\n"]}