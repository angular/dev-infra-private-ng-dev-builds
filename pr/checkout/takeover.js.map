{"version":3,"file":"takeover.js","sourceRoot":"","sources":["takeover.ts"],"names":[],"mappings":"AAQA,OAAO,EAAC,OAAO,EAAE,IAAI,EAAC,MAAM,MAAM,CAAC;AACnC,OAAO,EAAC,sBAAsB,EAAC,MAAM,6CAA6C,CAAC;AACnF,OAAO,EAAC,IAAI,EAAE,KAAK,EAAE,GAAG,EAAC,MAAM,wBAAwB,CAAC;AACxD,OAAO,EAAC,MAAM,EAAC,MAAM,uBAAuB,CAAC;AAE7C,OAAO,EAAC,aAAa,EAAC,MAAM,KAAK,CAAC;AAGlC,MAAM,gBAAgB,GAAG,CAAC,eAAe,CAAC,CAAC;AAK3C,MAAM,CAAC,KAAK,UAAU,oBAAoB,CACxC,QAAgB,EAChB,EAAC,aAAa,EAAE,WAAW,EAAyD;IAGpF,MAAM,GAAG,GAAG,MAAM,sBAAsB,CAAC,GAAG,EAAE,CAAC;IAE/C,MAAM,UAAU,GAAG,eAAe,QAAQ,EAAE,CAAC;IAE7C,IAAI,GAAG,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,IAAI,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QAC9E,GAAG,CAAC,KAAK,CAAC,6BAA6B,UAAU,2BAA2B,CAAC,CAAC;QAC9E,OAAO;IACT,CAAC;IAID,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;QACzD,GAAG,CAAC,IAAI,CACN,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,kDAAkD,CACvF,CAAC;QACF,GAAG,CAAC,IAAI,CAAC,0BAA0B,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;QACxE,IACE,MAAM,MAAM,CAAC,OAAO,CAAC;YACnB,OAAO,EAAE,6CAA6C;YACtD,OAAO,EAAE,IAAI;SACd,CAAC,EACF,CAAC;YACD,GAAG,CAAC,KAAK,CAAC,4CAA4C,CAAC,CAAC;QAC1D,CAAC;aAAM,CAAC;YACN,GAAG,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;YAChC,aAAa,EAAE,CAAC;YAChB,OAAO;QACT,CAAC;IACH,CAAC;IAED,GAAG,CAAC,IAAI,CAAC,qDAAqD,CAAC,CAAC;IAChE,GAAG,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC;IAE9C,GAAG,CAAC,IAAI,CAAC,yDAAyD,CAAC,CAAC;IACpE,GAAG,CAAC,GAAG,CAAC;QACN,eAAe;QACf,IAAI;QACJ,cAAc;QACd,GAAG,gCAAgC,EAAE,IAAI,QAAQ,EAAE;QACnD,GAAG,WAAW,CAAC,UAAU,QAAQ;KAClC,CAAC,CAAC;IAEH,GAAG,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,8BAA8B,QAAQ,iBAAiB,UAAU,EAAE,CAAC,CAAC;AAC9F,CAAC;AAGD,SAAS,gCAAgC;IAKvC,MAAM,UAAU,GAAG,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3D,OAAO,IAAI,CAAC,UAAU,EAAE,yCAAyC,CAAC,CAAC;AACrE,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {dirname, join} from 'path';\nimport {AuthenticatedGitClient} from '../../utils/git/authenticated-git-client.js';\nimport {bold, green, Log} from '../../utils/logging.js';\nimport {Prompt} from '../../utils/prompt.js';\nimport {checkOutPullRequestLocally} from '../common/checkout-pr.js';\nimport {fileURLToPath} from 'url';\n\n/** List of accounts that are supported for takeover. */\nconst takeoverAccounts = ['angular-robot'];\n\n/**\n * Checkout the provided pull request in preperation for a new takeover pull request to be made\n */\nexport async function checkoutAsPrTakeover(\n  prNumber: number,\n  {resetGitState, pullRequest}: Awaited<ReturnType<typeof checkOutPullRequestLocally>>,\n) {\n  /** An authenticated git client. */\n  const git = await AuthenticatedGitClient.get();\n  /** The branch name to be used for the takeover attempt. */\n  const branchName = `pr-takeover-${prNumber}`;\n\n  if (git.runGraceful(['rev-parse', '-q', '--verify', branchName]).status === 0) {\n    Log.error(` ✘ Expected branch name \\`${branchName}\\` already exists locally`);\n    return;\n  }\n\n  // Validate that the takeover attempt is being made against a pull request created by an\n  // expected account.\n  if (!takeoverAccounts.includes(pullRequest.author.login)) {\n    Log.warn(\n      ` ⚠ ${bold(pullRequest.author.login)} is not an account fully supported for takeover.`,\n    );\n    Log.warn(`   Supported accounts: ${bold(takeoverAccounts.join(', '))}`);\n    if (\n      await Prompt.confirm({\n        message: `Continue with pull request takeover anyway?`,\n        default: true,\n      })\n    ) {\n      Log.debug('Continuing per user confirmation in prompt');\n    } else {\n      Log.info('Aborting takeover..');\n      resetGitState();\n      return;\n    }\n  }\n\n  Log.info(`Setting local branch name based on the pull request`);\n  git.run(['checkout', '-q', '-b', branchName]);\n\n  Log.info('Updating commit messages to close previous pull request');\n  git.run([\n    'filter-branch',\n    '-f',\n    '--msg-filter',\n    `${getCommitMessageFilterScriptPath()} ${prNumber}`,\n    `${pullRequest.baseRefOid}..HEAD`,\n  ]);\n\n  Log.info(` ${green('✔')} Checked out pull request #${prNumber} into branch: ${branchName}`);\n}\n\n/** Gets the absolute file path to the commit-message filter script. */\nfunction getCommitMessageFilterScriptPath(): string {\n  // This file is getting bundled and ends up in `<pkg-root>/bundles/<chunk>`. We also\n  // bundle the commit-message-filter script as another entry-point and can reference\n  // it relatively as the path is preserved inside `bundles/`.\n  // *Note*: Relying on package resolution is problematic within ESM and with `local-dev.sh`\n  const bundlesDir = dirname(fileURLToPath(import.meta.url));\n  return join(bundlesDir, './pr/checkout/commit-message-filter.mjs');\n}\n"]}