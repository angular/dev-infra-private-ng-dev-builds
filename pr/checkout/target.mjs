/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ActiveReleaseTrains } from '../../release/versioning/active-release-trains.js';
import { getNextBranchName } from '../../release/versioning/version-branches.js';
import { AuthenticatedGitClient } from '../../utils/git/authenticated-git-client.js';
import { addTokenToGitHttpsUrl } from '../../utils/git/github-urls.js';
import { green, Log, yellow } from '../../utils/logging.js';
export async function checkoutToTargetBranch(prNumber, target, { pullRequest }) {
    /** An authenticated git client. */
    const git = await AuthenticatedGitClient.get();
    const config = git.config;
    const branchName = `pr-${target.toLowerCase().replaceAll(/[\W_]/gm, '-')}-${prNumber}`;
    const { owner, name: repo } = config.github;
    const activeReleaseTrains = await ActiveReleaseTrains.fetch({
        name: repo,
        owner: owner,
        nextBranchName: getNextBranchName(config.github),
        api: git.github,
    });
    let targetBranch = target;
    let targetName = target;
    if (target === 'patch' ||
        target === 'latest' ||
        activeReleaseTrains.latest.branchName === target) {
        targetName = 'patch';
        targetBranch = activeReleaseTrains.latest.branchName;
    }
    else if (target === 'main' ||
        target === 'next' ||
        target === 'minor' ||
        activeReleaseTrains.next.branchName === target) {
        targetName = 'main';
        targetBranch = activeReleaseTrains.next.branchName;
    }
    else if (activeReleaseTrains.releaseCandidate &&
        (target === 'rc' || activeReleaseTrains.releaseCandidate.branchName === target)) {
        targetName = 'rc';
        targetBranch = activeReleaseTrains.releaseCandidate.branchName;
    }
    Log.info(`Targeting '${targetBranch}' branch\n`);
    const baseRefUrl = addTokenToGitHttpsUrl(pullRequest.baseRef.repository.url, git.githubToken);
    git.run(['checkout', '-q', targetBranch]);
    git.run(['fetch', '-q', baseRefUrl, targetBranch, '--deepen=500']);
    git.run(['checkout', '-b', branchName]);
    Log.info(`Running cherry-pick`);
    try {
        const revisionRange = `${pullRequest.baseRefOid}..${pullRequest.headRefOid}`;
        git.run(['cherry-pick', revisionRange]);
        Log.info(` ${green('✔')} Cherry-pick is complete. You can now push to create a new pull request.`);
    }
    catch {
        Log.info(` ${yellow('⚠')} Cherry-pick resulted in conflicts. Please resolve them manually and push to create your patch PR`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFyZ2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbmctZGV2L3ByL2NoZWNrb3V0L3RhcmdldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSxtREFBbUQsQ0FBQztBQUN0RixPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSw4Q0FBOEMsQ0FBQztBQUMvRSxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSw2Q0FBNkMsQ0FBQztBQUNuRixPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNyRSxPQUFPLEVBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUcxRCxNQUFNLENBQUMsS0FBSyxVQUFVLHNCQUFzQixDQUMxQyxRQUFnQixFQUNoQixNQUFjLEVBQ2QsRUFBQyxXQUFXLEVBQXlEO0lBRXJFLG1DQUFtQztJQUNuQyxNQUFNLEdBQUcsR0FBRyxNQUFNLHNCQUFzQixDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQy9DLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7SUFFMUIsTUFBTSxVQUFVLEdBQUcsTUFBTSxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsSUFBSSxRQUFRLEVBQUUsQ0FBQztJQUN2RixNQUFNLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQzFDLE1BQU0sbUJBQW1CLEdBQUcsTUFBTSxtQkFBbUIsQ0FBQyxLQUFLLENBQUM7UUFDMUQsSUFBSSxFQUFFLElBQUk7UUFDVixLQUFLLEVBQUUsS0FBSztRQUNaLGNBQWMsRUFBRSxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ2hELEdBQUcsRUFBRSxHQUFHLENBQUMsTUFBTTtLQUNoQixDQUFDLENBQUM7SUFFSCxJQUFJLFlBQVksR0FBRyxNQUFNLENBQUM7SUFDMUIsSUFBSSxVQUFVLEdBQUcsTUFBTSxDQUFDO0lBRXhCLElBQ0UsTUFBTSxLQUFLLE9BQU87UUFDbEIsTUFBTSxLQUFLLFFBQVE7UUFDbkIsbUJBQW1CLENBQUMsTUFBTSxDQUFDLFVBQVUsS0FBSyxNQUFNLEVBQ2hELENBQUM7UUFDRCxVQUFVLEdBQUcsT0FBTyxDQUFDO1FBQ3JCLFlBQVksR0FBRyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDO0lBQ3ZELENBQUM7U0FBTSxJQUNMLE1BQU0sS0FBSyxNQUFNO1FBQ2pCLE1BQU0sS0FBSyxNQUFNO1FBQ2pCLE1BQU0sS0FBSyxPQUFPO1FBQ2xCLG1CQUFtQixDQUFDLElBQUksQ0FBQyxVQUFVLEtBQUssTUFBTSxFQUM5QyxDQUFDO1FBQ0QsVUFBVSxHQUFHLE1BQU0sQ0FBQztRQUNwQixZQUFZLEdBQUcsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUNyRCxDQUFDO1NBQU0sSUFDTCxtQkFBbUIsQ0FBQyxnQkFBZ0I7UUFDcEMsQ0FBQyxNQUFNLEtBQUssSUFBSSxJQUFJLG1CQUFtQixDQUFDLGdCQUFnQixDQUFDLFVBQVUsS0FBSyxNQUFNLENBQUMsRUFDL0UsQ0FBQztRQUNELFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDbEIsWUFBWSxHQUFHLG1CQUFtQixDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQztJQUNqRSxDQUFDO0lBQ0QsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLFlBQVksWUFBWSxDQUFDLENBQUM7SUFFakQsTUFBTSxVQUFVLEdBQUcscUJBQXFCLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUU5RixHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO0lBQzFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQztJQUNuRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBRXhDLEdBQUcsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUVoQyxJQUFJLENBQUM7UUFDSCxNQUFNLGFBQWEsR0FBRyxHQUFHLFdBQVcsQ0FBQyxVQUFVLEtBQUssV0FBVyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQzdFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxhQUFhLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUN4QyxHQUFHLENBQUMsSUFBSSxDQUNOLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQywwRUFBMEUsQ0FDekYsQ0FBQztJQUNKLENBQUM7SUFBQyxNQUFNLENBQUM7UUFDUCxHQUFHLENBQUMsSUFBSSxDQUNOLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxtR0FBbUcsQ0FDbkgsQ0FBQztJQUNKLENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTENcbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7QWN0aXZlUmVsZWFzZVRyYWluc30gZnJvbSAnLi4vLi4vcmVsZWFzZS92ZXJzaW9uaW5nL2FjdGl2ZS1yZWxlYXNlLXRyYWlucy5qcyc7XG5pbXBvcnQge2dldE5leHRCcmFuY2hOYW1lfSBmcm9tICcuLi8uLi9yZWxlYXNlL3ZlcnNpb25pbmcvdmVyc2lvbi1icmFuY2hlcy5qcyc7XG5pbXBvcnQge0F1dGhlbnRpY2F0ZWRHaXRDbGllbnR9IGZyb20gJy4uLy4uL3V0aWxzL2dpdC9hdXRoZW50aWNhdGVkLWdpdC1jbGllbnQuanMnO1xuaW1wb3J0IHthZGRUb2tlblRvR2l0SHR0cHNVcmx9IGZyb20gJy4uLy4uL3V0aWxzL2dpdC9naXRodWItdXJscy5qcyc7XG5pbXBvcnQge2dyZWVuLCBMb2csIHllbGxvd30gZnJvbSAnLi4vLi4vdXRpbHMvbG9nZ2luZy5qcyc7XG5pbXBvcnQge2NoZWNrT3V0UHVsbFJlcXVlc3RMb2NhbGx5fSBmcm9tICcuLi9jb21tb24vY2hlY2tvdXQtcHIuanMnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2hlY2tvdXRUb1RhcmdldEJyYW5jaChcbiAgcHJOdW1iZXI6IG51bWJlcixcbiAgdGFyZ2V0OiBzdHJpbmcsXG4gIHtwdWxsUmVxdWVzdH06IEF3YWl0ZWQ8UmV0dXJuVHlwZTx0eXBlb2YgY2hlY2tPdXRQdWxsUmVxdWVzdExvY2FsbHk+Pixcbikge1xuICAvKiogQW4gYXV0aGVudGljYXRlZCBnaXQgY2xpZW50LiAqL1xuICBjb25zdCBnaXQgPSBhd2FpdCBBdXRoZW50aWNhdGVkR2l0Q2xpZW50LmdldCgpO1xuICBjb25zdCBjb25maWcgPSBnaXQuY29uZmlnO1xuXG4gIGNvbnN0IGJyYW5jaE5hbWUgPSBgcHItJHt0YXJnZXQudG9Mb3dlckNhc2UoKS5yZXBsYWNlQWxsKC9bXFxXX10vZ20sICctJyl9LSR7cHJOdW1iZXJ9YDtcbiAgY29uc3Qge293bmVyLCBuYW1lOiByZXBvfSA9IGNvbmZpZy5naXRodWI7XG4gIGNvbnN0IGFjdGl2ZVJlbGVhc2VUcmFpbnMgPSBhd2FpdCBBY3RpdmVSZWxlYXNlVHJhaW5zLmZldGNoKHtcbiAgICBuYW1lOiByZXBvLFxuICAgIG93bmVyOiBvd25lcixcbiAgICBuZXh0QnJhbmNoTmFtZTogZ2V0TmV4dEJyYW5jaE5hbWUoY29uZmlnLmdpdGh1YiksXG4gICAgYXBpOiBnaXQuZ2l0aHViLFxuICB9KTtcblxuICBsZXQgdGFyZ2V0QnJhbmNoID0gdGFyZ2V0O1xuICBsZXQgdGFyZ2V0TmFtZSA9IHRhcmdldDtcblxuICBpZiAoXG4gICAgdGFyZ2V0ID09PSAncGF0Y2gnIHx8XG4gICAgdGFyZ2V0ID09PSAnbGF0ZXN0JyB8fFxuICAgIGFjdGl2ZVJlbGVhc2VUcmFpbnMubGF0ZXN0LmJyYW5jaE5hbWUgPT09IHRhcmdldFxuICApIHtcbiAgICB0YXJnZXROYW1lID0gJ3BhdGNoJztcbiAgICB0YXJnZXRCcmFuY2ggPSBhY3RpdmVSZWxlYXNlVHJhaW5zLmxhdGVzdC5icmFuY2hOYW1lO1xuICB9IGVsc2UgaWYgKFxuICAgIHRhcmdldCA9PT0gJ21haW4nIHx8XG4gICAgdGFyZ2V0ID09PSAnbmV4dCcgfHxcbiAgICB0YXJnZXQgPT09ICdtaW5vcicgfHxcbiAgICBhY3RpdmVSZWxlYXNlVHJhaW5zLm5leHQuYnJhbmNoTmFtZSA9PT0gdGFyZ2V0XG4gICkge1xuICAgIHRhcmdldE5hbWUgPSAnbWFpbic7XG4gICAgdGFyZ2V0QnJhbmNoID0gYWN0aXZlUmVsZWFzZVRyYWlucy5uZXh0LmJyYW5jaE5hbWU7XG4gIH0gZWxzZSBpZiAoXG4gICAgYWN0aXZlUmVsZWFzZVRyYWlucy5yZWxlYXNlQ2FuZGlkYXRlICYmXG4gICAgKHRhcmdldCA9PT0gJ3JjJyB8fCBhY3RpdmVSZWxlYXNlVHJhaW5zLnJlbGVhc2VDYW5kaWRhdGUuYnJhbmNoTmFtZSA9PT0gdGFyZ2V0KVxuICApIHtcbiAgICB0YXJnZXROYW1lID0gJ3JjJztcbiAgICB0YXJnZXRCcmFuY2ggPSBhY3RpdmVSZWxlYXNlVHJhaW5zLnJlbGVhc2VDYW5kaWRhdGUuYnJhbmNoTmFtZTtcbiAgfVxuICBMb2cuaW5mbyhgVGFyZ2V0aW5nICcke3RhcmdldEJyYW5jaH0nIGJyYW5jaFxcbmApO1xuXG4gIGNvbnN0IGJhc2VSZWZVcmwgPSBhZGRUb2tlblRvR2l0SHR0cHNVcmwocHVsbFJlcXVlc3QuYmFzZVJlZi5yZXBvc2l0b3J5LnVybCwgZ2l0LmdpdGh1YlRva2VuKTtcblxuICBnaXQucnVuKFsnY2hlY2tvdXQnLCAnLXEnLCB0YXJnZXRCcmFuY2hdKTtcbiAgZ2l0LnJ1bihbJ2ZldGNoJywgJy1xJywgYmFzZVJlZlVybCwgdGFyZ2V0QnJhbmNoLCAnLS1kZWVwZW49NTAwJ10pO1xuICBnaXQucnVuKFsnY2hlY2tvdXQnLCAnLWInLCBicmFuY2hOYW1lXSk7XG5cbiAgTG9nLmluZm8oYFJ1bm5pbmcgY2hlcnJ5LXBpY2tgKTtcblxuICB0cnkge1xuICAgIGNvbnN0IHJldmlzaW9uUmFuZ2UgPSBgJHtwdWxsUmVxdWVzdC5iYXNlUmVmT2lkfS4uJHtwdWxsUmVxdWVzdC5oZWFkUmVmT2lkfWA7XG4gICAgZ2l0LnJ1bihbJ2NoZXJyeS1waWNrJywgcmV2aXNpb25SYW5nZV0pO1xuICAgIExvZy5pbmZvKFxuICAgICAgYCAke2dyZWVuKCfinJQnKX0gQ2hlcnJ5LXBpY2sgaXMgY29tcGxldGUuIFlvdSBjYW4gbm93IHB1c2ggdG8gY3JlYXRlIGEgbmV3IHB1bGwgcmVxdWVzdC5gLFxuICAgICk7XG4gIH0gY2F0Y2gge1xuICAgIExvZy5pbmZvKFxuICAgICAgYCAke3llbGxvdygn4pqgJyl9IENoZXJyeS1waWNrIHJlc3VsdGVkIGluIGNvbmZsaWN0cy4gUGxlYXNlIHJlc29sdmUgdGhlbSBtYW51YWxseSBhbmQgcHVzaCB0byBjcmVhdGUgeW91ciBwYXRjaCBQUmAsXG4gICAgKTtcbiAgfVxufVxuIl19