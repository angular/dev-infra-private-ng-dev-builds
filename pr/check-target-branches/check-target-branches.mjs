/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { assertValidGithubConfig, getConfig } from '../../utils/config.js';
import { Log } from '../../utils/logging.js';
import { GitClient } from '../../utils/git/git-client.js';
import { assertValidPullRequestConfig } from '../config/index.js';
import { getTargetBranchesAndLabelForPullRequest } from '../common/targeting/target-label.js';
import { ActiveReleaseTrains } from '../../release/versioning/active-release-trains.js';
import { getNextBranchName } from '../../release/versioning/version-branches.js';
async function getTargetBranchesForPr(prNumber, config) {
    /** Repo owner and name for the github repository. */
    const { owner, name: repo } = config.github;
    /** The singleton instance of the GitClient. */
    const git = await GitClient.get();
    /** The current state of the pull request from Github. */
    const prData = (await git.github.pulls.get({ owner, repo, pull_number: prNumber })).data;
    /** The list of labels on the PR as strings. */
    const labels = prData.labels.map((l) => l.name);
    /** The branch targeted via the Github UI. */
    const githubTargetBranch = prData.base.ref;
    const activeReleaseTrains = await ActiveReleaseTrains.fetch({
        name: repo,
        owner: owner,
        nextBranchName: getNextBranchName(config.github),
        api: git.github,
    });
    // Note: We do not pass a list of commits here because we did not fetch this information
    // and the commits are only used for validation (which we can skip here).
    return getTargetBranchesAndLabelForPullRequest(activeReleaseTrains, git.github, config, labels, githubTargetBranch);
}
export async function printTargetBranchesForPr(prNumber) {
    const config = await getConfig();
    assertValidGithubConfig(config);
    assertValidPullRequestConfig(config);
    if (config.pullRequest.__noTargetLabeling) {
        Log.info(`This repository does not use target labeling (special flag enabled).`);
        Log.info(`PR #${prNumber} will merge into: ${config.github.mainBranchName}`);
        return;
    }
    const target = await getTargetBranchesForPr(prNumber, config);
    Log.info(`PR has the following target label: ${target.label.name}`);
    Log.info.group(`PR #${prNumber} will merge into:`);
    target.branches.forEach((name) => Log.info(`- ${name}`));
    Log.info.groupEnd();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2stdGFyZ2V0LWJyYW5jaGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbmctZGV2L3ByL2NoZWNrLXRhcmdldC1icmFuY2hlcy9jaGVjay10YXJnZXQtYnJhbmNoZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxFQUFDLHVCQUF1QixFQUFFLFNBQVMsRUFBNEIsTUFBTSx1QkFBdUIsQ0FBQztBQUNwRyxPQUFPLEVBQUMsR0FBRyxFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFDM0MsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLCtCQUErQixDQUFDO0FBQ3hELE9BQU8sRUFBQyw0QkFBNEIsRUFBb0IsTUFBTSxvQkFBb0IsQ0FBQztBQUNuRixPQUFPLEVBQUMsdUNBQXVDLEVBQUMsTUFBTSxxQ0FBcUMsQ0FBQztBQUM1RixPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSxtREFBbUQsQ0FBQztBQUN0RixPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSw4Q0FBOEMsQ0FBQztBQUUvRSxLQUFLLFVBQVUsc0JBQXNCLENBQ25DLFFBQWdCLEVBQ2hCLE1BQTJFO0lBRTNFLHFEQUFxRDtJQUNyRCxNQUFNLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQzFDLCtDQUErQztJQUMvQyxNQUFNLEdBQUcsR0FBRyxNQUFNLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUVsQyx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDdkYsK0NBQStDO0lBQy9DLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEQsNkNBQTZDO0lBQzdDLE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7SUFFM0MsTUFBTSxtQkFBbUIsR0FBRyxNQUFNLG1CQUFtQixDQUFDLEtBQUssQ0FBQztRQUMxRCxJQUFJLEVBQUUsSUFBSTtRQUNWLEtBQUssRUFBRSxLQUFLO1FBQ1osY0FBYyxFQUFFLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDaEQsR0FBRyxFQUFFLEdBQUcsQ0FBQyxNQUFNO0tBQ2hCLENBQUMsQ0FBQztJQUVILHdGQUF3RjtJQUN4Rix5RUFBeUU7SUFDekUsT0FBTyx1Q0FBdUMsQ0FDNUMsbUJBQW1CLEVBQ25CLEdBQUcsQ0FBQyxNQUFNLEVBQ1YsTUFBTSxFQUNOLE1BQU0sRUFDTixrQkFBa0IsQ0FDbkIsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLHdCQUF3QixDQUFDLFFBQWdCO0lBQzdELE1BQU0sTUFBTSxHQUFHLE1BQU0sU0FBUyxFQUFFLENBQUM7SUFDakMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDaEMsNEJBQTRCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFckMsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDMUMsR0FBRyxDQUFDLElBQUksQ0FBQyxzRUFBc0UsQ0FBQyxDQUFDO1FBQ2pGLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxRQUFRLHFCQUFxQixNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7UUFDN0UsT0FBTztJQUNULENBQUM7SUFFRCxNQUFNLE1BQU0sR0FBRyxNQUFNLHNCQUFzQixDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM5RCxHQUFHLENBQUMsSUFBSSxDQUFDLHNDQUFzQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDcEUsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxRQUFRLG1CQUFtQixDQUFDLENBQUM7SUFDbkQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekQsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUN0QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTENcbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7YXNzZXJ0VmFsaWRHaXRodWJDb25maWcsIGdldENvbmZpZywgR2l0aHViQ29uZmlnLCBOZ0RldkNvbmZpZ30gZnJvbSAnLi4vLi4vdXRpbHMvY29uZmlnLmpzJztcbmltcG9ydCB7TG9nfSBmcm9tICcuLi8uLi91dGlscy9sb2dnaW5nLmpzJztcbmltcG9ydCB7R2l0Q2xpZW50fSBmcm9tICcuLi8uLi91dGlscy9naXQvZ2l0LWNsaWVudC5qcyc7XG5pbXBvcnQge2Fzc2VydFZhbGlkUHVsbFJlcXVlc3RDb25maWcsIFB1bGxSZXF1ZXN0Q29uZmlnfSBmcm9tICcuLi9jb25maWcvaW5kZXguanMnO1xuaW1wb3J0IHtnZXRUYXJnZXRCcmFuY2hlc0FuZExhYmVsRm9yUHVsbFJlcXVlc3R9IGZyb20gJy4uL2NvbW1vbi90YXJnZXRpbmcvdGFyZ2V0LWxhYmVsLmpzJztcbmltcG9ydCB7QWN0aXZlUmVsZWFzZVRyYWluc30gZnJvbSAnLi4vLi4vcmVsZWFzZS92ZXJzaW9uaW5nL2FjdGl2ZS1yZWxlYXNlLXRyYWlucy5qcyc7XG5pbXBvcnQge2dldE5leHRCcmFuY2hOYW1lfSBmcm9tICcuLi8uLi9yZWxlYXNlL3ZlcnNpb25pbmcvdmVyc2lvbi1icmFuY2hlcy5qcyc7XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFRhcmdldEJyYW5jaGVzRm9yUHIoXG4gIHByTnVtYmVyOiBudW1iZXIsXG4gIGNvbmZpZzogTmdEZXZDb25maWc8e2dpdGh1YjogR2l0aHViQ29uZmlnOyBwdWxsUmVxdWVzdDogUHVsbFJlcXVlc3RDb25maWd9Pixcbikge1xuICAvKiogUmVwbyBvd25lciBhbmQgbmFtZSBmb3IgdGhlIGdpdGh1YiByZXBvc2l0b3J5LiAqL1xuICBjb25zdCB7b3duZXIsIG5hbWU6IHJlcG99ID0gY29uZmlnLmdpdGh1YjtcbiAgLyoqIFRoZSBzaW5nbGV0b24gaW5zdGFuY2Ugb2YgdGhlIEdpdENsaWVudC4gKi9cbiAgY29uc3QgZ2l0ID0gYXdhaXQgR2l0Q2xpZW50LmdldCgpO1xuXG4gIC8qKiBUaGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgcHVsbCByZXF1ZXN0IGZyb20gR2l0aHViLiAqL1xuICBjb25zdCBwckRhdGEgPSAoYXdhaXQgZ2l0LmdpdGh1Yi5wdWxscy5nZXQoe293bmVyLCByZXBvLCBwdWxsX251bWJlcjogcHJOdW1iZXJ9KSkuZGF0YTtcbiAgLyoqIFRoZSBsaXN0IG9mIGxhYmVscyBvbiB0aGUgUFIgYXMgc3RyaW5ncy4gKi9cbiAgY29uc3QgbGFiZWxzID0gcHJEYXRhLmxhYmVscy5tYXAoKGwpID0+IGwubmFtZSk7XG4gIC8qKiBUaGUgYnJhbmNoIHRhcmdldGVkIHZpYSB0aGUgR2l0aHViIFVJLiAqL1xuICBjb25zdCBnaXRodWJUYXJnZXRCcmFuY2ggPSBwckRhdGEuYmFzZS5yZWY7XG5cbiAgY29uc3QgYWN0aXZlUmVsZWFzZVRyYWlucyA9IGF3YWl0IEFjdGl2ZVJlbGVhc2VUcmFpbnMuZmV0Y2goe1xuICAgIG5hbWU6IHJlcG8sXG4gICAgb3duZXI6IG93bmVyLFxuICAgIG5leHRCcmFuY2hOYW1lOiBnZXROZXh0QnJhbmNoTmFtZShjb25maWcuZ2l0aHViKSxcbiAgICBhcGk6IGdpdC5naXRodWIsXG4gIH0pO1xuXG4gIC8vIE5vdGU6IFdlIGRvIG5vdCBwYXNzIGEgbGlzdCBvZiBjb21taXRzIGhlcmUgYmVjYXVzZSB3ZSBkaWQgbm90IGZldGNoIHRoaXMgaW5mb3JtYXRpb25cbiAgLy8gYW5kIHRoZSBjb21taXRzIGFyZSBvbmx5IHVzZWQgZm9yIHZhbGlkYXRpb24gKHdoaWNoIHdlIGNhbiBza2lwIGhlcmUpLlxuICByZXR1cm4gZ2V0VGFyZ2V0QnJhbmNoZXNBbmRMYWJlbEZvclB1bGxSZXF1ZXN0KFxuICAgIGFjdGl2ZVJlbGVhc2VUcmFpbnMsXG4gICAgZ2l0LmdpdGh1YixcbiAgICBjb25maWcsXG4gICAgbGFiZWxzLFxuICAgIGdpdGh1YlRhcmdldEJyYW5jaCxcbiAgKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByaW50VGFyZ2V0QnJhbmNoZXNGb3JQcihwck51bWJlcjogbnVtYmVyKSB7XG4gIGNvbnN0IGNvbmZpZyA9IGF3YWl0IGdldENvbmZpZygpO1xuICBhc3NlcnRWYWxpZEdpdGh1YkNvbmZpZyhjb25maWcpO1xuICBhc3NlcnRWYWxpZFB1bGxSZXF1ZXN0Q29uZmlnKGNvbmZpZyk7XG5cbiAgaWYgKGNvbmZpZy5wdWxsUmVxdWVzdC5fX25vVGFyZ2V0TGFiZWxpbmcpIHtcbiAgICBMb2cuaW5mbyhgVGhpcyByZXBvc2l0b3J5IGRvZXMgbm90IHVzZSB0YXJnZXQgbGFiZWxpbmcgKHNwZWNpYWwgZmxhZyBlbmFibGVkKS5gKTtcbiAgICBMb2cuaW5mbyhgUFIgIyR7cHJOdW1iZXJ9IHdpbGwgbWVyZ2UgaW50bzogJHtjb25maWcuZ2l0aHViLm1haW5CcmFuY2hOYW1lfWApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHRhcmdldCA9IGF3YWl0IGdldFRhcmdldEJyYW5jaGVzRm9yUHIocHJOdW1iZXIsIGNvbmZpZyk7XG4gIExvZy5pbmZvKGBQUiBoYXMgdGhlIGZvbGxvd2luZyB0YXJnZXQgbGFiZWw6ICR7dGFyZ2V0LmxhYmVsLm5hbWV9YCk7XG4gIExvZy5pbmZvLmdyb3VwKGBQUiAjJHtwck51bWJlcn0gd2lsbCBtZXJnZSBpbnRvOmApO1xuICB0YXJnZXQuYnJhbmNoZXMuZm9yRWFjaCgobmFtZSkgPT4gTG9nLmluZm8oYC0gJHtuYW1lfWApKTtcbiAgTG9nLmluZm8uZ3JvdXBFbmQoKTtcbn1cbiJdfQ==