{"version":3,"file":"check-target-branches.js","sourceRoot":"","sources":["check-target-branches.ts"],"names":[],"mappings":"AAQA,OAAO,EAAC,uBAAuB,EAAE,SAAS,EAA4B,MAAM,uBAAuB,CAAC;AACpG,OAAO,EAAC,GAAG,EAAC,MAAM,wBAAwB,CAAC;AAC3C,OAAO,EAAC,SAAS,EAAC,MAAM,+BAA+B,CAAC;AACxD,OAAO,EAAC,4BAA4B,EAAoB,MAAM,oBAAoB,CAAC;AACnF,OAAO,EAAC,uCAAuC,EAAC,MAAM,qCAAqC,CAAC;AAC5F,OAAO,EAAC,mBAAmB,EAAC,MAAM,mDAAmD,CAAC;AACtF,OAAO,EAAC,iBAAiB,EAAC,MAAM,8CAA8C,CAAC;AAE/E,KAAK,UAAU,sBAAsB,CACnC,QAAgB,EAChB,MAA2E;IAG3E,MAAM,EAAC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAC,GAAG,MAAM,CAAC,MAAM,CAAC;IAE1C,MAAM,GAAG,GAAG,MAAM,SAAS,CAAC,GAAG,EAAE,CAAC;IAGlC,MAAM,MAAM,GAAG,CAAC,MAAM,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,EAAC,KAAK,EAAE,IAAI,EAAE,WAAW,EAAE,QAAQ,EAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAEvF,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IAEhD,MAAM,kBAAkB,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;IAE3C,MAAM,mBAAmB,GAAG,MAAM,mBAAmB,CAAC,KAAK,CAAC;QAC1D,IAAI,EAAE,IAAI;QACV,KAAK,EAAE,KAAK;QACZ,cAAc,EAAE,iBAAiB,CAAC,MAAM,CAAC,MAAM,CAAC;QAChD,GAAG,EAAE,GAAG,CAAC,MAAM;KAChB,CAAC,CAAC;IAIH,OAAO,uCAAuC,CAC5C,mBAAmB,EACnB,GAAG,CAAC,MAAM,EACV,MAAM,EACN,MAAM,EACN,kBAAkB,CACnB,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,wBAAwB,CAAC,QAAgB;IAC7D,MAAM,MAAM,GAAG,MAAM,SAAS,EAAE,CAAC;IACjC,uBAAuB,CAAC,MAAM,CAAC,CAAC;IAChC,4BAA4B,CAAC,MAAM,CAAC,CAAC;IAErC,IAAI,MAAM,CAAC,WAAW,CAAC,kBAAkB,EAAE,CAAC;QAC1C,GAAG,CAAC,IAAI,CAAC,sEAAsE,CAAC,CAAC;QACjF,GAAG,CAAC,IAAI,CAAC,OAAO,QAAQ,qBAAqB,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC;QAC7E,OAAO;IACT,CAAC;IAED,MAAM,MAAM,GAAG,MAAM,sBAAsB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IAC9D,GAAG,CAAC,IAAI,CAAC,sCAAsC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;IACpE,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,QAAQ,mBAAmB,CAAC,CAAC;IACnD,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,CAAC;IACzD,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;AACtB,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertValidGithubConfig, getConfig, GithubConfig, NgDevConfig} from '../../utils/config.js';\nimport {Log} from '../../utils/logging.js';\nimport {GitClient} from '../../utils/git/git-client.js';\nimport {assertValidPullRequestConfig, PullRequestConfig} from '../config/index.js';\nimport {getTargetBranchesAndLabelForPullRequest} from '../common/targeting/target-label.js';\nimport {ActiveReleaseTrains} from '../../release/versioning/active-release-trains.js';\nimport {getNextBranchName} from '../../release/versioning/version-branches.js';\n\nasync function getTargetBranchesForPr(\n  prNumber: number,\n  config: NgDevConfig<{github: GithubConfig; pullRequest: PullRequestConfig}>,\n) {\n  /** Repo owner and name for the github repository. */\n  const {owner, name: repo} = config.github;\n  /** The singleton instance of the GitClient. */\n  const git = await GitClient.get();\n\n  /** The current state of the pull request from Github. */\n  const prData = (await git.github.pulls.get({owner, repo, pull_number: prNumber})).data;\n  /** The list of labels on the PR as strings. */\n  const labels = prData.labels.map((l) => l.name);\n  /** The branch targeted via the Github UI. */\n  const githubTargetBranch = prData.base.ref;\n\n  const activeReleaseTrains = await ActiveReleaseTrains.fetch({\n    name: repo,\n    owner: owner,\n    nextBranchName: getNextBranchName(config.github),\n    api: git.github,\n  });\n\n  // Note: We do not pass a list of commits here because we did not fetch this information\n  // and the commits are only used for validation (which we can skip here).\n  return getTargetBranchesAndLabelForPullRequest(\n    activeReleaseTrains,\n    git.github,\n    config,\n    labels,\n    githubTargetBranch,\n  );\n}\n\nexport async function printTargetBranchesForPr(prNumber: number) {\n  const config = await getConfig();\n  assertValidGithubConfig(config);\n  assertValidPullRequestConfig(config);\n\n  if (config.pullRequest.__noTargetLabeling) {\n    Log.info(`This repository does not use target labeling (special flag enabled).`);\n    Log.info(`PR #${prNumber} will merge into: ${config.github.mainBranchName}`);\n    return;\n  }\n\n  const target = await getTargetBranchesForPr(prNumber, config);\n  Log.info(`PR has the following target label: ${target.label.name}`);\n  Log.info.group(`PR #${prNumber} will merge into:`);\n  target.branches.forEach((name) => Log.info(`- ${name}`));\n  Log.info.groupEnd();\n}\n"]}