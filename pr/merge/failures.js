/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Error class that indicates a fatal merge tool error that cannot be ignored. */
export class FatalMergeToolError extends Error {
    constructor(message) {
        super(message);
    }
}
export class UserAbortedMergeToolError extends FatalMergeToolError {
    constructor() {
        super('Tool exited due to user aborting merge attempt.');
    }
}
export class MismatchedTargetBranchFatalError extends FatalMergeToolError {
    constructor(allowedBranches) {
        super(`Pull request is set to wrong base branch. Please update the PR in the Github UI ` +
            `to one of the following branches: ${allowedBranches.join(', ')}.`);
    }
}
export class UnsatisfiedBaseShaFatalError extends FatalMergeToolError {
    constructor() {
        super(`Pull request has not been rebased recently and could be bypassing CI checks. ` +
            `Please rebase the PR.`);
    }
}
export class MergeConflictsFatalError extends FatalMergeToolError {
    constructor(failedBranches) {
        super(`Cannot not merge pull request into the following branches due to merge ` +
            `conflicts: ${failedBranches.join(', ')}. Please rebase the PR or update the target label.`);
        this.failedBranches = failedBranches;
    }
}
export class PullRequestValidationError extends FatalMergeToolError {
    constructor() {
        super('Tool exited as at least one pull request validation error was discovered.');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFpbHVyZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9uZy1kZXYvcHIvbWVyZ2UvZmFpbHVyZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsa0ZBQWtGO0FBQ2xGLE1BQU0sT0FBTyxtQkFBb0IsU0FBUSxLQUFLO0lBQzVDLFlBQVksT0FBZTtRQUN6QixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakIsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLHlCQUEwQixTQUFRLG1CQUFtQjtJQUNoRTtRQUNFLEtBQUssQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO0lBQzNELENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxnQ0FBaUMsU0FBUSxtQkFBbUI7SUFDdkUsWUFBWSxlQUF5QjtRQUNuQyxLQUFLLENBQ0gsa0ZBQWtGO1lBQ2hGLHFDQUFxQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQ3JFLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sNEJBQTZCLFNBQVEsbUJBQW1CO0lBQ25FO1FBQ0UsS0FBSyxDQUNILCtFQUErRTtZQUM3RSx1QkFBdUIsQ0FDMUIsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyx3QkFBeUIsU0FBUSxtQkFBbUI7SUFDL0QsWUFBbUIsY0FBd0I7UUFDekMsS0FBSyxDQUNILHlFQUF5RTtZQUN2RSxjQUFjLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLG9EQUFvRCxDQUM5RixDQUFDO1FBSmUsbUJBQWMsR0FBZCxjQUFjLENBQVU7SUFLM0MsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLDBCQUEyQixTQUFRLG1CQUFtQjtJQUNqRTtRQUNFLEtBQUssQ0FBQywyRUFBMkUsQ0FBQyxDQUFDO0lBQ3JGLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG4vKiogRXJyb3IgY2xhc3MgdGhhdCBpbmRpY2F0ZXMgYSBmYXRhbCBtZXJnZSB0b29sIGVycm9yIHRoYXQgY2Fubm90IGJlIGlnbm9yZWQuICovXG5leHBvcnQgY2xhc3MgRmF0YWxNZXJnZVRvb2xFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFVzZXJBYm9ydGVkTWVyZ2VUb29sRXJyb3IgZXh0ZW5kcyBGYXRhbE1lcmdlVG9vbEVycm9yIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ1Rvb2wgZXhpdGVkIGR1ZSB0byB1c2VyIGFib3J0aW5nIG1lcmdlIGF0dGVtcHQuJyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1pc21hdGNoZWRUYXJnZXRCcmFuY2hGYXRhbEVycm9yIGV4dGVuZHMgRmF0YWxNZXJnZVRvb2xFcnJvciB7XG4gIGNvbnN0cnVjdG9yKGFsbG93ZWRCcmFuY2hlczogc3RyaW5nW10pIHtcbiAgICBzdXBlcihcbiAgICAgIGBQdWxsIHJlcXVlc3QgaXMgc2V0IHRvIHdyb25nIGJhc2UgYnJhbmNoLiBQbGVhc2UgdXBkYXRlIHRoZSBQUiBpbiB0aGUgR2l0aHViIFVJIGAgK1xuICAgICAgICBgdG8gb25lIG9mIHRoZSBmb2xsb3dpbmcgYnJhbmNoZXM6ICR7YWxsb3dlZEJyYW5jaGVzLmpvaW4oJywgJyl9LmAsXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVW5zYXRpc2ZpZWRCYXNlU2hhRmF0YWxFcnJvciBleHRlbmRzIEZhdGFsTWVyZ2VUb29sRXJyb3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcbiAgICAgIGBQdWxsIHJlcXVlc3QgaGFzIG5vdCBiZWVuIHJlYmFzZWQgcmVjZW50bHkgYW5kIGNvdWxkIGJlIGJ5cGFzc2luZyBDSSBjaGVja3MuIGAgK1xuICAgICAgICBgUGxlYXNlIHJlYmFzZSB0aGUgUFIuYCxcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBNZXJnZUNvbmZsaWN0c0ZhdGFsRXJyb3IgZXh0ZW5kcyBGYXRhbE1lcmdlVG9vbEVycm9yIHtcbiAgY29uc3RydWN0b3IocHVibGljIGZhaWxlZEJyYW5jaGVzOiBzdHJpbmdbXSkge1xuICAgIHN1cGVyKFxuICAgICAgYENhbm5vdCBub3QgbWVyZ2UgcHVsbCByZXF1ZXN0IGludG8gdGhlIGZvbGxvd2luZyBicmFuY2hlcyBkdWUgdG8gbWVyZ2UgYCArXG4gICAgICAgIGBjb25mbGljdHM6ICR7ZmFpbGVkQnJhbmNoZXMuam9pbignLCAnKX0uIFBsZWFzZSByZWJhc2UgdGhlIFBSIG9yIHVwZGF0ZSB0aGUgdGFyZ2V0IGxhYmVsLmAsXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUHVsbFJlcXVlc3RWYWxpZGF0aW9uRXJyb3IgZXh0ZW5kcyBGYXRhbE1lcmdlVG9vbEVycm9yIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ1Rvb2wgZXhpdGVkIGFzIGF0IGxlYXN0IG9uZSBwdWxsIHJlcXVlc3QgdmFsaWRhdGlvbiBlcnJvciB3YXMgZGlzY292ZXJlZC4nKTtcbiAgfVxufVxuIl19