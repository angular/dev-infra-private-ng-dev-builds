{"version":3,"file":"pull-request.js","sourceRoot":"","sources":["pull-request.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {IssueState} from '@octokit/graphql-schema';\nimport {\n  getTargetBranchesAndLabelForPullRequest,\n  PullRequestTarget,\n} from '../common/targeting/target-label.js';\nimport {fetchPullRequestFromGithub} from '../common/fetch-pull-request.js';\nimport {FatalMergeToolError} from './failures.js';\nimport {ActiveReleaseTrains} from '../../release/versioning/active-release-trains.js';\nimport {assertValidPullRequest} from '../common/validation/validate-pull-request.js';\nimport {TEMP_PR_HEAD_BRANCH} from './strategies/strategy.js';\nimport {mergeLabels} from '../common/labels/merge.js';\nimport {PullRequestValidationFailure} from '../common/validation/validation-failure.js';\nimport {AuthenticatedGitClient} from '../../utils/git/authenticated-git-client.js';\nimport {GithubConfig, NgDevConfig} from '../../utils/config.js';\nimport {PullRequestConfig, PullRequestValidationConfig} from '../config/index.js';\nimport {targetLabels} from '../common/labels/target.js';\n\n/** Interface describing a pull request's closing issue references. */\nexport interface PullRequestClosingIssuesReferences {\n  number: number;\n  state: IssueState;\n}\n\n/** Interface that describes a pull request. */\nexport interface PullRequest {\n  /** URL to the pull request. */\n  url: string;\n  /** Number of the pull request. */\n  prNumber: number;\n  /** Title of the pull request. */\n  title: string;\n  /** Labels applied to the pull request. */\n  labels: string[];\n  /** List of branches this PR should be merged into. */\n  targetBranches: string[];\n  /** Branch that the PR targets in the Github UI. */\n  githubTargetBranch: string;\n  /** Count of commits in this pull request. */\n  commitCount: number;\n  /** Optional SHA that this pull request needs to be based on. */\n  requiredBaseSha?: string;\n  /** Whether the pull request commit message fixup. */\n  needsCommitMessageFixup: boolean;\n  /** Whether the pull request has a caretaker note. */\n  hasCaretakerNote: boolean;\n  /** The SHA for the first commit the pull request is based on. */\n  baseSha: string;\n  /** Git revision range that matches the pull request commits. */\n  revisionRange: string;\n  /** A list of validation failures found for the pull request, empty if no failures are discovered. */\n  validationFailures: PullRequestValidationFailure[];\n  /** The SHA for the latest commit in the pull request. */\n  headSha: string;\n  /** A list of issues that will be closed by the pull request. */\n  closingIssuesReferences: PullRequestClosingIssuesReferences[];\n}\n\n/**\n * Loads and validates the specified pull request against the given configuration.\n * If the pull requests fails, a pull request failure is returned.\n *\n * @throws {FatalMergeToolError} A fatal error might be thrown when e.g. the pull request\n *   does not exist upstream.\n * @throws {InvalidTargetLabelError} Error thrown if an invalid target label is applied.\n * @throws {InvalidTargetBranchError} Error thrown if an invalid GitHub PR destination branch\n *   is selected.\n */\nexport async function loadAndValidatePullRequest(\n  {\n    git,\n    config,\n  }: {\n    git: AuthenticatedGitClient;\n    config: NgDevConfig<{\n      pullRequest: PullRequestConfig;\n      github: GithubConfig;\n    }>;\n  },\n  prNumber: number,\n  validationConfig: PullRequestValidationConfig,\n): Promise<PullRequest> {\n  const prData = await fetchPullRequestFromGithub(git, prNumber);\n\n  if (prData === null) {\n    throw new FatalMergeToolError('Pull request could not be found.');\n  }\n\n  const labels = prData.labels.nodes.map((l) => l.name);\n  const githubTargetBranch = prData.baseRefName;\n\n  const {mainBranchName, name, owner} = config.github;\n\n  // Active release trains fetched. May be `null` if e.g. target labeling is disabled\n  // and the active release train information is not available/computable.\n  let activeReleaseTrains: ActiveReleaseTrains | null = null;\n  let target: PullRequestTarget | null = null;\n\n  if (config.pullRequest.__noTargetLabeling) {\n    // If there is no target labeling, we always target the main branch and treat the PR as\n    // if it has been labeled with the `target: major` label (allowing for all types of changes).\n    target = {branches: [config.github.mainBranchName], label: targetLabels['TARGET_MAJOR']};\n  } else {\n    activeReleaseTrains = await ActiveReleaseTrains.fetch({\n      name,\n      nextBranchName: mainBranchName,\n      owner,\n      api: git.github,\n    });\n\n    target = await getTargetBranchesAndLabelForPullRequest(\n      activeReleaseTrains,\n      git.github,\n      config,\n      labels,\n      githubTargetBranch,\n    );\n  }\n\n  const validationFailures = await assertValidPullRequest(\n    prData,\n    validationConfig,\n    config,\n    activeReleaseTrains,\n    target,\n    git,\n  );\n\n  const requiredBaseSha =\n    config.pullRequest.requiredBaseCommits &&\n    config.pullRequest.requiredBaseCommits[githubTargetBranch];\n  const needsCommitMessageFixup = labels.includes(mergeLabels['MERGE_FIX_COMMIT_MESSAGE'].name);\n  const hasCaretakerNote = labels.includes(mergeLabels['MERGE_CARETAKER_NOTE'].name);\n\n  // The parent of the first commit in a PR is the base SHA.\n  const baseSha = prData.baseCommitInfo.nodes[0].commit.parents.nodes[0].oid;\n\n  // Typically we would be able to rely on referencing the base revision as the pull\n  // request head commit minus the number of commits in the pull request. This is not always\n  // reliable when we rebase e.g. the PR with autosquash where the amount of commits could\n  // change. We avoid this issue around this by using the resolved base revision so that we are\n  // able to reference an explicit SHA before a autosquash rebase could be performed.\n  const revisionRange = `${baseSha}..${TEMP_PR_HEAD_BRANCH}`;\n\n  return {\n    url: prData.url,\n    prNumber,\n    labels,\n    requiredBaseSha,\n    githubTargetBranch,\n    needsCommitMessageFixup,\n    baseSha,\n    revisionRange,\n    hasCaretakerNote,\n    validationFailures,\n    targetBranches: target.branches,\n    title: prData.title,\n    commitCount: prData.commits.totalCount,\n    headSha: prData.headRefOid,\n    closingIssuesReferences: prData.closingIssuesReferences.nodes,\n  };\n}\n"]}