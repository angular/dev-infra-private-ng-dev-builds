/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { addDryRunFlag } from '../../utils/dry-run.js';
import { mergePullRequest, parsePrNumber } from './merge-pull-request.js';
import { addGithubTokenOption } from '../../utils/git/github-yargs.js';
/** Builds the command. */
async function builder(argv) {
    return addDryRunFlag(addGithubTokenOption(argv))
        .help()
        .strict()
        .positional('pr', {
        demandOption: true,
        coerce: (prUrlOrNumber) => parsePrNumber(prUrlOrNumber),
        type: 'string',
        description: 'The PR to be merged.',
    })
        .option('branch-prompt', {
        type: 'boolean',
        default: true,
        description: 'Whether to prompt to confirm the branches a PR will merge into.',
    })
        .option('force-manual-branches', {
        type: 'boolean',
        default: false,
        description: 'Whether to manually select the branches you wish to merge the PR into.',
    })
        .option('ignore-pending-reviews', {
        type: 'boolean',
        default: false,
        description: 'Bypass the check for pending reviews on the pull request',
    });
}
/** Handles the command. */
async function handler({ pr, branchPrompt, forceManualBranches, dryRun, ignorePendingReviews, }) {
    await mergePullRequest(pr, { branchPrompt, forceManualBranches, dryRun, ignorePendingReviews });
}
/** yargs command module describing the command. */
export const MergeCommandModule = {
    handler,
    builder,
    command: 'merge <pr>',
    describe: 'Merge a PR into its targeted branches.',
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbmctZGV2L3ByL21lcmdlL2NsaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFHSCxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFFckQsT0FBTyxFQUFDLGdCQUFnQixFQUFFLGFBQWEsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ3hFLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLGlDQUFpQyxDQUFDO0FBVXJFLDBCQUEwQjtBQUMxQixLQUFLLFVBQVUsT0FBTyxDQUFDLElBQVU7SUFDL0IsT0FBTyxhQUFhLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDN0MsSUFBSSxFQUFFO1NBQ04sTUFBTSxFQUFFO1NBQ1IsVUFBVSxDQUFDLElBQUksRUFBRTtRQUNoQixZQUFZLEVBQUUsSUFBSTtRQUNsQixNQUFNLEVBQUUsQ0FBQyxhQUFxQixFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDO1FBQy9ELElBQUksRUFBRSxRQUFRO1FBQ2QsV0FBVyxFQUFFLHNCQUFzQjtLQUNwQyxDQUFDO1NBQ0QsTUFBTSxDQUFDLGVBQWlDLEVBQUU7UUFDekMsSUFBSSxFQUFFLFNBQVM7UUFDZixPQUFPLEVBQUUsSUFBSTtRQUNiLFdBQVcsRUFBRSxpRUFBaUU7S0FDL0UsQ0FBQztTQUNELE1BQU0sQ0FBQyx1QkFBZ0QsRUFBRTtRQUN4RCxJQUFJLEVBQUUsU0FBUztRQUNmLE9BQU8sRUFBRSxLQUFLO1FBQ2QsV0FBVyxFQUFFLHdFQUF3RTtLQUN0RixDQUFDO1NBQ0QsTUFBTSxDQUFDLHdCQUFrRCxFQUFFO1FBQzFELElBQUksRUFBRSxTQUFTO1FBQ2YsT0FBTyxFQUFFLEtBQUs7UUFDZCxXQUFXLEVBQUUsMERBQTBEO0tBQ3hFLENBQUMsQ0FBQztBQUNQLENBQUM7QUFFRCwyQkFBMkI7QUFDM0IsS0FBSyxVQUFVLE9BQU8sQ0FBQyxFQUNyQixFQUFFLEVBQ0YsWUFBWSxFQUNaLG1CQUFtQixFQUNuQixNQUFNLEVBQ04sb0JBQW9CLEdBQ1c7SUFDL0IsTUFBTSxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUUsRUFBQyxZQUFZLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxFQUFFLG9CQUFvQixFQUFDLENBQUMsQ0FBQztBQUNoRyxDQUFDO0FBRUQsbURBQW1EO0FBQ25ELE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUEyQztJQUN4RSxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU8sRUFBRSxZQUFZO0lBQ3JCLFFBQVEsRUFBRSx3Q0FBd0M7Q0FDbkQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge0FyZ3YsIEFyZ3VtZW50cywgQ29tbWFuZE1vZHVsZX0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHthZGREcnlSdW5GbGFnfSBmcm9tICcuLi8uLi91dGlscy9kcnktcnVuLmpzJztcblxuaW1wb3J0IHttZXJnZVB1bGxSZXF1ZXN0LCBwYXJzZVByTnVtYmVyfSBmcm9tICcuL21lcmdlLXB1bGwtcmVxdWVzdC5qcyc7XG5pbXBvcnQge2FkZEdpdGh1YlRva2VuT3B0aW9ufSBmcm9tICcuLi8uLi91dGlscy9naXQvZ2l0aHViLXlhcmdzLmpzJztcbi8qKiBUaGUgb3B0aW9ucyBhdmFpbGFibGUgdG8gdGhlIG1lcmdlIGNvbW1hbmQgdmlhIENMSS4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTWVyZ2VDb21tYW5kT3B0aW9ucyB7XG4gIHByOiBudW1iZXI7XG4gIGJyYW5jaFByb21wdDogYm9vbGVhbjtcbiAgZm9yY2VNYW51YWxCcmFuY2hlczogYm9vbGVhbjtcbiAgZHJ5UnVuOiBib29sZWFuO1xuICBpZ25vcmVQZW5kaW5nUmV2aWV3czogYm9vbGVhbjtcbn1cblxuLyoqIEJ1aWxkcyB0aGUgY29tbWFuZC4gKi9cbmFzeW5jIGZ1bmN0aW9uIGJ1aWxkZXIoYXJndjogQXJndikge1xuICByZXR1cm4gYWRkRHJ5UnVuRmxhZyhhZGRHaXRodWJUb2tlbk9wdGlvbihhcmd2KSlcbiAgICAuaGVscCgpXG4gICAgLnN0cmljdCgpXG4gICAgLnBvc2l0aW9uYWwoJ3ByJywge1xuICAgICAgZGVtYW5kT3B0aW9uOiB0cnVlLFxuICAgICAgY29lcmNlOiAocHJVcmxPck51bWJlcjogc3RyaW5nKSA9PiBwYXJzZVByTnVtYmVyKHByVXJsT3JOdW1iZXIpLFxuICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICBkZXNjcmlwdGlvbjogJ1RoZSBQUiB0byBiZSBtZXJnZWQuJyxcbiAgICB9KVxuICAgIC5vcHRpb24oJ2JyYW5jaC1wcm9tcHQnIGFzICdicmFuY2hQcm9tcHQnLCB7XG4gICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICBkZWZhdWx0OiB0cnVlLFxuICAgICAgZGVzY3JpcHRpb246ICdXaGV0aGVyIHRvIHByb21wdCB0byBjb25maXJtIHRoZSBicmFuY2hlcyBhIFBSIHdpbGwgbWVyZ2UgaW50by4nLFxuICAgIH0pXG4gICAgLm9wdGlvbignZm9yY2UtbWFudWFsLWJyYW5jaGVzJyBhcyAnZm9yY2VNYW51YWxCcmFuY2hlcycsIHtcbiAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgZGVzY3JpcHRpb246ICdXaGV0aGVyIHRvIG1hbnVhbGx5IHNlbGVjdCB0aGUgYnJhbmNoZXMgeW91IHdpc2ggdG8gbWVyZ2UgdGhlIFBSIGludG8uJyxcbiAgICB9KVxuICAgIC5vcHRpb24oJ2lnbm9yZS1wZW5kaW5nLXJldmlld3MnIGFzICdpZ25vcmVQZW5kaW5nUmV2aWV3cycsIHtcbiAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgZGVzY3JpcHRpb246ICdCeXBhc3MgdGhlIGNoZWNrIGZvciBwZW5kaW5nIHJldmlld3Mgb24gdGhlIHB1bGwgcmVxdWVzdCcsXG4gICAgfSk7XG59XG5cbi8qKiBIYW5kbGVzIHRoZSBjb21tYW5kLiAqL1xuYXN5bmMgZnVuY3Rpb24gaGFuZGxlcih7XG4gIHByLFxuICBicmFuY2hQcm9tcHQsXG4gIGZvcmNlTWFudWFsQnJhbmNoZXMsXG4gIGRyeVJ1bixcbiAgaWdub3JlUGVuZGluZ1Jldmlld3MsXG59OiBBcmd1bWVudHM8TWVyZ2VDb21tYW5kT3B0aW9ucz4pIHtcbiAgYXdhaXQgbWVyZ2VQdWxsUmVxdWVzdChwciwge2JyYW5jaFByb21wdCwgZm9yY2VNYW51YWxCcmFuY2hlcywgZHJ5UnVuLCBpZ25vcmVQZW5kaW5nUmV2aWV3c30pO1xufVxuXG4vKiogeWFyZ3MgY29tbWFuZCBtb2R1bGUgZGVzY3JpYmluZyB0aGUgY29tbWFuZC4gKi9cbmV4cG9ydCBjb25zdCBNZXJnZUNvbW1hbmRNb2R1bGU6IENvbW1hbmRNb2R1bGU8e30sIE1lcmdlQ29tbWFuZE9wdGlvbnM+ID0ge1xuICBoYW5kbGVyLFxuICBidWlsZGVyLFxuICBjb21tYW5kOiAnbWVyZ2UgPHByPicsXG4gIGRlc2NyaWJlOiAnTWVyZ2UgYSBQUiBpbnRvIGl0cyB0YXJnZXRlZCBicmFuY2hlcy4nLFxufTtcbiJdfQ==