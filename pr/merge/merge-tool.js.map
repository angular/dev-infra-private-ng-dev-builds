{"version":3,"file":"merge-tool.js","sourceRoot":"","sources":["merge-tool.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AuthenticatedGitClient} from '../../utils/git/authenticated-git-client.js';\nimport semver from 'semver';\nimport {bold, green, Log, red, yellow} from '../../utils/logging.js';\n\nimport {PullRequestConfig, PullRequestValidationConfig} from '../config/index.js';\nimport {\n  getCaretakerNotePromptMessage,\n  getTargetedBranchesConfirmationPromptMessage,\n  getTargetedBranchesMessage,\n} from './messages.js';\nimport {loadAndValidatePullRequest, PullRequest} from './pull-request.js';\nimport {GithubApiMergeStrategy} from './strategies/api-merge.js';\nimport {AutosquashMergeStrategy} from './strategies/autosquash-merge.js';\nimport {GithubConfig, NgDevConfig} from '../../utils/config.js';\nimport {assertValidReleaseConfig} from '../../release/config/index.js';\nimport {\n  ActiveReleaseTrains,\n  fetchLongTermSupportBranchesFromNpm,\n  getNextBranchName,\n} from '../../release/versioning/index.js';\nimport {\n  FatalMergeToolError,\n  PullRequestValidationError,\n  UserAbortedMergeToolError,\n} from './failures.js';\nimport {createPullRequestValidationConfig} from '../common/validation/validation-config.js';\nimport {Prompt} from '../../utils/prompt.js';\n\nexport interface PullRequestMergeFlags {\n  branchPrompt: boolean;\n  forceManualBranches: boolean;\n  dryRun: boolean;\n  ignorePendingReviews: boolean;\n}\n\nconst defaultPullRequestMergeFlags: PullRequestMergeFlags = {\n  branchPrompt: true,\n  forceManualBranches: false,\n  dryRun: false,\n  ignorePendingReviews: false,\n};\n\n/**\n * Class that accepts a merge script configuration and Github token. It provides\n * a programmatic interface for merging multiple pull requests based on their\n * labels that have been resolved through the merge script configuration.\n */\nexport class MergeTool {\n  private flags: PullRequestMergeFlags;\n\n  constructor(\n    public config: NgDevConfig<{\n      pullRequest: PullRequestConfig;\n      github: GithubConfig;\n    }>,\n    public git: AuthenticatedGitClient,\n    flags: Partial<PullRequestMergeFlags>,\n  ) {\n    // Update flags property with the provided flags values as patches to the default flag values.\n    this.flags = {...defaultPullRequestMergeFlags, ...flags};\n  }\n\n  /**\n   * Merges the given pull request and pushes it upstream.\n   * @param prNumber Pull request that should be merged.\n   * @param partialValidationConfig Pull request validation config. Can be modified to skip\n   *   certain non-fatal validations.\n   */\n  async merge(\n    prNumber: number,\n    partialValidationConfig: PullRequestValidationConfig,\n  ): Promise<void> {\n    /** The full validation config, using the provided config from flags, config and defaults. */\n    const validationConfig = createPullRequestValidationConfig({\n      ...this.config.pullRequest.validators,\n      ...partialValidationConfig,\n    });\n\n    if (this.git.hasUncommittedChanges()) {\n      throw new FatalMergeToolError(\n        'Local working repository not clean. Please make sure there are ' +\n          'no uncommitted changes.',\n      );\n    }\n\n    if (this.git.isShallowRepo()) {\n      throw new FatalMergeToolError(\n        `Unable to perform merge in a local repository that is configured as shallow.\\n` +\n          `Please convert the repository to a complete one by syncing with upstream.\\n` +\n          `https://git-scm.com/docs/git-fetch#Documentation/git-fetch.txt---unshallow`,\n      );\n    }\n\n    await this.confirmMergeAccess();\n\n    const pullRequest = await loadAndValidatePullRequest(this, prNumber, validationConfig);\n\n    if (pullRequest.validationFailures.length > 0) {\n      Log.error(`Pull request did not pass one or more validation checks. Error:`);\n\n      for (const failure of pullRequest.validationFailures) {\n        Log.error(` -> ${bold(failure.message)}`);\n      }\n      Log.info();\n\n      if (pullRequest.validationFailures.some((failure) => !failure.canBeForceIgnored)) {\n        Log.debug('Discovered a fatal error, which cannot be forced');\n        throw new PullRequestValidationError();\n      }\n\n      Log.info(yellow(`All discovered validations are non-fatal and can be forcibly ignored.`));\n      if (\n        !(await Prompt.confirm({\n          message: 'Do you want to forcibly ignore these validation failures?',\n        }))\n      ) {\n        throw new PullRequestValidationError();\n      }\n    }\n\n    if (this.flags.forceManualBranches) {\n      await this.updatePullRequestTargetedBranchesFromPrompt(pullRequest);\n    }\n\n    // If the pull request has a caretaker note applied, raise awareness by prompting\n    // the caretaker. The caretaker can then decide to proceed or abort the merge.\n    if (\n      pullRequest.hasCaretakerNote &&\n      !(await Prompt.confirm({message: getCaretakerNotePromptMessage(pullRequest)}))\n    ) {\n      throw new UserAbortedMergeToolError();\n    }\n\n    const strategy = this.config.pullRequest.githubApiMerge\n      ? new GithubApiMergeStrategy(this.git, this.config.pullRequest.githubApiMerge)\n      : new AutosquashMergeStrategy(this.git);\n\n    // Branch or revision that is currently checked out so that we can switch back to\n    // it once the pull request has been merged.\n    const previousBranchOrRevision = this.git.getCurrentBranchOrRevision();\n\n    // The following block runs Git commands as child processes. These Git commands can fail.\n    // We want to capture these command errors and return an appropriate merge request status.\n    try {\n      // Run preparations for the merge (e.g. fetching branches).\n      await strategy.prepare(pullRequest);\n\n      // Print the target branches.\n      Log.info();\n      Log.info(getTargetedBranchesMessage(pullRequest));\n\n      // Check for conflicts between the pull request and target branches.\n      await strategy.check(pullRequest);\n\n      Log.info('');\n      Log.info(green(`     PR: ${bold(pullRequest.title)}`));\n      Log.info(green(`  ✓  Pull request can be merged into all target branches.`));\n      Log.info();\n\n      if (this.flags.dryRun) {\n        Log.info(green(`  ✓  Exiting due to dry run mode.`));\n        return;\n      }\n\n      if (\n        // If there is no target labeling then the pull request is always just directly merged, so\n        // the confirmation can be skipped.\n        !this.config.pullRequest.__noTargetLabeling &&\n        // In cases where manual branch targeting is used, the user already confirmed.\n        !this.flags.forceManualBranches &&\n        this.flags.branchPrompt &&\n        !(await Prompt.confirm({message: getTargetedBranchesConfirmationPromptMessage()}))\n      ) {\n        throw new UserAbortedMergeToolError();\n      }\n\n      // Perform the merge and pass-through potential failures.\n      await strategy.merge(pullRequest);\n      Log.info(green(`  ✓  Successfully merged the pull request: #${prNumber}`));\n    } finally {\n      // Switch back to the previous branch. We need to do this before deleting the temporary\n      // branches because we cannot delete branches which are currently checked out.\n      this.git.run(['checkout', '-f', previousBranchOrRevision]);\n\n      await strategy.cleanup(pullRequest);\n    }\n  }\n\n  /**\n   * Modifies the pull request in place with new target branches based on user\n   * selection from the available active branches.\n   */\n  private async updatePullRequestTargetedBranchesFromPrompt(\n    pullRequest: PullRequest,\n  ): Promise<void> {\n    const {name: repoName, owner} = this.config.github;\n\n    // Attempt to retrieve the active LTS branches to be included in the selection.\n    let ltsBranches: {branchName: string; version: semver.SemVer}[] = [];\n    try {\n      assertValidReleaseConfig(this.config);\n      const ltsBranchesFromNpm = await fetchLongTermSupportBranchesFromNpm(this.config.release);\n      ltsBranches = ltsBranchesFromNpm.active.map(({name, version}) => ({\n        branchName: name,\n        version,\n      }));\n    } catch {\n      Log.warn(\n        'Unable to determine the active LTS branches as a release config is not set for this repo.',\n      );\n    }\n\n    // Gather the current active release trains.\n    const {latest, next, releaseCandidate} = await ActiveReleaseTrains.fetch({\n      name: repoName,\n      nextBranchName: getNextBranchName(this.config.github),\n      owner,\n      api: this.git.github,\n    });\n\n    // Collate the known active branches into a single list.\n    const activeBranches: {branchName: string; version: semver.SemVer}[] = [\n      next,\n      latest,\n      ...ltsBranches,\n    ];\n    if (releaseCandidate !== null) {\n      // Since the next version will always be the primary github branch rather than semver, the RC\n      // branch should be included as the second item in the list.\n      activeBranches.splice(1, 0, releaseCandidate);\n    }\n\n    const selectedBranches = await Prompt.checkbox({\n      choices: activeBranches.map(({branchName, version}) => {\n        return {\n          checked: pullRequest.targetBranches.includes(branchName),\n          value: branchName,\n          short: branchName,\n          name: `${branchName} (${version})${\n            branchName === pullRequest.githubTargetBranch ? ' [Targeted via Github UI]' : ''\n          }`,\n        };\n      }),\n      message: 'Select branches to merge pull request into:',\n    });\n    const confirmation = await Prompt.confirm({\n      default: false,\n      message:\n        red('!!!!!! WARNING !!!!!!!\\n') +\n        yellow(\n          'Using manual branch selection disables protective checks provided by the merge ' +\n            'tooling. This means that the merge tooling will not prevent changes which are not ' +\n            'allowed for the targeted branches. Please proceed with caution.\\n',\n        ) +\n        'Are you sure you would like to proceed with the selected branches?',\n    });\n\n    if (confirmation === false) {\n      throw new UserAbortedMergeToolError();\n    }\n\n    // The Github Targeted branch must always be selected. It is not currently possible\n    // to make a readonly selection in inquirer's checkbox.\n    if (!selectedBranches.includes(pullRequest.githubTargetBranch)) {\n      throw new FatalMergeToolError(\n        `Pull Requests must merge into their targeted Github branch. If this branch (${pullRequest.githubTargetBranch}) ` +\n          'should not be included, please change the targeted branch via the Github UI.',\n      );\n    }\n\n    pullRequest.targetBranches = selectedBranches;\n  }\n\n  async confirmMergeAccess() {\n    if (this.git.userType === 'user') {\n      // Check whether the given Github token has sufficient permissions for writing\n      // to the configured repository. If the repository is not private, only the\n      // reduced `public_repo` OAuth scope is sufficient for performing merges.\n      const hasOauthScopes = await this.git.hasOauthScopes((scopes, missing) => {\n        if (!scopes.includes('repo')) {\n          if (this.config.github.private) {\n            missing.push('repo');\n          } else if (!scopes.includes('public_repo')) {\n            missing.push('public_repo');\n          }\n        }\n\n        // Pull requests can modify Github action workflow files. In such cases Github requires us to\n        // push with a token that has the `workflow` oauth scope set. To avoid errors when the\n        // caretaker intends to merge such PRs, we ensure the scope is always set on the token before\n        // the merge process starts.\n        // https://docs.github.com/en/developers/apps/scopes-for-oauth-apps#available-scopes\n        if (!scopes.includes('workflow')) {\n          missing.push('workflow');\n        }\n      });\n\n      if (hasOauthScopes !== true) {\n        throw new FatalMergeToolError(hasOauthScopes.error);\n      }\n      return;\n    } else {\n      // TODO(josephperrott): Find a way to check access of the installation without using a JWT.\n      Log.debug('Assuming correct access because this a bot account.');\n    }\n  }\n}\n"]}