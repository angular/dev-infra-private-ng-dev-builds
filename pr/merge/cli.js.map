{"version":3,"file":"cli.js","sourceRoot":"","sources":["cli.ts"],"names":[],"mappings":"AASA,OAAO,EAAC,aAAa,EAAC,MAAM,wBAAwB,CAAC;AAErD,OAAO,EAAC,gBAAgB,EAAE,aAAa,EAAC,MAAM,yBAAyB,CAAC;AACxE,OAAO,EAAC,oBAAoB,EAAC,MAAM,iCAAiC,CAAC;AAWrE,KAAK,UAAU,OAAO,CAAC,IAAU;IAC/B,OAAO,aAAa,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;SAC7C,IAAI,EAAE;SACN,MAAM,EAAE;SACR,UAAU,CAAC,IAAI,EAAE;QAChB,YAAY,EAAE,IAAI;QAClB,MAAM,EAAE,CAAC,aAAqB,EAAE,EAAE,CAAC,aAAa,CAAC,aAAa,CAAC;QAC/D,IAAI,EAAE,QAAQ;QACd,WAAW,EAAE,sBAAsB;KACpC,CAAC;SACD,MAAM,CAAC,eAAiC,EAAE;QACzC,IAAI,EAAE,SAAS;QACf,OAAO,EAAE,IAAI;QACb,WAAW,EAAE,iEAAiE;KAC/E,CAAC;SACD,MAAM,CAAC,uBAAgD,EAAE;QACxD,IAAI,EAAE,SAAS;QACf,OAAO,EAAE,KAAK;QACd,WAAW,EAAE,wEAAwE;KACtF,CAAC;SACD,MAAM,CAAC,wBAAkD,EAAE;QAC1D,IAAI,EAAE,SAAS;QACf,OAAO,EAAE,KAAK;QACd,WAAW,EAAE,0DAA0D;KACxE,CAAC,CAAC;AACP,CAAC;AAGD,KAAK,UAAU,OAAO,CAAC,EACrB,EAAE,EACF,YAAY,EACZ,mBAAmB,EACnB,MAAM,EACN,oBAAoB,GACW;IAC/B,MAAM,gBAAgB,CAAC,EAAE,EAAE,EAAC,YAAY,EAAE,mBAAmB,EAAE,MAAM,EAAE,oBAAoB,EAAC,CAAC,CAAC;AAChG,CAAC;AAGD,MAAM,CAAC,MAAM,kBAAkB,GAA2C;IACxE,OAAO;IACP,OAAO;IACP,OAAO,EAAE,YAAY;IACrB,QAAQ,EAAE,wCAAwC;CACnD,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Argv, Arguments, CommandModule} from 'yargs';\nimport {addDryRunFlag} from '../../utils/dry-run.js';\n\nimport {mergePullRequest, parsePrNumber} from './merge-pull-request.js';\nimport {addGithubTokenOption} from '../../utils/git/github-yargs.js';\n/** The options available to the merge command via CLI. */\nexport interface MergeCommandOptions {\n  pr: number;\n  branchPrompt: boolean;\n  forceManualBranches: boolean;\n  dryRun: boolean;\n  ignorePendingReviews: boolean;\n}\n\n/** Builds the command. */\nasync function builder(argv: Argv) {\n  return addDryRunFlag(addGithubTokenOption(argv))\n    .help()\n    .strict()\n    .positional('pr', {\n      demandOption: true,\n      coerce: (prUrlOrNumber: string) => parsePrNumber(prUrlOrNumber),\n      type: 'string',\n      description: 'The PR to be merged.',\n    })\n    .option('branch-prompt' as 'branchPrompt', {\n      type: 'boolean',\n      default: true,\n      description: 'Whether to prompt to confirm the branches a PR will merge into.',\n    })\n    .option('force-manual-branches' as 'forceManualBranches', {\n      type: 'boolean',\n      default: false,\n      description: 'Whether to manually select the branches you wish to merge the PR into.',\n    })\n    .option('ignore-pending-reviews' as 'ignorePendingReviews', {\n      type: 'boolean',\n      default: false,\n      description: 'Bypass the check for pending reviews on the pull request',\n    });\n}\n\n/** Handles the command. */\nasync function handler({\n  pr,\n  branchPrompt,\n  forceManualBranches,\n  dryRun,\n  ignorePendingReviews,\n}: Arguments<MergeCommandOptions>) {\n  await mergePullRequest(pr, {branchPrompt, forceManualBranches, dryRun, ignorePendingReviews});\n}\n\n/** yargs command module describing the command. */\nexport const MergeCommandModule: CommandModule<{}, MergeCommandOptions> = {\n  handler,\n  builder,\n  command: 'merge <pr>',\n  describe: 'Merge a PR into its targeted branches.',\n};\n"]}