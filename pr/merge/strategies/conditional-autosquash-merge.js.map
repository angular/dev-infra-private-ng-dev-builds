{"version":3,"file":"conditional-autosquash-merge.js","sourceRoot":"","sources":["conditional-autosquash-merge.ts"],"names":[],"mappings":"AAYA,OAAO,EAAC,uBAAuB,EAAC,MAAM,uBAAuB,CAAC;AAC9D,OAAO,EAAC,sBAAsB,EAAC,MAAM,gBAAgB,CAAC;AACtD,OAAO,EAAC,aAAa,EAAC,MAAM,eAAe,CAAC;AAO5C,MAAM,OAAO,kCAAmC,SAAQ,aAAa;IAGnE,YACE,GAA2B,EACnB,MAAoC;QAE5C,KAAK,CAAC,GAAG,CAAC,CAAC;QAFH,WAAM,GAAN,MAAM,CAA8B;QAG5C,IAAI,CAAC,sBAAsB,GAAG,IAAI,sBAAsB,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAClF,CAAC;IAEQ,KAAK,CAAC,KAAK,CAAC,WAAwB;QAC3C,MAAM,WAAW,GAAG,IAAI,CAAC,sBAAsB,CAAC,6BAA6B,CAAC,WAAW,CAAC,CAAC;QAG3F,OAAO,WAAW,KAAK,QAAQ,IAAI,CAAC,MAAM,IAAI,CAAC,uBAAuB,CAAC,WAAW,CAAC,CAAC;YAClF,CAAC,CAAC,IAAI,uBAAuB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC;YAC1D,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IACrD,CAAC;IAGO,KAAK,CAAC,uBAAuB,CAAC,WAAwB;QAC5D,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;QAE9D,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC,EAAC,MAAM,EAAE,EAAC,OAAO,EAAE,QAAQ,EAAC,EAAC,EAAE,EAAE,CAAC,OAAO,IAAI,QAAQ,CAAC,CAAC;IAC9E,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AuthenticatedGitClient} from '../../../utils/git/authenticated-git-client.js';\nimport {GithubApiMergeStrategyConfig} from '../../config/index.js';\nimport {PullRequest} from '../pull-request.js';\n\nimport {AutosquashMergeStrategy} from './autosquash-merge.js';\nimport {GithubApiMergeStrategy} from './api-merge.js';\nimport {MergeStrategy} from './strategy.js';\n\n/**\n * Merge strategy that conditionally uses autosquash or the Github API merge.\n * If a pull request contains fixup or squash commits, the autosquash strategy\n * will be used. Otherwise, the Github API merge strategy will be used.\n */\nexport class ConditionalAutosquashMergeStrategy extends MergeStrategy {\n  private readonly githubApiMergeStrategy: GithubApiMergeStrategy;\n\n  constructor(\n    git: AuthenticatedGitClient,\n    private config: GithubApiMergeStrategyConfig,\n  ) {\n    super(git);\n    this.githubApiMergeStrategy = new GithubApiMergeStrategy(this.git, this.config);\n  }\n\n  override async merge(pullRequest: PullRequest): Promise<void> {\n    const mergeAction = this.githubApiMergeStrategy.getMergeActionFromPullRequest(pullRequest);\n\n    // Squash and Merge will create a single commit message and thus we can use the API to merge.\n    return mergeAction === 'rebase' && (await this.hasFixupOrSquashCommits(pullRequest))\n      ? new AutosquashMergeStrategy(this.git).merge(pullRequest)\n      : this.githubApiMergeStrategy.merge(pullRequest);\n  }\n\n  /** Checks whether the pull request contains fixup or squash commits. */\n  private async hasFixupOrSquashCommits(pullRequest: PullRequest): Promise<boolean> {\n    const commits = await this.getPullRequestCommits(pullRequest);\n\n    return commits.some(({parsed: {isFixup, isSquash}}) => isFixup || isSquash);\n  }\n}\n"]}