{"version":3,"file":"api-merge.js","sourceRoot":"","sources":["api-merge.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RestEndpointMethodTypes} from '@octokit/plugin-rest-endpoint-methods';\n\nimport {parseCommitMessage} from '../../../commit-message/parse.js';\nimport {AuthenticatedGitClient} from '../../../utils/git/authenticated-git-client.js';\nimport {GithubApiMergeMethod, GithubApiMergeStrategyConfig} from '../../config/index.js';\nimport {PullRequest} from '../pull-request.js';\n\nimport {MergeStrategy} from './strategy.js';\nimport {isGithubApiError} from '../../../utils/git/github.js';\nimport {FatalMergeToolError, MergeConflictsFatalError} from '../failures.js';\nimport {Prompt} from '../../../utils/prompt.js';\n\n/** Type describing the parameters for the Octokit `merge` API endpoint. */\ntype OctokitMergeParams = RestEndpointMethodTypes['pulls']['merge']['parameters'];\n\ntype OctokitPullRequestCommitsList =\n  RestEndpointMethodTypes['pulls']['listCommits']['response']['data'];\n\n/** Separator between commit message header and body. */\nconst COMMIT_HEADER_SEPARATOR = '\\n\\n';\n\n/**\n * Merge strategy that primarily leverages the Github API. The strategy merges a given\n * pull request into a target branch using the API. This ensures that Github displays\n * the pull request as merged. The merged commits are then cherry-picked into the remaining\n * target branches using the local Git instance. The benefit is that the Github merged state\n * is properly set, but a notable downside is that PRs cannot use fixup or squash commits.\n */\nexport class GithubApiMergeStrategy extends MergeStrategy {\n  constructor(\n    git: AuthenticatedGitClient,\n    private _config: GithubApiMergeStrategyConfig,\n  ) {\n    super(git);\n  }\n\n  /**\n   * Merges the specified pull request via the Github API, cherry-picks the change into the other\n   * target branhces and pushes the branches upstream.\n   *\n   * @throws {GitCommandError} An unknown Git command error occurred that is not\n   *   specific to the pull request merge.\n   * @throws {FatalMergeToolError} A fatal error if the merge could not be performed.\n   */\n  override async merge(pullRequest: PullRequest): Promise<void> {\n    const {githubTargetBranch, prNumber, needsCommitMessageFixup, targetBranches} = pullRequest;\n    const method = this._getMergeActionFromPullRequest(pullRequest);\n    const cherryPickTargetBranches = targetBranches.filter((b) => b !== githubTargetBranch);\n\n    const mergeOptions: OctokitMergeParams = {\n      pull_number: prNumber,\n      merge_method: method,\n      ...this.git.remoteParams,\n    };\n\n    if (needsCommitMessageFixup) {\n      // Commit message fixup does not work with other merge methods as the Github API only\n      // allows commit message modifications for squash merging.\n      if (method !== 'squash') {\n        throw new FatalMergeToolError(\n          `Unable to fixup commit message of pull request. Commit message can only be ` +\n            `modified if the PR is merged using squash.`,\n        );\n      }\n      await this._promptCommitMessageEdit(pullRequest, mergeOptions);\n    }\n\n    let mergeStatusCode: number;\n    let mergeResponseMessage: string;\n    let targetSha: string;\n\n    try {\n      // Merge the pull request using the Github API into the selected base branch.\n      const result = await this.git.github.pulls.merge(mergeOptions);\n\n      mergeStatusCode = result.status;\n      mergeResponseMessage = result.data.message;\n      targetSha = result.data.sha;\n    } catch (e) {\n      // Note: Github usually returns `404` as status code if the API request uses a\n      // token with insufficient permissions. Github does this because it doesn't want\n      // to leak whether a repository exists or not. In our case we expect a certain\n      // repository to exist, so we always treat this as a permission failure.\n      if (isGithubApiError(e) && (e.status === 403 || e.status === 404)) {\n        throw new FatalMergeToolError('Insufficient Github API permissions to merge pull request.');\n      }\n      throw e;\n    }\n\n    // https://developer.github.com/v3/pulls/#response-if-merge-cannot-be-performed\n    // Pull request cannot be merged due to merge conflicts.\n    if (mergeStatusCode === 405) {\n      throw new MergeConflictsFatalError([githubTargetBranch]);\n    }\n    if (mergeStatusCode !== 200) {\n      throw new FatalMergeToolError(\n        `Unexpected merge status code: ${mergeStatusCode}: ${mergeResponseMessage}`,\n      );\n    }\n\n    // If the PR does not need to be merged into any other target branches,\n    // we exit here as we already completed the merge.\n    if (!cherryPickTargetBranches.length) {\n      return;\n    }\n\n    // Refresh the target branch the PR has been merged into through the API. We need\n    // to re-fetch as otherwise we cannot cherry-pick the new commits into the remaining\n    // target branches.\n    this.fetchTargetBranches([githubTargetBranch]);\n\n    // Number of commits that have landed in the target branch. This could vary from\n    // the count of commits in the PR due to squashing.\n    const targetCommitsCount = method === 'squash' ? 1 : pullRequest.commitCount;\n\n    // Cherry pick the merged commits into the remaining target branches.\n    const failedBranches = await this.cherryPickIntoTargetBranches(\n      `${targetSha}~${targetCommitsCount}..${targetSha}`,\n      cherryPickTargetBranches,\n      {\n        // Commits that have been created by the Github API do not necessarily contain\n        // a reference to the source pull request (unless the squash strategy is used).\n        // To ensure that original commits can be found when a commit is viewed in a\n        // target branch, we add a link to the original commits when cherry-picking.\n        linkToOriginalCommits: true,\n      },\n    );\n\n    // We already checked whether the PR can be cherry-picked into the target branches,\n    // but in case the cherry-pick somehow fails, we still handle the conflicts here. The\n    // commits created through the Github API could be different (i.e. through squash).\n    if (failedBranches.length) {\n      throw new MergeConflictsFatalError(failedBranches);\n    }\n\n    this.pushTargetBranchesUpstream(cherryPickTargetBranches);\n\n    // Because our process brings changes into multiple branchces, we include a comment which\n    // expresses all of the branches the changes were merged into.\n    await this.git.github.issues.createComment({\n      ...this.git.remoteParams,\n      issue_number: pullRequest.prNumber,\n      body: `The changes were merged into the following branches: ${targetBranches.join(', ')}`,\n    });\n  }\n\n  /**\n   * Prompts the user for the commit message changes. Unlike as in the autosquash merge\n   * strategy, we cannot start an interactive rebase because we merge using the Github API.\n   * The Github API only allows modifications to PR title and body for squash merges.\n   */\n  private async _promptCommitMessageEdit(\n    pullRequest: PullRequest,\n    mergeOptions: OctokitMergeParams,\n  ) {\n    const commitMessage = await this._getDefaultSquashCommitMessage(pullRequest);\n    const result = await Prompt.editor({\n      message: 'Please update the commit message',\n      default: commitMessage,\n    });\n\n    // Split the new message into title and message. This is necessary because the\n    // Github API expects title and message to be passed separately.\n    const [newTitle, ...newMessage] = result.split(COMMIT_HEADER_SEPARATOR);\n\n    // Update the merge options so that the changes are reflected in there.\n    mergeOptions.commit_title = `${newTitle} (#${pullRequest.prNumber})`;\n    mergeOptions.commit_message = newMessage.join(COMMIT_HEADER_SEPARATOR);\n  }\n\n  /**\n   * Gets a commit message for the given pull request. Github by default concatenates\n   * multiple commit messages if a PR is merged in squash mode. We try to replicate this\n   * behavior here so that we have a default commit message that can be fixed up.\n   */\n  private async _getDefaultSquashCommitMessage(pullRequest: PullRequest): Promise<string> {\n    const commits = (await this._getPullRequestCommitMessages(pullRequest)).map((message) => ({\n      message,\n      parsed: parseCommitMessage(message),\n    }));\n    const messageBase = `${pullRequest.title}${COMMIT_HEADER_SEPARATOR}`;\n    if (commits.length <= 1) {\n      return `${messageBase}${commits[0].parsed.body}`;\n    }\n    const joinedMessages = commits.map((c) => `* ${c.message}`).join(COMMIT_HEADER_SEPARATOR);\n    return `${messageBase}${joinedMessages}`;\n  }\n\n  /** Gets all commit messages of commits in the pull request. */\n  private async _getPullRequestCommitMessages({prNumber}: PullRequest) {\n    const allCommits = await this.git.github.paginate(this.git.github.pulls.listCommits, {\n      ...this.git.remoteParams,\n      pull_number: prNumber,\n    });\n    return allCommits.map(({commit}) => commit.message);\n  }\n\n  /** Determines the merge action from the given pull request. */\n  private _getMergeActionFromPullRequest({labels}: PullRequest): GithubApiMergeMethod {\n    if (this._config.labels) {\n      const matchingLabel = this._config.labels.find(({pattern}) => labels.includes(pattern));\n      if (matchingLabel !== undefined) {\n        return matchingLabel.method;\n      }\n    }\n    return this._config.default;\n  }\n}\n"]}