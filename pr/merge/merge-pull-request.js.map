{"version":3,"file":"merge-pull-request.js","sourceRoot":"","sources":["merge-pull-request.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertValidGithubConfig, ConfigValidationError, getConfig} from '../../utils/config.js';\nimport {bold, Log} from '../../utils/logging.js';\nimport {AuthenticatedGitClient} from '../../utils/git/authenticated-git-client.js';\nimport {isGithubApiError} from '../../utils/git/github.js';\nimport {GITHUB_TOKEN_GENERATE_URL} from '../../utils/git/github-urls.js';\n\nimport {assertValidPullRequestConfig} from '../config/index.js';\nimport {MergeTool, PullRequestMergeFlags} from './merge-tool.js';\nimport {\n  FatalMergeToolError,\n  PullRequestValidationError,\n  UserAbortedMergeToolError,\n} from './failures.js';\nimport {\n  InvalidTargetBranchError,\n  InvalidTargetLabelError,\n} from '../common/targeting/target-label.js';\n\n/**\n * Merges a given pull request based on labels configured in the given merge configuration.\n * Pull requests can be merged with different strategies such as the Github API merge\n * strategy, or the local autosquash strategy. Either strategy has benefits and downsides.\n * More information on these strategies can be found in their dedicated strategy classes.\n *\n * See {@link GithubApiMergeStrategy} and {@link AutosquashMergeStrategy}\n *\n * @param prNumber Number of the pull request that should be merged.\n * @param flags Configuration options for merging pull requests.\n */\nexport async function mergePullRequest(prNumber: number, flags: PullRequestMergeFlags) {\n  // Set the environment variable to skip all git commit hooks triggered by husky. We are unable to\n  // rely on `--no-verify` as some hooks still run, notably the `prepare-commit-msg` hook.\n  process.env['HUSKY'] = '0';\n\n  const tool = await createPullRequestMergeTool(flags);\n\n  // Perform the merge. If the merge fails with non-fatal failures, the script\n  // will prompt whether it should rerun in force mode with the ignored failure.\n  if (!(await performMerge())) {\n    process.exit(1);\n  }\n\n  /** Performs the merge and returns whether it was successful or not. */\n  async function performMerge(\n    validationConfig = {\n      assertCompletedReviews: !flags.ignorePendingReviews,\n    },\n  ): Promise<boolean> {\n    try {\n      await tool.merge(prNumber, validationConfig);\n      return true;\n    } catch (e) {\n      // Catch errors to the Github API for invalid requests. We want to\n      // exit the script with a better explanation of the error.\n      if (isGithubApiError(e) && e.status === 401) {\n        Log.error('Github API request failed: ' + bold(e.message));\n        Log.error('Please ensure that your provided token is valid.');\n        Log.warn(`You can generate a token here: ${GITHUB_TOKEN_GENERATE_URL}`);\n        return false;\n      }\n      if (isGithubApiError(e)) {\n        Log.error('Github API request failed: ' + bold(e.message));\n        return false;\n      }\n      if (e instanceof UserAbortedMergeToolError) {\n        Log.warn('Manually aborted merging..');\n        return false;\n      }\n      if (e instanceof InvalidTargetBranchError) {\n        Log.error(`Pull request selects an invalid GitHub destination branch:`);\n        Log.error(` -> ${bold(e.failureMessage)}`);\n      }\n      if (e instanceof InvalidTargetLabelError) {\n        Log.error(`Pull request target label could not be determined:`);\n        Log.error(` -> ${bold(e.failureMessage)}`);\n      }\n\n      if (e instanceof PullRequestValidationError) {\n        Log.error('Pull request failed at least one validation check.');\n        Log.error('See above for specific error information');\n        return false;\n      }\n\n      // Note: Known errors in the merge tooling extend from the FatalMergeToolError, as such\n      // the instance check for FatalMergeToolError should remain last as it will be truthy for\n      // all of the subclasses.\n      if (e instanceof FatalMergeToolError) {\n        Log.error(`Could not merge the specified pull request. Error:`);\n        Log.error(` -> ${bold(e.message)}`);\n        return false;\n      }\n\n      // For unknown errors, always re-throw.\n      throw e;\n    }\n  }\n}\n\n/**\n * Creates the pull request merge tool using the given configuration options.\n *\n * Explicit configuration options can be specified when the merge script is used\n * outside of an `ng-dev` configured repository.\n */\nasync function createPullRequestMergeTool(flags: PullRequestMergeFlags) {\n  try {\n    const config = await getConfig();\n\n    assertValidGithubConfig(config);\n    assertValidPullRequestConfig(config);\n\n    /** The singleton instance of the authenticated git client. */\n    const git = await AuthenticatedGitClient.get();\n    return new MergeTool(config, git, flags);\n  } catch (e) {\n    if (e instanceof ConfigValidationError) {\n      if (e.errors.length) {\n        Log.error('Invalid merge configuration:');\n        e.errors.forEach((desc) => Log.error(`  -  ${desc}`));\n      } else {\n        Log.error(e.message);\n      }\n      process.exit(1);\n    }\n    throw e;\n  }\n}\n\n/**\n * Parses the pull request number from either the number or url string\n */\nexport function parsePrNumber(prUrlOrNumber: string): number {\n  // There is no url validation here other than presence of `/`.\n  // So whatever is the last segment of that string, url or not, will be\n  // parsed as a PR number.\n  const prNumber = parseInt(prUrlOrNumber.split('/').pop()!);\n  if (isNaN(prNumber)) {\n    throw new Error('Pull Request was unable to be parsed from the parameters');\n  }\n  return prNumber;\n}\n"]}