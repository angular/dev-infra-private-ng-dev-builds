{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"AAQA,OAAO,EAAC,qBAAqB,EAA4B,MAAM,uBAAuB,CAAC;AA+DvF,MAAM,UAAU,4BAA4B,CAC1C,MAAqD;IAErD,MAAM,MAAM,GAAa,EAAE,CAAC;IAC5B,IAAI,MAAM,CAAC,WAAW,KAAK,SAAS,EAAE,CAAC;QACrC,MAAM,IAAI,qBAAqB,CAC7B,0EAA0E,CAC3E,CAAC;IACJ,CAAC;IAED,IAAI,MAAM,CAAC,WAAW,CAAC,cAAc,KAAK,SAAS,EAAE,CAAC;QACpD,MAAM,CAAC,IAAI,CAAC,oEAAoE,CAAC,CAAC;IACpF,CAAC;IAED,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;QAClB,MAAM,IAAI,qBAAqB,CAAC,qCAAqC,EAAE,MAAM,CAAC,CAAC;IACjF,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ConfigValidationError, GithubConfig, NgDevConfig} from '../../utils/config.js';\n\n/**\n * Possible merge methods supported by the Github API.\n * https://developer.github.com/v3/pulls/#merge-a-pull-request-merge-button.\n *\n * `auto` is a pseudo merge method that is not supported by the Github API. It allows\n * the merge strategy to automatically determine the merge method based on the pull request.\n */\nexport type GithubApiMergeMethod = 'merge' | 'squash' | 'rebase' | 'auto';\n\n/** Configuration for the Github API merge strategy. */\nexport interface GithubApiMergeStrategyConfig {\n  /** Default method used for merging pull requests */\n  default: GithubApiMergeMethod;\n  /** Labels which specify a different merge method than the default. */\n  labels?: {pattern: string; method: GithubApiMergeMethod}[];\n}\n\n/** Configuration for the merge script. */\nexport interface PullRequestConfig {\n  /**\n   * Configuration for the upstream remote. All of these options are optional as\n   * defaults are provided by the common dev-infra github configuration.\n   */\n  remote?: GithubConfig;\n\n  /** Required base commits for given branches. */\n  requiredBaseCommits?: {[branchName: string]: string};\n\n  /** List of statuses that are required before a pull request can be merged. */\n  requiredStatuses?: {type: 'check' | 'status'; name: string}[];\n\n  /**\n   * Whether pull requests should be merged using the Github API. This can be enabled\n   * if projects want to have their pull requests show up as `Merged` in the Github UI.\n   * The downside is that fixup or squash commits no longer work as the Github API does\n   * not support this.\n   */\n  githubApiMerge: false | GithubApiMergeStrategyConfig;\n\n  /**\n   * List of commit scopes which are exempted from target label content requirements. i.e. no `feat`\n   * scopes in patch branches, no breaking changes in minor or patch changes.\n   */\n  targetLabelExemptScopes?: string[];\n\n  /**\n   * Optional map of validations to enable/disable, merged with the defaults from ng-dev.\n   */\n  validators?: PullRequestValidationConfig;\n\n  /**\n   * Whether target labeling should be disabled. Special option for repositories\n   * not working with the canonical versioning and branching of Angular projects.\n   *\n   * Generally not recommended as Angular-owned projects are supposed to consistently\n   * follow the canonical branching/versioning.\n   */\n  __noTargetLabeling?: boolean;\n}\n\n/** Loads and validates the merge configuration. */\nexport function assertValidPullRequestConfig<T extends NgDevConfig>(\n  config: T & Partial<{pullRequest: PullRequestConfig}>,\n): asserts config is T & {pullRequest: PullRequestConfig} {\n  const errors: string[] = [];\n  if (config.pullRequest === undefined) {\n    throw new ConfigValidationError(\n      'No pullRequest configuration found. Set the `pullRequest` configuration.',\n    );\n  }\n\n  if (config.pullRequest.githubApiMerge === undefined) {\n    errors.push('No explicit choice of merge strategy. Please set `githubApiMerge`.');\n  }\n\n  if (errors.length) {\n    throw new ConfigValidationError('Invalid `pullRequest` configuration', errors);\n  }\n}\n\nexport interface PullRequestValidationConfig {\n  [key: `assert${string}`]: boolean;\n}\n"]}