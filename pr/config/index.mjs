/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ConfigValidationError } from '../../utils/config.js';
/** Loads and validates the merge configuration. */
export function assertValidPullRequestConfig(config) {
    const errors = [];
    if (config.pullRequest === undefined) {
        throw new ConfigValidationError('No pullRequest configuration found. Set the `pullRequest` configuration.');
    }
    if (config.pullRequest.githubApiMerge === undefined) {
        errors.push('No explicit choice of merge strategy. Please set `githubApiMerge`.');
    }
    if (errors.length) {
        throw new ConfigValidationError('Invalid `pullRequest` configuration', errors);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9uZy1kZXYvcHIvY29uZmlnL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBQyxxQkFBcUIsRUFBNEIsTUFBTSx1QkFBdUIsQ0FBQztBQTJEdkYsbURBQW1EO0FBQ25ELE1BQU0sVUFBVSw0QkFBNEIsQ0FDMUMsTUFBcUQ7SUFFckQsTUFBTSxNQUFNLEdBQWEsRUFBRSxDQUFDO0lBQzVCLElBQUksTUFBTSxDQUFDLFdBQVcsS0FBSyxTQUFTLEVBQUUsQ0FBQztRQUNyQyxNQUFNLElBQUkscUJBQXFCLENBQzdCLDBFQUEwRSxDQUMzRSxDQUFDO0lBQ0osQ0FBQztJQUVELElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxjQUFjLEtBQUssU0FBUyxFQUFFLENBQUM7UUFDcEQsTUFBTSxDQUFDLElBQUksQ0FBQyxvRUFBb0UsQ0FBQyxDQUFDO0lBQ3BGLENBQUM7SUFFRCxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNsQixNQUFNLElBQUkscUJBQXFCLENBQUMscUNBQXFDLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDakYsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQ1xuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtDb25maWdWYWxpZGF0aW9uRXJyb3IsIEdpdGh1YkNvbmZpZywgTmdEZXZDb25maWd9IGZyb20gJy4uLy4uL3V0aWxzL2NvbmZpZy5qcyc7XG5cbi8qKlxuICogUG9zc2libGUgbWVyZ2UgbWV0aG9kcyBzdXBwb3J0ZWQgYnkgdGhlIEdpdGh1YiBBUEkuXG4gKiBodHRwczovL2RldmVsb3Blci5naXRodWIuY29tL3YzL3B1bGxzLyNtZXJnZS1hLXB1bGwtcmVxdWVzdC1tZXJnZS1idXR0b24uXG4gKi9cbmV4cG9ydCB0eXBlIEdpdGh1YkFwaU1lcmdlTWV0aG9kID0gJ21lcmdlJyB8ICdzcXVhc2gnIHwgJ3JlYmFzZSc7XG5cbi8qKiBDb25maWd1cmF0aW9uIGZvciB0aGUgR2l0aHViIEFQSSBtZXJnZSBzdHJhdGVneS4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgR2l0aHViQXBpTWVyZ2VTdHJhdGVneUNvbmZpZyB7XG4gIC8qKiBEZWZhdWx0IG1ldGhvZCB1c2VkIGZvciBtZXJnaW5nIHB1bGwgcmVxdWVzdHMgKi9cbiAgZGVmYXVsdDogR2l0aHViQXBpTWVyZ2VNZXRob2Q7XG4gIC8qKiBMYWJlbHMgd2hpY2ggc3BlY2lmeSBhIGRpZmZlcmVudCBtZXJnZSBtZXRob2QgdGhhbiB0aGUgZGVmYXVsdC4gKi9cbiAgbGFiZWxzPzoge3BhdHRlcm46IHN0cmluZzsgbWV0aG9kOiBHaXRodWJBcGlNZXJnZU1ldGhvZH1bXTtcbn1cblxuLyoqIENvbmZpZ3VyYXRpb24gZm9yIHRoZSBtZXJnZSBzY3JpcHQuICovXG5leHBvcnQgaW50ZXJmYWNlIFB1bGxSZXF1ZXN0Q29uZmlnIHtcbiAgLyoqXG4gICAqIENvbmZpZ3VyYXRpb24gZm9yIHRoZSB1cHN0cmVhbSByZW1vdGUuIEFsbCBvZiB0aGVzZSBvcHRpb25zIGFyZSBvcHRpb25hbCBhc1xuICAgKiBkZWZhdWx0cyBhcmUgcHJvdmlkZWQgYnkgdGhlIGNvbW1vbiBkZXYtaW5mcmEgZ2l0aHViIGNvbmZpZ3VyYXRpb24uXG4gICAqL1xuICByZW1vdGU/OiBHaXRodWJDb25maWc7XG5cbiAgLyoqIFJlcXVpcmVkIGJhc2UgY29tbWl0cyBmb3IgZ2l2ZW4gYnJhbmNoZXMuICovXG4gIHJlcXVpcmVkQmFzZUNvbW1pdHM/OiB7W2JyYW5jaE5hbWU6IHN0cmluZ106IHN0cmluZ307XG5cbiAgLyoqIExpc3Qgb2Ygc3RhdHVzZXMgdGhhdCBhcmUgcmVxdWlyZWQgYmVmb3JlIGEgcHVsbCByZXF1ZXN0IGNhbiBiZSBtZXJnZWQuICovXG4gIHJlcXVpcmVkU3RhdHVzZXM/OiB7dHlwZTogJ2NoZWNrJyB8ICdzdGF0dXMnOyBuYW1lOiBzdHJpbmd9W107XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgcHVsbCByZXF1ZXN0cyBzaG91bGQgYmUgbWVyZ2VkIHVzaW5nIHRoZSBHaXRodWIgQVBJLiBUaGlzIGNhbiBiZSBlbmFibGVkXG4gICAqIGlmIHByb2plY3RzIHdhbnQgdG8gaGF2ZSB0aGVpciBwdWxsIHJlcXVlc3RzIHNob3cgdXAgYXMgYE1lcmdlZGAgaW4gdGhlIEdpdGh1YiBVSS5cbiAgICogVGhlIGRvd25zaWRlIGlzIHRoYXQgZml4dXAgb3Igc3F1YXNoIGNvbW1pdHMgbm8gbG9uZ2VyIHdvcmsgYXMgdGhlIEdpdGh1YiBBUEkgZG9lc1xuICAgKiBub3Qgc3VwcG9ydCB0aGlzLlxuICAgKi9cbiAgZ2l0aHViQXBpTWVyZ2U6IGZhbHNlIHwgR2l0aHViQXBpTWVyZ2VTdHJhdGVneUNvbmZpZztcblxuICAvKipcbiAgICogTGlzdCBvZiBjb21taXQgc2NvcGVzIHdoaWNoIGFyZSBleGVtcHRlZCBmcm9tIHRhcmdldCBsYWJlbCBjb250ZW50IHJlcXVpcmVtZW50cy4gaS5lLiBubyBgZmVhdGBcbiAgICogc2NvcGVzIGluIHBhdGNoIGJyYW5jaGVzLCBubyBicmVha2luZyBjaGFuZ2VzIGluIG1pbm9yIG9yIHBhdGNoIGNoYW5nZXMuXG4gICAqL1xuICB0YXJnZXRMYWJlbEV4ZW1wdFNjb3Blcz86IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBPcHRpb25hbCBtYXAgb2YgdmFsaWRhdGlvbnMgdG8gZW5hYmxlL2Rpc2FibGUsIG1lcmdlZCB3aXRoIHRoZSBkZWZhdWx0cyBmcm9tIG5nLWRldi5cbiAgICovXG4gIHZhbGlkYXRvcnM/OiBQdWxsUmVxdWVzdFZhbGlkYXRpb25Db25maWc7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGFyZ2V0IGxhYmVsaW5nIHNob3VsZCBiZSBkaXNhYmxlZC4gU3BlY2lhbCBvcHRpb24gZm9yIHJlcG9zaXRvcmllc1xuICAgKiBub3Qgd29ya2luZyB3aXRoIHRoZSBjYW5vbmljYWwgdmVyc2lvbmluZyBhbmQgYnJhbmNoaW5nIG9mIEFuZ3VsYXIgcHJvamVjdHMuXG4gICAqXG4gICAqIEdlbmVyYWxseSBub3QgcmVjb21tZW5kZWQgYXMgQW5ndWxhci1vd25lZCBwcm9qZWN0cyBhcmUgc3VwcG9zZWQgdG8gY29uc2lzdGVudGx5XG4gICAqIGZvbGxvdyB0aGUgY2Fub25pY2FsIGJyYW5jaGluZy92ZXJzaW9uaW5nLlxuICAgKi9cbiAgX19ub1RhcmdldExhYmVsaW5nPzogYm9vbGVhbjtcbn1cblxuLyoqIExvYWRzIGFuZCB2YWxpZGF0ZXMgdGhlIG1lcmdlIGNvbmZpZ3VyYXRpb24uICovXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0VmFsaWRQdWxsUmVxdWVzdENvbmZpZzxUIGV4dGVuZHMgTmdEZXZDb25maWc+KFxuICBjb25maWc6IFQgJiBQYXJ0aWFsPHtwdWxsUmVxdWVzdDogUHVsbFJlcXVlc3RDb25maWd9Pixcbik6IGFzc2VydHMgY29uZmlnIGlzIFQgJiB7cHVsbFJlcXVlc3Q6IFB1bGxSZXF1ZXN0Q29uZmlnfSB7XG4gIGNvbnN0IGVycm9yczogc3RyaW5nW10gPSBbXTtcbiAgaWYgKGNvbmZpZy5wdWxsUmVxdWVzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IENvbmZpZ1ZhbGlkYXRpb25FcnJvcihcbiAgICAgICdObyBwdWxsUmVxdWVzdCBjb25maWd1cmF0aW9uIGZvdW5kLiBTZXQgdGhlIGBwdWxsUmVxdWVzdGAgY29uZmlndXJhdGlvbi4nLFxuICAgICk7XG4gIH1cblxuICBpZiAoY29uZmlnLnB1bGxSZXF1ZXN0LmdpdGh1YkFwaU1lcmdlID09PSB1bmRlZmluZWQpIHtcbiAgICBlcnJvcnMucHVzaCgnTm8gZXhwbGljaXQgY2hvaWNlIG9mIG1lcmdlIHN0cmF0ZWd5LiBQbGVhc2Ugc2V0IGBnaXRodWJBcGlNZXJnZWAuJyk7XG4gIH1cblxuICBpZiAoZXJyb3JzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBDb25maWdWYWxpZGF0aW9uRXJyb3IoJ0ludmFsaWQgYHB1bGxSZXF1ZXN0YCBjb25maWd1cmF0aW9uJywgZXJyb3JzKTtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFB1bGxSZXF1ZXN0VmFsaWRhdGlvbkNvbmZpZyB7XG4gIFtrZXk6IGBhc3NlcnQke3N0cmluZ31gXTogYm9vbGVhbjtcbn1cbiJdfQ==