{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Commit} from '../../commit-message/parse.js';\nimport {getCommitsInRange} from '../../commit-message/utils.js';\nimport {AuthenticatedGitClient} from '../../utils/git/authenticated-git-client.js';\nimport {addTokenToGitHttpsUrl} from '../../utils/git/github-urls.js';\nimport {Log} from '../../utils/logging.js';\nimport {Prompt} from '../../utils/prompt.js';\nimport {fetchPullRequestFromGithub} from '../common/fetch-pull-request.js';\n\n/**\n * Rebase the provided PR onto its merge target branch, and push up the resulting\n * commit to the PRs repository.\n *\n * @returns a status code indicating whether the rebase was successful.\n */\nexport async function rebasePr(prNumber: number, interactive: boolean = false): Promise<number> {\n  /** The singleton instance of the authenticated git client. */\n  const git = await AuthenticatedGitClient.get();\n\n  if (git.hasUncommittedChanges()) {\n    Log.error('Cannot perform rebase of PR with local changes.');\n    return 1;\n  }\n\n  /**\n   * The branch or revision originally checked out before this method performed\n   * any Git operations that may change the working branch.\n   */\n  const previousBranchOrRevision = git.getCurrentBranchOrRevision();\n  /* Get the PR information from Github. */\n  const pr = await fetchPullRequestFromGithub(git, prNumber);\n\n  if (pr === null) {\n    Log.error(`Specified pull request does not exist.`);\n    return 1;\n  }\n\n  const headRefName = pr.headRef.name;\n  const baseRefName = pr.baseRef.name;\n  const fullHeadRef = `${pr.headRef.repository.nameWithOwner}:${headRefName}`;\n  const fullBaseRef = `${pr.baseRef.repository.nameWithOwner}:${baseRefName}`;\n  const headRefUrl = addTokenToGitHttpsUrl(pr.headRef.repository.url, git.githubToken);\n  const baseRefUrl = addTokenToGitHttpsUrl(pr.baseRef.repository.url, git.githubToken);\n\n  // Note: Since we use a detached head for rebasing the PR and therefore do not have\n  // remote-tracking branches configured, we need to set our expected ref and SHA. This\n  // allows us to use `--force-with-lease` for the detached head while ensuring that we\n  // never accidentally override upstream changes that have been pushed in the meanwhile.\n  // See:\n  // https://git-scm.com/docs/git-push#Documentation/git-push.txt---force-with-leaseltrefnamegtltexpectgt\n  const forceWithLeaseFlag = `--force-with-lease=${headRefName}:${pr.headRefOid}`;\n\n  // If the PR does not allow maintainers to modify it, exit as the rebased PR cannot\n  // be pushed up.\n  if (!pr.maintainerCanModify && !pr.viewerDidAuthor) {\n    Log.error(\n      `Cannot rebase as you did not author the PR and the PR does not allow maintainers` +\n        `to modify the PR`,\n    );\n    return 1;\n  }\n\n  try {\n    // Fetches are done with --deepen=500 increase the likelihood of finding a common ancestor when\n    // a shallow clone is being used.\n\n    // Fetch the branch at the commit of the PR, and check it out in a detached state.\n    Log.info(`Checking out PR #${prNumber} from ${fullHeadRef}`);\n    git.run(['fetch', '-q', headRefUrl, headRefName, '--deepen=500']);\n    git.run(['checkout', '-q', '--detach', 'FETCH_HEAD']);\n    // Fetch the PRs target branch and rebase onto it.\n    Log.info(`Fetching ${fullBaseRef} to rebase #${prNumber} on`);\n    git.run(['fetch', '-q', baseRefUrl, baseRefName, '--deepen=500']);\n\n    const commonAncestorSha = git.run(['merge-base', 'HEAD', 'FETCH_HEAD']).stdout.trim();\n\n    const commits = await getCommitsInRange(commonAncestorSha, 'HEAD');\n\n    let squashFixups =\n      process.env['CI'] !== undefined ||\n      commits.filter((commit: Commit) => commit.isFixup).length === 0\n        ? false\n        : await Prompt.confirm({\n            message: `PR #${prNumber} contains fixup commits, would you like to squash them during rebase?`,\n            default: true,\n          });\n\n    Log.info(`Attempting to rebase PR #${prNumber} on ${fullBaseRef}`);\n\n    /**\n     * Tuple of flags to be added to the rebase command and env object to run the git command.\n     *\n     * Additional flags to perform the autosquashing are added when the user confirm squashing of\n     * fixup commits should occur.\n     */\n\n    // the env variable prevents the editor from showing in the case of fixup commits and not\n    // interactively rebasing\n    const env =\n      squashFixups && !interactive ? {...process.env, GIT_SEQUENCE_EDITOR: 'true'} : undefined;\n    let flags: string[] = [];\n\n    if (squashFixups || interactive) {\n      flags.push('--interactive');\n    }\n    if (squashFixups) {\n      flags.push('--autosquash');\n    }\n\n    const rebaseResult = git.runGraceful(['rebase', ...flags, 'FETCH_HEAD'], {env: env});\n\n    // If the rebase was clean, push the rebased PR up to the authors fork.\n    if (rebaseResult.status === 0) {\n      Log.info(`Rebase was able to complete automatically without conflicts`);\n      Log.info(`Pushing rebased PR #${prNumber} to ${fullHeadRef}`);\n      git.run(['push', headRefUrl, `HEAD:${headRefName}`, forceWithLeaseFlag]);\n      Log.info(`Rebased and updated PR #${prNumber}`);\n      git.checkout(previousBranchOrRevision, true);\n      return 0;\n    }\n  } catch (err) {\n    Log.error(err);\n    git.checkout(previousBranchOrRevision, true);\n    return 1;\n  }\n\n  // On automatic rebase failures, prompt to choose if the rebase should be continued\n  // manually or aborted now.\n  Log.info(`Rebase was unable to complete automatically without conflicts.`);\n  // If the command is run in a non-CI environment, prompt to allow for the user to\n  // manually complete the rebase.\n  const continueRebase =\n    process.env['CI'] === undefined &&\n    (await Prompt.confirm({message: 'Manually complete rebase?'}));\n\n  if (continueRebase) {\n    Log.info(\n      `After manually completing rebase, run the following command to update PR #${prNumber}:`,\n    );\n    Log.info(` $ git push ${pr.headRef.repository.url} HEAD:${headRefName} ${forceWithLeaseFlag}`);\n    Log.info();\n    Log.info(`To abort the rebase and return to the state of the repository before this command`);\n    Log.info(`run the following command:`);\n    Log.info(\n      ` $ git rebase --abort && git reset --hard && git checkout ${previousBranchOrRevision}`,\n    );\n    return 1;\n  } else {\n    Log.info(`Cleaning up git state, and restoring previous state.`);\n  }\n\n  git.checkout(previousBranchOrRevision, true);\n  return 1;\n}\n"]}