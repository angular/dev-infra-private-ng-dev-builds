{"version":3,"file":"cli.js","sourceRoot":"","sources":["cli.ts"],"names":[],"mappings":"AAUA,OAAO,EAAC,GAAG,EAAC,MAAM,wBAAwB,CAAC;AAC3C,OAAO,EAAC,oBAAoB,EAAC,MAAM,iCAAiC,CAAC;AAErE,OAAO,EAAC,yBAAyB,EAAC,MAAM,YAAY,CAAC;AASrD,SAAS,OAAO,CAAC,IAAU;IACzB,OAAO,oBAAoB,CAAC,IAAI,CAAC;SAC9B,MAAM,CAAC,MAAM,EAAE;QACd,WAAW,EAAE,+CAA+C;QAC5D,kBAAkB,EAAE,aAAa;QACjC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACtE,OAAO,EAAE,oBAAoB,EAAE;KAChC,CAAC;SACD,UAAU,CAAC,IAAI,EAAE,EAAC,YAAY,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAC,CAAC,CAAC;AAC5D,CAAC;AAGD,KAAK,UAAU,OAAO,CAAC,EAAC,EAAE,EAAE,IAAI,EAAyC;IAEvE,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;QAChB,GAAG,CAAC,KAAK,CAAC,oDAAoD,CAAC,CAAC;QAChE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC;IACD,MAAM,yBAAyB,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;AAC5C,CAAC;AAGD,SAAS,oBAAoB;IAC3B,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;IAExB,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAE1B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;IAClC,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC;AACxB,CAAC;AAGD,MAAM,CAAC,MAAM,iCAAiC,GAAmD;IAC/F,OAAO;IACP,OAAO;IACP,OAAO,EAAE,6BAA6B;IACtC,QAAQ,EAAE,kEAAkE;CAC7E,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Argv, Arguments, CommandModule} from 'yargs';\n\nimport {Log} from '../../utils/logging.js';\nimport {addGithubTokenOption} from '../../utils/git/github-yargs.js';\n\nimport {discoverNewConflictsForPr} from './index.js';\n\n/** The options available to the discover-new-conflicts command via CLI. */\nexport interface DiscoverNewConflictsOptions {\n  date: number;\n  pr: number;\n}\n\n/** Builds the discover-new-conflicts pull request command. */\nfunction builder(argv: Argv): Argv<DiscoverNewConflictsOptions> {\n  return addGithubTokenOption(argv)\n    .option('date', {\n      description: 'Only consider PRs updated since provided date',\n      defaultDescription: '30 days ago',\n      coerce: (date) => (typeof date === 'number' ? date : Date.parse(date)),\n      default: getThirtyDaysAgoDate(),\n    })\n    .positional('pr', {demandOption: true, type: 'number'});\n}\n\n/** Handles the discover-new-conflicts pull request command. */\nasync function handler({pr, date}: Arguments<DiscoverNewConflictsOptions>) {\n  // If a provided date is not able to be parsed, yargs provides it as NaN.\n  if (isNaN(date)) {\n    Log.error('Unable to parse the value provided via --date flag');\n    process.exit(1);\n  }\n  await discoverNewConflictsForPr(pr, date);\n}\n\n/** Gets a date object 30 days ago from today. */\nfunction getThirtyDaysAgoDate() {\n  const date = new Date();\n  // Set the hours, minutes and seconds to 0 to only consider date.\n  date.setHours(0, 0, 0, 0);\n  // Set the date to 30 days in the past.\n  date.setDate(date.getDate() - 30);\n  return date.getTime();\n}\n\n/** yargs command module for discovering new conflicts for a PR  */\nexport const DiscoverNewConflictsCommandModule: CommandModule<{}, DiscoverNewConflictsOptions> = {\n  handler,\n  builder,\n  command: 'discover-new-conflicts <pr>',\n  describe: 'Check if a pending PR causes new conflicts for other pending PRs',\n};\n"]}