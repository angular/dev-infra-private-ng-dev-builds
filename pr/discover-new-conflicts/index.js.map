{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Bar} from 'cli-progress';\n\nimport {Log} from '../../utils/logging.js';\nimport {AuthenticatedGitClient} from '../../utils/git/authenticated-git-client.js';\nimport {GitCommandError} from '../../utils/git/git-client.js';\nimport {\n  fetchPendingPullRequestsFromGithub,\n  PullRequestFromGithub,\n} from '../common/fetch-pull-request.js';\n\n/** Name of a temporary local branch that is used for checking conflicts. **/\nconst tempWorkingBranch = '__NgDevRepoBaseAfterChange__';\n\n/** Checks if the provided PR will cause new conflicts in other pending PRs. */\nexport async function discoverNewConflictsForPr(newPrNumber: number, updatedAfter: number) {\n  /** The singleton instance of the authenticated git client. */\n  const git = await AuthenticatedGitClient.get();\n\n  // If there are any local changes in the current repository state, the\n  // check cannot run as it needs to move between branches.\n  if (git.hasUncommittedChanges()) {\n    Log.error('Cannot run with local changes. Please make sure there are no local changes.');\n    process.exit(1);\n  }\n\n  /** The active github branch or revision before we performed any Git commands. */\n  const previousBranchOrRevision = git.getCurrentBranchOrRevision();\n  /* Progress bar to indicate progress. */\n  const progressBar = new Bar({format: `[{bar}] ETA: {eta}s | {value}/{total}`});\n  /* PRs which were found to be conflicting. */\n  const conflicts: Array<PullRequestFromGithub> = [];\n\n  Log.info(`Requesting pending PRs from Github`);\n  /** List of PRs from github currently known as mergable. */\n  const allPendingPRs = await fetchPendingPullRequestsFromGithub(git);\n\n  if (allPendingPRs === null) {\n    Log.error('Unable to find any pending PRs in the repository');\n    process.exit(1);\n  }\n\n  /** The PR which is being checked against. */\n  const requestedPr = allPendingPRs.find((pr) => pr.number === newPrNumber);\n  if (requestedPr === undefined) {\n    Log.error(\n      `The request PR, #${newPrNumber} was not found as a pending PR on github, please confirm`,\n    );\n    Log.error(`the PR number is correct and is an open PR`);\n    process.exit(1);\n  }\n\n  const pendingPrs = allPendingPRs.filter((pr) => {\n    return (\n      // PRs being merged into the same target branch as the requested PR\n      pr.baseRef.name === requestedPr.baseRef.name &&\n      // PRs which either have not been processed or are determined as mergable by Github\n      pr.mergeable !== 'CONFLICTING' &&\n      // PRs updated after the provided date\n      new Date(pr.updatedAt).getTime() >= updatedAfter\n    );\n  });\n  Log.info(`Retrieved ${allPendingPRs.length} total pending PRs`);\n  Log.info(`Checking ${pendingPrs.length} PRs for conflicts after a merge of #${newPrNumber}`);\n\n  // Fetch and checkout the PR being checked.\n  git.run(['fetch', '-q', requestedPr.headRef.repository.url, requestedPr.headRef.name]);\n  git.run(['checkout', '-q', '-B', tempWorkingBranch, 'FETCH_HEAD']);\n\n  // Rebase the PR against the PRs target branch.\n  git.run(['fetch', '-q', requestedPr.baseRef.repository.url, requestedPr.baseRef.name]);\n  try {\n    git.run(['rebase', 'FETCH_HEAD'], {stdio: 'ignore'});\n  } catch (err) {\n    if (err instanceof GitCommandError) {\n      Log.error('The requested PR currently has conflicts');\n      git.checkout(previousBranchOrRevision, true);\n      process.exit(1);\n    }\n    throw err;\n  }\n\n  // Start the progress bar\n  progressBar.start(pendingPrs.length, 0);\n\n  // Check each PR to determine if it can merge cleanly into the repo after the target PR.\n  for (const pr of pendingPrs) {\n    // Fetch and checkout the next PR\n    git.run(['fetch', '-q', pr.headRef.repository.url, pr.headRef.name]);\n    git.run(['checkout', '-q', '--detach', 'FETCH_HEAD']);\n    // Check if the PR cleanly rebases into the repo after the target PR.\n    try {\n      git.run(['rebase', tempWorkingBranch], {stdio: 'ignore'});\n    } catch (err) {\n      if (err instanceof GitCommandError) {\n        conflicts.push(pr);\n      } else {\n        throw err;\n      }\n    }\n    // Abort any outstanding rebase attempt.\n    git.runGraceful(['rebase', '--abort'], {stdio: 'ignore'});\n\n    progressBar.increment(1);\n  }\n  // End the progress bar as all PRs have been processed.\n  progressBar.stop();\n  Log.info();\n  Log.info(`Result:`);\n\n  git.checkout(previousBranchOrRevision, true);\n\n  // If no conflicts are found, exit successfully.\n  if (conflicts.length === 0) {\n    Log.info(`No new conflicting PRs found after #${newPrNumber} merging`);\n    process.exit(0);\n  }\n\n  // Inform about discovered conflicts, exit with failure.\n  Log.error.group(`${conflicts.length} PR(s) which conflict(s) after #${newPrNumber} merges:`);\n  for (const pr of conflicts) {\n    Log.error(`  - #${pr.number}: ${pr.title}`);\n  }\n  Log.error.groupEnd();\n  process.exit(1);\n}\n"]}