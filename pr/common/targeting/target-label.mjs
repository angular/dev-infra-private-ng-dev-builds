/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { getTargetLabelConfigsForActiveReleaseTrains } from './labels.js';
/**
 * Unique error that will be thrown if an invalid branch is targeted.
 */
export class InvalidTargetBranchError {
    constructor(failureMessage) {
        this.failureMessage = failureMessage;
    }
}
/**
 * Unique error that will be thrown if an invalid label has been
 * applied to a pull request.
 */
export class InvalidTargetLabelError {
    constructor(failureMessage) {
        this.failureMessage = failureMessage;
    }
}
/**
 * Gets the matching target label config based on pull request labels.
 *
 * @throws {InvalidTargetLabelError} An invalid target label error is thrown
 *   if no single valid target label is applied.
 */
export async function getMatchingTargetLabelConfigForPullRequest(labelsOnPullRequest, labelConfigs) {
    const matches = [];
    for (const prLabelName of labelsOnPullRequest) {
        const match = labelConfigs.find(({ label }) => label.name === prLabelName);
        if (match !== undefined) {
            matches.push(match);
        }
    }
    if (matches.length === 1) {
        return matches[0];
    }
    if (matches.length === 0) {
        throw new InvalidTargetLabelError('Unable to determine target for the PR as it has no target label.');
    }
    throw new InvalidTargetLabelError('Unable to determine target for the PR as it has multiple target labels.');
}
/**
 * Gets the target branches and label of the given pull request.
 *
 * @throws {InvalidTargetLabelError} An invalid target label error is thrown
 *   if no single valid target label is applied.
 */
export async function getTargetBranchesAndLabelForPullRequest(activeReleaseTrains, github, config, labelsOnPullRequest, githubTargetBranch) {
    const labelConfigs = await getTargetLabelConfigsForActiveReleaseTrains(activeReleaseTrains, github, config);
    const matchingConfig = await getMatchingTargetLabelConfigForPullRequest(labelsOnPullRequest, labelConfigs);
    return {
        branches: await getBranchesForTargetLabel(matchingConfig, githubTargetBranch),
        label: matchingConfig.label,
    };
}
/**
 * Gets the branches for the specified target label config.
 *
 * @throws {InvalidTargetLabelError} Invalid label has been applied to pull request.
 * @throws {InvalidTargetBranchError} Invalid Github target branch has been selected.
 */
export async function getBranchesForTargetLabel(labelConfig, githubTargetBranch) {
    return typeof labelConfig.branches === 'function'
        ? await labelConfig.branches(githubTargetBranch)
        : await labelConfig.branches;
}
//# sourceMappingURL=data:application/json;base64,