{"version":3,"file":"lts-branch.js","sourceRoot":"","sources":["lts-branch.ts"],"names":[],"mappings":"AAQA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAG5B,OAAO,EACL,wBAAwB,EACxB,0BAA0B,EAC1B,uBAAuB,EACvB,uBAAuB,GAExB,MAAM,sCAAsC,CAAC;AAE9C,OAAO,EAAC,GAAG,EAAE,GAAG,EAAE,MAAM,EAAC,MAAM,2BAA2B,CAAC;AAC3D,OAAO,EAAC,wBAAwB,EAAC,MAAM,mBAAmB,CAAC;AAC3D,OAAO,EAAC,aAAa,EAAC,MAAM,0BAA0B,CAAC;AACvD,OAAO,EAAC,MAAM,EAAC,MAAM,0BAA0B,CAAC;AAUhD,MAAM,CAAC,KAAK,UAAU,qBAAqB,CACzC,IAAwB,EACxB,aAA4B,EAC5B,UAAkB;IAElB,MAAM,EAAC,OAAO,EAAC,GAAG,MAAM,uBAAuB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;IAClE,MAAM,EAAC,WAAW,EAAE,QAAQ,EAAE,IAAI,EAAC,GAAG,MAAM,0BAA0B,CAAC,aAAa,CAAC,CAAC;IAGtF,MAAM,SAAS,GAAG,uBAAuB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACzD,MAAM,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;IAKrD,IAAI,UAAU,KAAK,IAAI,EAAE,CAAC;QACxB,MAAM,IAAI,wBAAwB,CAAC,8BAA8B,OAAO,CAAC,KAAK,UAAU,CAAC,CAAC;IAC5F,CAAC;IAID,IAAI,UAAU,KAAK,GAAG,UAAU,CAAC,KAAK,IAAI,UAAU,CAAC,KAAK,IAAI,EAAE,CAAC;QAC/D,MAAM,IAAI,wBAAwB,CAChC,oCAAoC,OAAO,CAAC,KAAK,mBAAmB;YAClE,gCAAgC,UAAU,CAAC,KAAK,IAAI,UAAU,CAAC,KAAK,IAAI,CAC3E,CAAC;IACJ,CAAC;IAED,MAAM,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC;IACzB,MAAM,gBAAgB,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC;IAChE,MAAM,UAAU,GAAG,wBAAwB,CAAC,gBAAgB,CAAC,CAAC;IAK9D,IAAI,KAAK,GAAG,UAAU,EAAE,CAAC;QACvB,MAAM,cAAc,GAAG,UAAU,CAAC,kBAAkB,CAAC,aAAa,CAAC,CAAC;QACpE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,gCAAgC,OAAO,CAAC,KAAK,OAAO,cAAc,GAAG,CAAC,CAAC,CAAC;QACrF,GAAG,CAAC,IAAI,CACN,MAAM,CACJ,2DAA2D;YACzD,uCAAuC,CAC1C,CACF,CAAC;QACF,IAAI,MAAM,MAAM,CAAC,OAAO,CAAC,EAAC,OAAO,EAAE,+CAA+C,EAAC,CAAC,EAAE,CAAC;YACrF,OAAO;QACT,CAAC;QACD,MAAM,IAAI,wBAAwB,CAChC,kCAAkC,OAAO,CAAC,KAAK,OAAO,cAAc,IAAI;YACtE,0CAA0C,UAAU,UAAU,CACjE,CAAC;IACJ,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport semver from 'semver';\n\nimport {ReleaseConfig} from '../../../release/config/index.js';\nimport {\n  computeLtsEndDateOfMajor,\n  fetchProjectNpmPackageInfo,\n  getLtsNpmDistTagOfMajor,\n  getVersionInfoForBranch,\n  ReleaseRepoWithApi,\n} from '../../../release/versioning/index.js';\n\nimport {Log, red, yellow} from '../../../utils/logging.js';\nimport {InvalidTargetBranchError} from './target-label.js';\nimport {defaultLocale} from '../../../utils/locale.js';\nimport {Prompt} from '../../../utils/prompt.js';\n\n/**\n * Asserts that the given branch corresponds to an active LTS version-branch that can receive\n * backport fixes. Throws an error if LTS expired or an invalid branch is selected.\n *\n * @param repo Repository containing the given branch. Used for Github API queries.\n * @param releaseConfig Configuration for releases. Used to query NPM about past publishes.\n * @param branchName Branch that is checked to be an active LTS version-branch.\n * */\nexport async function assertActiveLtsBranch(\n  repo: ReleaseRepoWithApi,\n  releaseConfig: ReleaseConfig,\n  branchName: string,\n) {\n  const {version} = await getVersionInfoForBranch(repo, branchName);\n  const {'dist-tags': distTags, time} = await fetchProjectNpmPackageInfo(releaseConfig);\n\n  // LTS versions should be tagged in NPM in the following format: `v{major}-lts`.\n  const ltsNpmTag = getLtsNpmDistTagOfMajor(version.major);\n  const ltsVersion = semver.parse(distTags[ltsNpmTag]);\n\n  // Ensure that there is an LTS version tagged for the given version-branch major. e.g.\n  // if the version branch is `9.2.x` then we want to make sure that there is an LTS\n  // version tagged in NPM for `v9`, following the `v{major}-lts` tag convention.\n  if (ltsVersion === null) {\n    throw new InvalidTargetBranchError(`No LTS version tagged for v${version.major} in NPM.`);\n  }\n\n  // Ensure that the correct branch is used for the LTS version. We do not want to merge\n  // changes to older minor version branches that do not reflect the current LTS version.\n  if (branchName !== `${ltsVersion.major}.${ltsVersion.minor}.x`) {\n    throw new InvalidTargetBranchError(\n      `Not using last-minor branch for v${version.major} LTS version. PR ` +\n        `should be updated to target: ${ltsVersion.major}.${ltsVersion.minor}.x`,\n    );\n  }\n\n  const today = new Date();\n  const majorReleaseDate = new Date(time[`${version.major}.0.0`]);\n  const ltsEndDate = computeLtsEndDateOfMajor(majorReleaseDate);\n\n  // Check if LTS has already expired for the targeted major version. If so, we do not\n  // allow the merge as per our LTS guarantees. Can be forcibly overridden if desired.\n  // See: https://angular.io/guide/releases#support-policy-and-schedule.\n  if (today > ltsEndDate) {\n    const ltsEndDateText = ltsEndDate.toLocaleDateString(defaultLocale);\n    Log.warn(red(`Long-term support ended for v${version.major} on ${ltsEndDateText}.`));\n    Log.warn(\n      yellow(\n        `Merging of pull requests for this major is generally not ` +\n          `desired, but can be forcibly ignored.`,\n      ),\n    );\n    if (await Prompt.confirm({message: 'Do you want to forcibly proceed with merging?'})) {\n      return;\n    }\n    throw new InvalidTargetBranchError(\n      `Long-term supported ended for v${version.major} on ${ltsEndDateText}. ` +\n        `Pull request cannot be merged into the ${branchName} branch.`,\n    );\n  }\n}\n"]}