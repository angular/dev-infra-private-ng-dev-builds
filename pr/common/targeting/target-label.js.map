{"version":3,"file":"target-label.js","sourceRoot":"","sources":["target-label.ts"],"names":[],"mappings":"AASA,OAAO,EAAC,2CAA2C,EAAC,MAAM,aAAa,CAAC;AAmCxE,MAAM,OAAO,wBAAwB;IACnC,YAAmB,cAAsB;QAAtB,mBAAc,GAAd,cAAc,CAAQ;IAAG,CAAC;CAC9C;AAMD,MAAM,OAAO,uBAAuB;IAClC,YAAmB,cAAsB;QAAtB,mBAAc,GAAd,cAAc,CAAQ;IAAG,CAAC;CAC9C;AAQD,MAAM,CAAC,KAAK,UAAU,0CAA0C,CAC9D,mBAA6B,EAC7B,YAAiC;IAEjC,MAAM,OAAO,GAAwB,EAAE,CAAC;IAExC,KAAK,MAAM,WAAW,IAAI,mBAAmB,EAAE,CAAC;QAC9C,MAAM,KAAK,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC,EAAC,KAAK,EAAC,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,KAAK,WAAW,CAAC,CAAC;QACzE,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;YACxB,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACtB,CAAC;IACH,CAAC;IACD,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACzB,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC;IACD,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACzB,MAAM,IAAI,uBAAuB,CAC/B,kEAAkE,CACnE,CAAC;IACJ,CAAC;IACD,MAAM,IAAI,uBAAuB,CAC/B,yEAAyE,CAC1E,CAAC;AACJ,CAAC;AAQD,MAAM,CAAC,KAAK,UAAU,uCAAuC,CAC3D,mBAAwC,EACxC,MAAoB,EACpB,MAA2E,EAC3E,mBAA6B,EAC7B,kBAA0B;IAE1B,MAAM,YAAY,GAAG,MAAM,2CAA2C,CACpE,mBAAmB,EACnB,MAAM,EACN,MAAM,CACP,CAAC;IACF,MAAM,cAAc,GAAG,MAAM,0CAA0C,CACrE,mBAAmB,EACnB,YAAY,CACb,CAAC;IAEF,OAAO;QACL,QAAQ,EAAE,MAAM,yBAAyB,CAAC,cAAc,EAAE,kBAAkB,CAAC;QAC7E,KAAK,EAAE,cAAc,CAAC,KAAK;KAC5B,CAAC;AACJ,CAAC;AAQD,MAAM,CAAC,KAAK,UAAU,yBAAyB,CAC7C,WAA8B,EAC9B,kBAA0B;IAE1B,OAAO,OAAO,WAAW,CAAC,QAAQ,KAAK,UAAU;QAC/C,CAAC,CAAC,MAAM,WAAW,CAAC,QAAQ,CAAC,kBAAkB,CAAC;QAChD,CAAC,CAAC,MAAM,WAAW,CAAC,QAAQ,CAAC;AACjC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PullRequestConfig} from '../../config/index.js';\nimport {getTargetLabelConfigsForActiveReleaseTrains} from './labels.js';\nimport {GithubConfig, NgDevConfig} from '../../../utils/config.js';\nimport {GithubClient} from '../../../utils/git/github.js';\nimport {ActiveReleaseTrains} from '../../../release/versioning/index.js';\nimport {TargetLabel} from '../labels/target.js';\n\n/** Type describing the determined target of a pull request. */\nexport interface PullRequestTarget {\n  /** Branches which the pull request targets. */\n  branches: string[];\n  /** Target label applied to the pull request. */\n  label: TargetLabel;\n}\n\n/**\n * Configuration for a target label. The config is responsible for\n * mapping a label to its branches.\n */\nexport interface TargetLabelConfig {\n  /** Target label for which the config applies to. */\n  label: TargetLabel;\n  /**\n   * List of branches a pull request with this target label should be merged into.\n   * Can also be wrapped in a function that accepts the target branch specified in the\n   * Github Web UI. This is useful for supporting labels like `target: development-branch`.\n   *\n   * @throws {InvalidTargetLabelError} Invalid label has been applied to pull request.\n   * @throws {InvalidTargetBranchError} Invalid Github target branch has been selected.\n   */\n  branches: (githubTargetBranch: string) => string[] | Promise<string[]>;\n}\n\n/**\n * Unique error that will be thrown if an invalid branch is targeted.\n */\nexport class InvalidTargetBranchError {\n  constructor(public failureMessage: string) {}\n}\n\n/**\n * Unique error that will be thrown if an invalid label has been\n * applied to a pull request.\n */\nexport class InvalidTargetLabelError {\n  constructor(public failureMessage: string) {}\n}\n\n/**\n * Gets the matching target label config based on pull request labels.\n *\n * @throws {InvalidTargetLabelError} An invalid target label error is thrown\n *   if no single valid target label is applied.\n */\nexport async function getMatchingTargetLabelConfigForPullRequest(\n  labelsOnPullRequest: string[],\n  labelConfigs: TargetLabelConfig[],\n): Promise<TargetLabelConfig> {\n  const matches: TargetLabelConfig[] = [];\n\n  for (const prLabelName of labelsOnPullRequest) {\n    const match = labelConfigs.find(({label}) => label.name === prLabelName);\n    if (match !== undefined) {\n      matches.push(match);\n    }\n  }\n  if (matches.length === 1) {\n    return matches[0];\n  }\n  if (matches.length === 0) {\n    throw new InvalidTargetLabelError(\n      'Unable to determine target for the PR as it has no target label.',\n    );\n  }\n  throw new InvalidTargetLabelError(\n    'Unable to determine target for the PR as it has multiple target labels.',\n  );\n}\n\n/**\n * Gets the target branches and label of the given pull request.\n *\n * @throws {InvalidTargetLabelError} An invalid target label error is thrown\n *   if no single valid target label is applied.\n */\nexport async function getTargetBranchesAndLabelForPullRequest(\n  activeReleaseTrains: ActiveReleaseTrains,\n  github: GithubClient,\n  config: NgDevConfig<{pullRequest: PullRequestConfig; github: GithubConfig}>,\n  labelsOnPullRequest: string[],\n  githubTargetBranch: string,\n): Promise<PullRequestTarget> {\n  const labelConfigs = await getTargetLabelConfigsForActiveReleaseTrains(\n    activeReleaseTrains,\n    github,\n    config,\n  );\n  const matchingConfig = await getMatchingTargetLabelConfigForPullRequest(\n    labelsOnPullRequest,\n    labelConfigs,\n  );\n\n  return {\n    branches: await getBranchesForTargetLabel(matchingConfig, githubTargetBranch),\n    label: matchingConfig.label,\n  };\n}\n\n/**\n * Gets the branches for the specified target label config.\n *\n * @throws {InvalidTargetLabelError} Invalid label has been applied to pull request.\n * @throws {InvalidTargetBranchError} Invalid Github target branch has been selected.\n */\nexport async function getBranchesForTargetLabel(\n  labelConfig: TargetLabelConfig,\n  githubTargetBranch: string,\n): Promise<string[]> {\n  return typeof labelConfig.branches === 'function'\n    ? await labelConfig.branches(githubTargetBranch)\n    : await labelConfig.branches;\n}\n"]}