{"version":3,"file":"checkout-pr.js","sourceRoot":"","sources":["checkout-pr.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {types as graphqlTypes} from 'typed-graphqlify';\n\nimport {AuthenticatedGitClient} from '../../utils/git/authenticated-git-client.js';\nimport {addTokenToGitHttpsUrl} from '../../utils/git/github-urls.js';\nimport {getPr} from '../../utils/github.js';\n\n/* Graphql schema for the response body for a pending PR. */\nconst PR_SCHEMA = {\n  author: {\n    login: graphqlTypes.string,\n  },\n  state: graphqlTypes.string,\n  maintainerCanModify: graphqlTypes.boolean,\n  viewerDidAuthor: graphqlTypes.boolean,\n  headRefOid: graphqlTypes.string,\n  headRef: {\n    name: graphqlTypes.string,\n    repository: {\n      url: graphqlTypes.string,\n      nameWithOwner: graphqlTypes.string,\n    },\n  },\n  baseRefOid: graphqlTypes.string,\n  baseRef: {\n    name: graphqlTypes.string,\n    repository: {\n      url: graphqlTypes.string,\n      nameWithOwner: graphqlTypes.string,\n    },\n  },\n};\n\n/** Error being thrown if there are unexpected local changes in the project repo. */\nexport class UnexpectedLocalChangesError extends Error {}\n/** Error being thrown if a requested pull request could not be found upstream. */\nexport class PullRequestNotFoundError extends Error {}\n/** Error being thrown if the pull request does not allow for maintainer modifications. */\nexport class MaintainerModifyAccessError extends Error {}\n\n/** Options for checking out a PR */\nexport interface PullRequestCheckoutOptions {\n  /** Whether the PR should be checked out if the maintainer cannot modify. */\n  allowIfMaintainerCannotModify?: boolean;\n}\n\n/**\n * Rebase the provided PR onto its merge target branch, and push up the resulting\n * commit to the PRs repository.\n *\n * @throws {UnexpectedLocalChangesError} If the pull request cannot be checked out\n *   due to uncommitted local changes.\n * @throws {PullRequestNotFoundError} If the pull request cannot be checked out\n *   because it is unavailable on Github.\n * @throws {MaintainerModifyAccessError} If the pull request does not allow maintainers\n *   to modify a pull request. Skipped if `allowIfMaintainerCannotModify` is set.\n */\nexport async function checkOutPullRequestLocally(\n  prNumber: number,\n  opts: PullRequestCheckoutOptions = {},\n) {\n  /** The singleton instance of the authenticated git client. */\n  const git = await AuthenticatedGitClient.get();\n\n  // In order to preserve local changes, checkouts cannot occur if local changes are present in the\n  // git environment. Checked before retrieving the PR to fail fast.\n  if (git.hasUncommittedChanges()) {\n    throw new UnexpectedLocalChangesError('Unable to checkout PR due to uncommitted changes.');\n  }\n\n  /**\n   * The branch or revision originally checked out before this method performed\n   * any Git operations that may change the working branch.\n   */\n  const previousBranchOrRevision = git.getCurrentBranchOrRevision();\n  /** The PR information from Github. */\n  const pr = await getPr(PR_SCHEMA, prNumber, git);\n\n  if (pr === null) {\n    throw new PullRequestNotFoundError(`Pull request #${prNumber} could not be found.`);\n  }\n\n  /** The branch name of the PR from the repository the PR came from. */\n  const headRefName = pr.headRef.name;\n  /** The full URL path of the repository the PR came from with github token as authentication. */\n  const headRefUrl = addTokenToGitHttpsUrl(pr.headRef.repository.url, git.githubToken);\n  // Note: Since we use a detached head for rebasing the PR and therefore do not have\n  // remote-tracking branches configured, we need to set our expected ref and SHA. This\n  // allows us to use `--force-with-lease` for the detached head while ensuring that we\n  // never accidentally override upstream changes that have been pushed in the meanwhile.\n  // See:\n  // https://git-scm.com/docs/git-push#Documentation/git-push.txt---force-with-leaseltrefnamegtltexpectgt\n  /** Flag for a force push with lease back to upstream. */\n  const forceWithLeaseFlag = `--force-with-lease=${headRefName}:${pr.headRefOid}`;\n\n  // If the PR does not allow maintainers to modify it, exit as the rebased PR cannot\n  // be pushed up.\n  if (!pr.maintainerCanModify && !pr.viewerDidAuthor && !opts.allowIfMaintainerCannotModify) {\n    throw new MaintainerModifyAccessError('PR is not set to allow maintainers to modify the PR');\n  }\n\n  try {\n    // Fetch the branch at the commit of the PR, and check it out in a detached state.\n    git.run(['fetch', '-q', headRefUrl, headRefName]);\n    git.run(['checkout', '--detach', 'FETCH_HEAD']);\n  } catch (e) {\n    git.checkout(previousBranchOrRevision, true);\n    throw e;\n  }\n\n  return {\n    /**\n     * Pushes the current local branch to the PR on the upstream repository.\n     *\n     * @returns true If the command did not fail causing a GitCommandError to be thrown.\n     * @throws {GitCommandError} Thrown when the push back to upstream fails.\n     */\n    pushToUpstream: (): true => {\n      git.run(['push', headRefUrl, `HEAD:${headRefName}`, forceWithLeaseFlag]);\n      return true;\n    },\n    /** Restores the state of the local repository to before the PR checkout occured. */\n    resetGitState: (): boolean => {\n      return git.checkout(previousBranchOrRevision, true);\n    },\n    pushToUpstreamCommand: `git push ${pr.headRef.repository.url} HEAD:${headRefName} ${forceWithLeaseFlag}`,\n    resetGitStateCommand: `git rebase --abort && git reset --hard && git checkout ${previousBranchOrRevision}`,\n    pullRequest: pr,\n  };\n}\n"]}