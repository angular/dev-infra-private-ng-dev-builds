{"version":3,"file":"fetch-pull-request.js","sourceRoot":"","sources":["fetch-pull-request.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CheckConclusionState,\n  CheckStatusState,\n  MergeableState,\n  PullRequestState,\n  StatusState,\n  CommentAuthorAssociation,\n} from '@octokit/graphql-schema';\nimport {getPendingPrs, getPr, getPrFiles, getPrComments} from '../../utils/github.js';\nimport {alias, types as graphqlTypes, onUnion, optional, params} from 'typed-graphqlify';\n\nimport {AuthenticatedGitClient} from '../../utils/git/authenticated-git-client.js';\n\n/** A status for a pull request status or check. */\nexport enum PullRequestStatus {\n  PASSING,\n  FAILING,\n  PENDING,\n}\n\n/** Graphql schema for the response body the requested pull request. */\nexport const PR_SCHEMA = {\n  url: graphqlTypes.string,\n  isDraft: graphqlTypes.boolean,\n  state: graphqlTypes.custom<PullRequestState>(),\n  number: graphqlTypes.number,\n  mergeable: graphqlTypes.custom<MergeableState>(),\n  updatedAt: graphqlTypes.string,\n  // Along with the `commits` queried below, we always query the oldest commit in the PR and\n  // determine its parent SHA. This is the base SHA of a pull request. Note that this is different\n  // to the `baseRefOid` which is based on when the PR has been created and the attached base branch.\n  [alias('baseCommitInfo', 'commits')]: params(\n    {first: 1},\n    {nodes: [{commit: {parents: params({first: 1}, {nodes: [{oid: graphqlTypes.string}]})}}]},\n  ),\n  // Only the last 100 commits from a pull request are obtained as we likely will never see a pull\n  // requests with more than 100 commits.\n  commits: params(\n    {last: 100},\n    {\n      totalCount: graphqlTypes.number,\n      nodes: [\n        {\n          commit: {\n            oid: graphqlTypes.string,\n            authoredDate: graphqlTypes.string,\n            statusCheckRollup: optional({\n              state: graphqlTypes.custom<StatusState>(),\n              contexts: params(\n                {last: 100},\n                {\n                  nodes: [\n                    onUnion({\n                      CheckRun: {\n                        __typename: graphqlTypes.constant('CheckRun'),\n                        status: graphqlTypes.custom<CheckStatusState>(),\n                        conclusion: graphqlTypes.custom<CheckConclusionState | null>(),\n                        name: graphqlTypes.string,\n                      },\n                      StatusContext: {\n                        __typename: graphqlTypes.constant('StatusContext'),\n                        state: graphqlTypes.custom<StatusState>(),\n                        context: graphqlTypes.string,\n                      },\n                    }),\n                  ],\n                },\n              ),\n            }),\n            message: graphqlTypes.string,\n          },\n        },\n      ],\n    },\n  ),\n  reviewRequests: {\n    totalCount: graphqlTypes.number,\n  },\n  reviews: params(\n    {last: 100, states: 'APPROVED'},\n    {\n      nodes: [\n        {\n          author: {\n            login: graphqlTypes.string,\n          },\n          authorAssociation: graphqlTypes.custom<CommentAuthorAssociation>(),\n          bodyText: graphqlTypes.string,\n          commit: {\n            oid: graphqlTypes.string,\n          },\n        },\n      ],\n    },\n  ),\n  maintainerCanModify: graphqlTypes.boolean,\n  viewerDidAuthor: graphqlTypes.boolean,\n  headRefOid: graphqlTypes.string,\n  headRef: {\n    name: graphqlTypes.string,\n    repository: {\n      url: graphqlTypes.string,\n      nameWithOwner: graphqlTypes.string,\n    },\n  },\n  baseRef: {\n    name: graphqlTypes.string,\n    repository: {\n      url: graphqlTypes.string,\n      nameWithOwner: graphqlTypes.string,\n    },\n  },\n  baseRefName: graphqlTypes.string,\n  title: graphqlTypes.string,\n  labels: params(\n    {first: 100},\n    {\n      nodes: [\n        {\n          name: graphqlTypes.string,\n        },\n      ],\n    },\n  ),\n};\n\nexport type PullRequestFromGithub = typeof PR_SCHEMA;\n\nexport const PR_FILES_SCHEMA = params(\n  {first: 100},\n  {\n    path: graphqlTypes.string,\n  },\n);\n\nexport type PullRequestFilesFromGithub = typeof PR_FILES_SCHEMA;\n\nexport const PR_COMMENTS_SCHEMA = params(\n  {first: 100},\n  {\n    author: {\n      login: graphqlTypes.string,\n    },\n    authorAssociation: graphqlTypes.custom<CommentAuthorAssociation>(),\n    bodyText: graphqlTypes.string,\n  },\n);\n\nexport type PullRequestCommentsFromGithub = typeof PR_COMMENTS_SCHEMA;\n\n/** Type describing the normalized and combined status of a pull request. */\nexport type PullRequestStatusInfo = {\n  combinedStatus: PullRequestStatus;\n  statuses: {\n    status: PullRequestStatus;\n    type: 'check' | 'status';\n    name: string;\n  }[];\n};\n\n/** Fetches a pull request from Github. Returns null if an error occurred. */\nexport async function fetchPullRequestFromGithub(\n  git: AuthenticatedGitClient,\n  prNumber: number,\n): Promise<PullRequestFromGithub | null> {\n  return await getPr(PR_SCHEMA, prNumber, git);\n}\n\n/** Fetches a pull request from Github. Returns null if an error occurred. */\nexport async function fetchPendingPullRequestsFromGithub(\n  git: AuthenticatedGitClient,\n): Promise<PullRequestFromGithub[] | null> {\n  return await getPendingPrs(PR_SCHEMA, git);\n}\n\n/** Fetches a pull request from Github. Returns null if an error occurred. */\nexport async function fetchPullRequestFilesFromGithub(\n  git: AuthenticatedGitClient,\n  prNumber: number,\n): Promise<PullRequestFilesFromGithub[] | null> {\n  return await getPrFiles(PR_FILES_SCHEMA, prNumber, git);\n}\n\n/** Fetches a pull request from Github. Returns null if an error occurred. */\nexport async function fetchPullRequestCommentsFromGithub(\n  git: AuthenticatedGitClient,\n  prNumber: number,\n): Promise<PullRequestCommentsFromGithub[] | null> {\n  return await getPrComments(PR_COMMENTS_SCHEMA, prNumber, git);\n}\n\n/**\n * Gets the statuses for a commit from a pull request, using a consistent interface\n * for both status and checks results.\n */\nexport function getStatusesForPullRequest(\n  pullRequest: PullRequestFromGithub,\n): PullRequestStatusInfo {\n  const nodes = pullRequest.commits.nodes;\n  /** The combined github status and github checks object. */\n  const {statusCheckRollup} = nodes[nodes.length - 1].commit;\n\n  // If there is no status check rollup (i.e. no status nor checks), we\n  // consider the pull request status as failing.\n  if (!statusCheckRollup) {\n    return {\n      combinedStatus: PullRequestStatus.FAILING,\n      statuses: [],\n    };\n  }\n\n  const statuses = statusCheckRollup.contexts.nodes.map((context) => {\n    switch (context.__typename) {\n      case 'CheckRun':\n        return {\n          type: 'check' as const,\n          name: context.name,\n          status: normalizeGithubCheckState(context.conclusion, context.status),\n        };\n      case 'StatusContext':\n        return {\n          type: 'status' as const,\n          name: context.context,\n          status: normalizeGithubStatusState(context.state),\n        };\n    }\n  });\n\n  return {\n    combinedStatus: normalizeGithubStatusState(statusCheckRollup.state),\n    statuses,\n  };\n}\n\n/** Retrieve the normalized PullRequestStatus for the provided github status state. */\nfunction normalizeGithubStatusState(state: StatusState): PullRequestStatus {\n  switch (state) {\n    case 'FAILURE':\n    case 'ERROR':\n      return PullRequestStatus.FAILING;\n    case 'PENDING':\n      return PullRequestStatus.PENDING;\n    case 'SUCCESS':\n    case 'EXPECTED':\n      return PullRequestStatus.PASSING;\n  }\n}\n\n/** Retrieve the normalized PullRequestStatus for the provided github check state. */\nfunction normalizeGithubCheckState(\n  conclusion: CheckConclusionState | null,\n  status: CheckStatusState,\n): PullRequestStatus {\n  if (status !== 'COMPLETED') {\n    return PullRequestStatus.PENDING;\n  }\n\n  // If the `status` is completed, a conclusion is guaranteed to be set.\n  switch (conclusion!) {\n    case 'ACTION_REQUIRED':\n    case 'TIMED_OUT':\n    case 'CANCELLED':\n    case 'FAILURE':\n    case 'SKIPPED':\n    case 'STALE':\n    case 'STARTUP_FAILURE':\n      return PullRequestStatus.FAILING;\n    case 'SUCCESS':\n    case 'NEUTRAL':\n      return PullRequestStatus.PASSING;\n  }\n}\n"]}