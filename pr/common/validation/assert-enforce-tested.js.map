{"version":3,"file":"assert-enforce-tested.js","sourceRoot":"","sources":["assert-enforce-tested.ts"],"names":[],"mappings":"AAQA,OAAO,YAAY,MAAM,qCAAqC,CAAC;AAC/D,OAAO,EACL,kCAAkC,GAGnC,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAAC,2BAA2B,EAAE,qBAAqB,EAAC,MAAM,wBAAwB,CAAC;AAC1F,OAAO,EAAC,cAAc,EAAC,MAAM,oBAAoB,CAAC;AAKlD,MAAM,CAAC,MAAM,uBAAuB,GAAG,2BAA2B,CAChE,EAAC,IAAI,EAAE,qBAAqB,EAAE,iBAAiB,EAAE,IAAI,EAAC,EACtD,GAAG,EAAE,CAAC,UAAU,CACjB,CAAC;AAEF,MAAM,UAAW,SAAQ,qBAAqB;IAC5C,KAAK,CAAC,MAAM,CAAC,WAAkC,EAAE,SAAiC;QAChF,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,EAAE,CAAC;YACzC,OAAO;QACT,CAAC;QAED,MAAM,QAAQ,GAAG,MAAM,mBAAmB,CAAC,MAAM,CAC/C,SAAS,EACT,WAAW,CAAC,MAAM,CACnB,CAAC,uBAAuB,EAAE,CAAC;QAE5B,IAAI,MAAM,gCAAgC,CAAC,QAAQ,EAAE,SAAS,CAAC,EAAE,CAAC;YAChE,OAAO;QACT,CAAC;QAID,MAAM,IAAI,CAAC,YAAY,CACrB,mJAAmJ,CACpJ,CAAC;IACJ,CAAC;CACF;AAKD,SAAS,sBAAsB,CAAC,WAAkC;IAChE,OAAO,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAE,CAAC,IAAI,KAAK,cAAc,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC;AACjG,CAAC;AAED,MAAM,OAAO,mBAAmB;IAC9B,YACU,GAA2B,EAC3B,QAAgB;QADhB,QAAG,GAAH,GAAG,CAAwB;QAC3B,aAAQ,GAAR,QAAQ,CAAQ;IACvB,CAAC;IAIJ,KAAK,CAAC,uBAAuB;QAC3B,OAAO,CAAC,MAAM,kCAAkC,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,CAAC;IACnF,CAAC;IAED,MAAM,CAAC,MAAM,CAAC,GAA2B,EAAE,QAAgB;QACzD,OAAO,IAAI,mBAAmB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IAChD,CAAC;CACF;AAKD,MAAM,CAAC,KAAK,UAAU,gCAAgC,CACpD,QAAyC,EACzC,SAAiC;IAEjC,KAAK,MAAM,EAAC,QAAQ,EAAE,MAAM,EAAC,IAAI,QAAQ,EAAE,CAAC;QAC1C,IACE,QAAQ,CAAC,UAAU,CAAC,SAAS,CAAC;YAC9B,CAAC,MAAM,YAAY,CAAC,kBAAkB,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,EACvE,CAAC;YACD,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport githubMacros from '../../../utils/git/github-macros.js';\nimport {\n  fetchPullRequestCommentsFromGithub,\n  PullRequestFromGithub,\n  PullRequestCommentsFromGithub,\n} from '../fetch-pull-request.js';\nimport {createPullRequestValidation, PullRequestValidation} from './validation-config.js';\nimport {requiresLabels} from '../labels/index.js';\nimport {AuthenticatedGitClient} from '../../../utils/git/authenticated-git-client.js';\n\n/** Assert the pull request has passing enforced statuses. */\n// TODO: update typings to make sure portability is properly handled for windows build.\nexport const enforceTestedValidation = createPullRequestValidation(\n  {name: 'assertEnforceTested', canBeForceIgnored: true},\n  () => Validation,\n);\n\nclass Validation extends PullRequestValidation {\n  async assert(pullRequest: PullRequestFromGithub, gitClient: AuthenticatedGitClient) {\n    if (!pullRequestRequiresTGP(pullRequest)) {\n      return;\n    }\n\n    const comments = await PullRequestComments.create(\n      gitClient,\n      pullRequest.number,\n    ).loadPullRequestComments();\n\n    if (await pullRequestHasValidTestedComment(comments, gitClient)) {\n      return;\n    }\n\n    // TODO(jessicajaniuk): Add the actual validation that a TGP has been run.\n\n    throw this._createError(\n      `Pull Request requires a TGP and does not have one. Either run a TGP or specify the PR is fully tested by adding a comment with \"TESTED=[reason]\".`,\n    );\n  }\n}\n\n/**\n * Checks the list of labels for the `requires: TGP` label\n */\nfunction pullRequestRequiresTGP(pullRequest: PullRequestFromGithub): boolean {\n  return pullRequest.labels.nodes.some(({name}) => name === requiresLabels['REQUIRES_TGP'].name);\n}\n\nexport class PullRequestComments {\n  constructor(\n    private git: AuthenticatedGitClient,\n    private prNumber: number,\n  ) {}\n  /**\n   * Loads the files from a given pull request.\n   */\n  async loadPullRequestComments(): Promise<PullRequestCommentsFromGithub[]> {\n    return (await fetchPullRequestCommentsFromGithub(this.git, this.prNumber)) ?? [];\n  }\n\n  static create(git: AuthenticatedGitClient, prNumber: number) {\n    return new PullRequestComments(git, prNumber);\n  }\n}\n\n/**\n * Checks for `TESTED=[reason]` comment on a current commit sha from a google organization member\n */\nexport async function pullRequestHasValidTestedComment(\n  comments: PullRequestCommentsFromGithub[],\n  gitClient: AuthenticatedGitClient,\n): Promise<boolean> {\n  for (const {bodyText, author} of comments) {\n    if (\n      bodyText.startsWith(`TESTED=`) &&\n      (await githubMacros.isGooglerOrgMember(gitClient.github, author.login))\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n"]}