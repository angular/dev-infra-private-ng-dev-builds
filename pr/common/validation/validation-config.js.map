{"version":3,"file":"validation-config.js","sourceRoot":"","sources":["validation-config.ts"],"names":[],"mappings":"AASA,OAAO,EAAC,4BAA4B,EAAC,MAAM,yBAAyB,CAAC;AAMrE,MAAM,aAAa,GAAgC;IACjD,aAAa,EAAE,IAAI;IACnB,gBAAgB,EAAE,IAAI;IACtB,eAAe,EAAE,IAAI;IACrB,gCAAgC,EAAE,IAAI;IACtC,eAAe,EAAE,IAAI;IACrB,sBAAsB,EAAE,IAAI;IAC5B,sBAAsB,EAAE,IAAI;IAC5B,oBAAoB,EAAE,IAAI;IAC1B,2BAA2B,EAAE,KAAK;IAClC,mBAAmB,EAAE,KAAK;CAC3B,CAAC;AAEF,MAAM,UAAU,iCAAiC,CAC/C,MAAmC;IAEnC,OAAO,EAAC,GAAG,aAAa,EAAE,GAAG,MAAM,EAAC,CAAC;AACvC,CAAC;AASD,MAAM,OAAgB,qBAAqB;IACzC,YACY,IAAuC,EACvC,YAAgD;QADhD,SAAI,GAAJ,IAAI,CAAmC;QACvC,iBAAY,GAAZ,YAAY,CAAoC;IACzD,CAAC;CAIL;AAGD,MAAM,UAAU,2BAA2B,CACzC,EAAC,IAAI,EAAE,iBAAiB,EAAwE,EAChG,iBAAgG;IAEhG,OAAO;QACL,KAAK,CAAC,GAAG,CACP,gBAA6C,EAC7C,GAAG,IAA6B;YAEhC,IAAI,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC3B,MAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAC1C,IAAI,EACJ,CAAC,OAAO,EAAE,EAAE,CAAC,IAAI,4BAA4B,CAAC,OAAO,EAAE,IAAI,EAAE,iBAAiB,CAAC,CAChF,CAAC;gBACF,IAAI,CAAC;oBACH,MAAM,UAAU,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC;gBACnC,CAAC;gBAAC,OAAO,CAAC,EAAE,CAAC;oBACX,IAAI,CAAC,YAAY,4BAA4B,EAAE,CAAC;wBAC9C,OAAO,CAAC,CAAC;oBACX,CAAC;oBACD,MAAM,CAAC,CAAC;gBACV,CAAC;YACH,CAAC;YACD,OAAO,IAAI,CAAC;QACd,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PullRequestValidationConfig} from '../../config/index.js';\nimport {PullRequestValidationFailure} from './validation-failure.js';\n\n/**\n * Pull request validation configuration controlling which assertions\n * should run or not. This enables the forcibly non-fatal ignore feature.\n */\nconst defaultConfig: PullRequestValidationConfig = {\n  assertPending: true,\n  assertMergeReady: true,\n  assertSignedCla: true,\n  assertChangesAllowForTargetLabel: true,\n  assertPassingCi: true,\n  assertCompletedReviews: true,\n  assertEnforcedStatuses: true,\n  assertMinimumReviews: true,\n  assertIsolatedSeparateFiles: false,\n  assertEnforceTested: false,\n};\n\nexport function createPullRequestValidationConfig(\n  config: PullRequestValidationConfig,\n): PullRequestValidationConfig {\n  return {...defaultConfig, ...config};\n}\n\n/** Type describing a helper function for validations to create a validation failure. */\nexport type PullRequestValidationErrorCreateFn = (message: string) => PullRequestValidationFailure;\n\n/**\n * Base class for pull request validations, providing helpers for the validation errors,\n * and a consistent interface for checking the activation state of validations\n */\nexport abstract class PullRequestValidation {\n  constructor(\n    protected name: keyof PullRequestValidationConfig,\n    protected _createError: PullRequestValidationErrorCreateFn,\n  ) {}\n\n  /** Assertion function to be defined for the specific validator. */\n  abstract assert(...parameters: unknown[]): void | Promise<void>;\n}\n\n/** Creates a pull request validation from a configuration and implementation class. */\nexport function createPullRequestValidation<T extends PullRequestValidation>(\n  {name, canBeForceIgnored}: {name: keyof PullRequestValidationConfig; canBeForceIgnored: boolean},\n  getValidationCtor: () => new (...args: ConstructorParameters<typeof PullRequestValidation>) => T,\n) {\n  return {\n    async run(\n      validationConfig: PullRequestValidationConfig,\n      ...args: Parameters<T['assert']>\n    ): Promise<PullRequestValidationFailure | null> {\n      if (validationConfig[name]) {\n        const validation = new (getValidationCtor())(\n          name,\n          (message) => new PullRequestValidationFailure(message, name, canBeForceIgnored),\n        );\n        try {\n          await validation.assert(...args);\n        } catch (e) {\n          if (e instanceof PullRequestValidationFailure) {\n            return e;\n          }\n          throw e;\n        }\n      }\n      return null;\n    },\n  };\n}\n"]}