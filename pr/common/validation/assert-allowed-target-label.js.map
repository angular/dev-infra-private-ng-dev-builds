{"version":3,"file":"assert-allowed-target-label.js","sourceRoot":"","sources":["assert-allowed-target-label.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PullRequestFromGithub} from '../fetch-pull-request.js';\nimport {Commit} from '../../../commit-message/parse.js';\nimport {ActiveReleaseTrains} from '../../../release/versioning/active-release-trains.js';\nimport {Log, red} from '../../../utils/logging.js';\nimport {PullRequestConfig} from '../../config/index.js';\nimport {mergeLabels} from '../labels/index.js';\nimport {TargetLabel, targetLabels} from '../labels/target.js';\nimport {createPullRequestValidation, PullRequestValidation} from './validation-config.js';\n\n/** List of automation robot accounts. */\nconst automationBots = ['angular-robot'];\n\n/** Assert the commits provided are allowed to merge to the provided target label. */\n// TODO: update typings to make sure portability is properly handled for windows build.\nexport const changesAllowForTargetLabelValidation = createPullRequestValidation(\n  {name: 'assertChangesAllowForTargetLabel', canBeForceIgnored: true},\n  () => Validation,\n);\n\nclass Validation extends PullRequestValidation {\n  assert(\n    commits: Commit[],\n    targetLabel: TargetLabel,\n    config: PullRequestConfig,\n    releaseTrains: ActiveReleaseTrains,\n    labelsOnPullRequest: string[],\n    pullRequest: PullRequestFromGithub,\n  ) {\n    if (labelsOnPullRequest.includes(mergeLabels['MERGE_FIX_COMMIT_MESSAGE'].name)) {\n      Log.debug(\n        'Skipping commit message target label validation because the commit message fixup label is ' +\n          'applied.',\n      );\n      return;\n    }\n\n    // List of commit scopes which are exempted from target label content requirements. i.e. no `feat`\n    // scopes in patch branches, no breaking changes in minor or patch changes.\n    const exemptedScopes = config.targetLabelExemptScopes || [];\n    // List of commits which are subject to content requirements for the target label.\n    commits = commits.filter((commit) => !exemptedScopes.includes(commit.scope));\n    const hasBreakingChanges = commits.some((commit) => commit.breakingChanges.length !== 0);\n    const hasDeprecations = commits.some((commit) => commit.deprecations.length !== 0);\n    const hasFeatureCommits = commits.some((commit) => commit.type === 'feat');\n    switch (targetLabel) {\n      case targetLabels['TARGET_MAJOR']:\n        break;\n      case targetLabels['TARGET_MINOR']:\n        if (hasBreakingChanges) {\n          throw this._createHasBreakingChangesError(targetLabel);\n        }\n        break;\n      case targetLabels['TARGET_RC']:\n      case targetLabels['TARGET_LTS']:\n      case targetLabels['TARGET_PATCH']:\n        if (hasBreakingChanges) {\n          throw this._createHasBreakingChangesError(targetLabel);\n        }\n        if (hasFeatureCommits) {\n          throw this._createHasFeatureCommitsError(targetLabel);\n        }\n        // Deprecations should not be merged into RC, patch or LTS branches.\n        // https://semver.org/#spec-item-7. Deprecations should be part of\n        // minor releases, or major releases according to SemVer.\n        if (hasDeprecations && !releaseTrains.isFeatureFreeze()) {\n          throw this._createHasDeprecationsError(targetLabel);\n        }\n      case targetLabels['TARGET_AUTOMATION']:\n        if (!automationBots.includes(pullRequest.author.login)) {\n          throw this._createUserUsingAutomationLabelError(targetLabel, pullRequest.author.login);\n        }\n        break;\n      default:\n        Log.warn(red('WARNING: Unable to confirm all commits in the pull request are'));\n        Log.warn(red(`eligible to be merged into the target branches for: ${targetLabel.name}`));\n        break;\n    }\n  }\n\n  private _createHasBreakingChangesError(label: TargetLabel) {\n    const message =\n      `Cannot merge into branch for \"${label.name}\" as the pull request has ` +\n      `breaking changes. Breaking changes can only be merged with the \"target: major\" label.`;\n    return this._createError(message);\n  }\n\n  private _createHasDeprecationsError(label: TargetLabel) {\n    const message =\n      `Cannot merge into branch for \"${label.name}\" as the pull request ` +\n      `contains deprecations. Deprecations can only be merged with the \"target: minor\" or ` +\n      `\"target: major\" label.`;\n    return this._createError(message);\n  }\n\n  private _createHasFeatureCommitsError(label: TargetLabel) {\n    const message =\n      `Cannot merge into branch for \"${label.name}\" as the pull request has ` +\n      'commits with the \"feat\" type. New features can only be merged with the \"target: minor\" ' +\n      'or \"target: major\" label.';\n    return this._createError(message);\n  }\n\n  private _createUserUsingAutomationLabelError(label: TargetLabel, author: string) {\n    const message =\n      `Cannot merge into branch for \"${label.name}\" as the pull request is authored by \"${author}\" ` +\n      `but only known automation bot accounts (${automationBots.join(', ')}) can use this label.`;\n    return this._createError(message);\n  }\n}\n"]}