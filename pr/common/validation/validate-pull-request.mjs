/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { parseCommitMessage } from '../../../commit-message/parse.js';
import { changesAllowForTargetLabelValidation } from './assert-allowed-target-label.js';
import { breakingChangeInfoValidation } from './assert-breaking-change-info.js';
import { completedReviewsValidation } from './assert-completed-reviews.js';
import { isolatedSeparateFilesValidation } from './assert-isolated-separate-files.js';
import { enforcedStatusesValidation } from './assert-enforced-statuses.js';
import { enforceTestedValidation } from './assert-enforce-tested.js';
import { mergeReadyValidation } from './assert-merge-ready.js';
import { minimumReviewsValidation } from './assert-minimum-reviews.js';
import { passingCiValidation } from './assert-passing-ci.js';
import { pendingStateValidation } from './assert-pending.js';
import { signedClaValidation } from './assert-signed-cla.js';
/**
 * Runs all valiations that the given pull request is valid, returning a list of all failing
 * validations.
 *
 * Active release trains may be available for additional checks or not.
 */
export async function assertValidPullRequest(pullRequest, validationConfig, ngDevConfig, activeReleaseTrains, target, gitClient) {
    const labels = pullRequest.labels.nodes.map((l) => l.name);
    const commitsInPr = pullRequest.commits.nodes.map((n) => {
        return parseCommitMessage(n.commit.message);
    });
    const validationResults = [
        minimumReviewsValidation.run(validationConfig, pullRequest),
        completedReviewsValidation.run(validationConfig, pullRequest),
        mergeReadyValidation.run(validationConfig, pullRequest),
        signedClaValidation.run(validationConfig, pullRequest),
        pendingStateValidation.run(validationConfig, pullRequest),
        breakingChangeInfoValidation.run(validationConfig, commitsInPr, labels),
        passingCiValidation.run(validationConfig, pullRequest),
        enforcedStatusesValidation.run(validationConfig, pullRequest, ngDevConfig.pullRequest),
        isolatedSeparateFilesValidation.run(validationConfig, ngDevConfig, pullRequest.number, gitClient),
        enforceTestedValidation.run(validationConfig, pullRequest, gitClient),
    ];
    if (activeReleaseTrains !== null) {
        validationResults.push(changesAllowForTargetLabelValidation.run(validationConfig, commitsInPr, target.label, ngDevConfig.pullRequest, activeReleaseTrains, labels));
    }
    return await Promise.all(validationResults).then((results) => {
        return results.filter((((result) => result !== null)));
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGUtcHVsbC1yZXF1ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbmctZGV2L3ByL2NvbW1vbi92YWxpZGF0aW9uL3ZhbGlkYXRlLXB1bGwtcmVxdWVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxrQ0FBa0MsQ0FBQztBQU1wRSxPQUFPLEVBQUMsb0NBQW9DLEVBQUMsTUFBTSxrQ0FBa0MsQ0FBQztBQUN0RixPQUFPLEVBQUMsNEJBQTRCLEVBQUMsTUFBTSxrQ0FBa0MsQ0FBQztBQUM5RSxPQUFPLEVBQUMsMEJBQTBCLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUN6RSxPQUFPLEVBQUMsK0JBQStCLEVBQUMsTUFBTSxxQ0FBcUMsQ0FBQztBQUNwRixPQUFPLEVBQUMsMEJBQTBCLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUN6RSxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQztBQUNuRSxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUM3RCxPQUFPLEVBQUMsd0JBQXdCLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQztBQUNyRSxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUMzRCxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUMzRCxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUkzRDs7Ozs7R0FLRztBQUNILE1BQU0sQ0FBQyxLQUFLLFVBQVUsc0JBQXNCLENBQzFDLFdBQWtDLEVBQ2xDLGdCQUE2QyxFQUM3QyxXQUdFLEVBQ0YsbUJBQStDLEVBQy9DLE1BQXlCLEVBQ3pCLFNBQWlDO0lBRWpDLE1BQU0sTUFBTSxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNELE1BQU0sV0FBVyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1FBQ3RELE9BQU8sa0JBQWtCLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM5QyxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0saUJBQWlCLEdBQUc7UUFDeEIsd0JBQXdCLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLFdBQVcsQ0FBQztRQUMzRCwwQkFBMEIsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsV0FBVyxDQUFDO1FBQzdELG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxXQUFXLENBQUM7UUFDdkQsbUJBQW1CLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLFdBQVcsQ0FBQztRQUN0RCxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsV0FBVyxDQUFDO1FBQ3pELDRCQUE0QixDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsTUFBTSxDQUFDO1FBQ3ZFLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxXQUFXLENBQUM7UUFDdEQsMEJBQTBCLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxXQUFXLENBQUMsV0FBVyxDQUFDO1FBQ3RGLCtCQUErQixDQUFDLEdBQUcsQ0FDakMsZ0JBQWdCLEVBQ2hCLFdBQVcsRUFDWCxXQUFXLENBQUMsTUFBTSxFQUNsQixTQUFTLENBQ1Y7UUFDRCx1QkFBdUIsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLFNBQVMsQ0FBQztLQUN0RSxDQUFDO0lBRUYsSUFBSSxtQkFBbUIsS0FBSyxJQUFJLEVBQUUsQ0FBQztRQUNqQyxpQkFBaUIsQ0FBQyxJQUFJLENBQ3BCLG9DQUFvQyxDQUFDLEdBQUcsQ0FDdEMsZ0JBQWdCLEVBQ2hCLFdBQVcsRUFDWCxNQUFNLENBQUMsS0FBSyxFQUNaLFdBQVcsQ0FBQyxXQUFXLEVBQ3ZCLG1CQUFtQixFQUNuQixNQUFNLENBQ1AsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVELE9BQU8sTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7UUFDM0QsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUNzRSxDQUN2RixDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLENBQzlCLENBQ0YsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge3BhcnNlQ29tbWl0TWVzc2FnZX0gZnJvbSAnLi4vLi4vLi4vY29tbWl0LW1lc3NhZ2UvcGFyc2UuanMnO1xuaW1wb3J0IHtBY3RpdmVSZWxlYXNlVHJhaW5zfSBmcm9tICcuLi8uLi8uLi9yZWxlYXNlL3ZlcnNpb25pbmcvYWN0aXZlLXJlbGVhc2UtdHJhaW5zLmpzJztcbmltcG9ydCB7TmdEZXZDb25maWcsIEdpdGh1YkNvbmZpZ30gZnJvbSAnLi4vLi4vLi4vdXRpbHMvY29uZmlnLmpzJztcbmltcG9ydCB7UHVsbFJlcXVlc3RDb25maWcsIFB1bGxSZXF1ZXN0VmFsaWRhdGlvbkNvbmZpZ30gZnJvbSAnLi4vLi4vY29uZmlnL2luZGV4LmpzJztcbmltcG9ydCB7UHVsbFJlcXVlc3RGcm9tR2l0aHVifSBmcm9tICcuLi9mZXRjaC1wdWxsLXJlcXVlc3QuanMnO1xuaW1wb3J0IHtQdWxsUmVxdWVzdFRhcmdldH0gZnJvbSAnLi4vdGFyZ2V0aW5nL3RhcmdldC1sYWJlbC5qcyc7XG5pbXBvcnQge2NoYW5nZXNBbGxvd0ZvclRhcmdldExhYmVsVmFsaWRhdGlvbn0gZnJvbSAnLi9hc3NlcnQtYWxsb3dlZC10YXJnZXQtbGFiZWwuanMnO1xuaW1wb3J0IHticmVha2luZ0NoYW5nZUluZm9WYWxpZGF0aW9ufSBmcm9tICcuL2Fzc2VydC1icmVha2luZy1jaGFuZ2UtaW5mby5qcyc7XG5pbXBvcnQge2NvbXBsZXRlZFJldmlld3NWYWxpZGF0aW9ufSBmcm9tICcuL2Fzc2VydC1jb21wbGV0ZWQtcmV2aWV3cy5qcyc7XG5pbXBvcnQge2lzb2xhdGVkU2VwYXJhdGVGaWxlc1ZhbGlkYXRpb259IGZyb20gJy4vYXNzZXJ0LWlzb2xhdGVkLXNlcGFyYXRlLWZpbGVzLmpzJztcbmltcG9ydCB7ZW5mb3JjZWRTdGF0dXNlc1ZhbGlkYXRpb259IGZyb20gJy4vYXNzZXJ0LWVuZm9yY2VkLXN0YXR1c2VzLmpzJztcbmltcG9ydCB7ZW5mb3JjZVRlc3RlZFZhbGlkYXRpb259IGZyb20gJy4vYXNzZXJ0LWVuZm9yY2UtdGVzdGVkLmpzJztcbmltcG9ydCB7bWVyZ2VSZWFkeVZhbGlkYXRpb259IGZyb20gJy4vYXNzZXJ0LW1lcmdlLXJlYWR5LmpzJztcbmltcG9ydCB7bWluaW11bVJldmlld3NWYWxpZGF0aW9ufSBmcm9tICcuL2Fzc2VydC1taW5pbXVtLXJldmlld3MuanMnO1xuaW1wb3J0IHtwYXNzaW5nQ2lWYWxpZGF0aW9ufSBmcm9tICcuL2Fzc2VydC1wYXNzaW5nLWNpLmpzJztcbmltcG9ydCB7cGVuZGluZ1N0YXRlVmFsaWRhdGlvbn0gZnJvbSAnLi9hc3NlcnQtcGVuZGluZy5qcyc7XG5pbXBvcnQge3NpZ25lZENsYVZhbGlkYXRpb259IGZyb20gJy4vYXNzZXJ0LXNpZ25lZC1jbGEuanMnO1xuaW1wb3J0IHtQdWxsUmVxdWVzdFZhbGlkYXRpb25GYWlsdXJlfSBmcm9tICcuL3ZhbGlkYXRpb24tZmFpbHVyZS5qcyc7XG5pbXBvcnQge0F1dGhlbnRpY2F0ZWRHaXRDbGllbnR9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2dpdC9hdXRoZW50aWNhdGVkLWdpdC1jbGllbnQuanMnO1xuXG4vKipcbiAqIFJ1bnMgYWxsIHZhbGlhdGlvbnMgdGhhdCB0aGUgZ2l2ZW4gcHVsbCByZXF1ZXN0IGlzIHZhbGlkLCByZXR1cm5pbmcgYSBsaXN0IG9mIGFsbCBmYWlsaW5nXG4gKiB2YWxpZGF0aW9ucy5cbiAqXG4gKiBBY3RpdmUgcmVsZWFzZSB0cmFpbnMgbWF5IGJlIGF2YWlsYWJsZSBmb3IgYWRkaXRpb25hbCBjaGVja3Mgb3Igbm90LlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYXNzZXJ0VmFsaWRQdWxsUmVxdWVzdChcbiAgcHVsbFJlcXVlc3Q6IFB1bGxSZXF1ZXN0RnJvbUdpdGh1YixcbiAgdmFsaWRhdGlvbkNvbmZpZzogUHVsbFJlcXVlc3RWYWxpZGF0aW9uQ29uZmlnLFxuICBuZ0RldkNvbmZpZzogTmdEZXZDb25maWc8e1xuICAgIHB1bGxSZXF1ZXN0OiBQdWxsUmVxdWVzdENvbmZpZztcbiAgICBnaXRodWI6IEdpdGh1YkNvbmZpZztcbiAgfT4sXG4gIGFjdGl2ZVJlbGVhc2VUcmFpbnM6IEFjdGl2ZVJlbGVhc2VUcmFpbnMgfCBudWxsLFxuICB0YXJnZXQ6IFB1bGxSZXF1ZXN0VGFyZ2V0LFxuICBnaXRDbGllbnQ6IEF1dGhlbnRpY2F0ZWRHaXRDbGllbnQsXG4pOiBQcm9taXNlPFB1bGxSZXF1ZXN0VmFsaWRhdGlvbkZhaWx1cmVbXT4ge1xuICBjb25zdCBsYWJlbHMgPSBwdWxsUmVxdWVzdC5sYWJlbHMubm9kZXMubWFwKChsKSA9PiBsLm5hbWUpO1xuICBjb25zdCBjb21taXRzSW5QciA9IHB1bGxSZXF1ZXN0LmNvbW1pdHMubm9kZXMubWFwKChuKSA9PiB7XG4gICAgcmV0dXJuIHBhcnNlQ29tbWl0TWVzc2FnZShuLmNvbW1pdC5tZXNzYWdlKTtcbiAgfSk7XG5cbiAgY29uc3QgdmFsaWRhdGlvblJlc3VsdHMgPSBbXG4gICAgbWluaW11bVJldmlld3NWYWxpZGF0aW9uLnJ1bih2YWxpZGF0aW9uQ29uZmlnLCBwdWxsUmVxdWVzdCksXG4gICAgY29tcGxldGVkUmV2aWV3c1ZhbGlkYXRpb24ucnVuKHZhbGlkYXRpb25Db25maWcsIHB1bGxSZXF1ZXN0KSxcbiAgICBtZXJnZVJlYWR5VmFsaWRhdGlvbi5ydW4odmFsaWRhdGlvbkNvbmZpZywgcHVsbFJlcXVlc3QpLFxuICAgIHNpZ25lZENsYVZhbGlkYXRpb24ucnVuKHZhbGlkYXRpb25Db25maWcsIHB1bGxSZXF1ZXN0KSxcbiAgICBwZW5kaW5nU3RhdGVWYWxpZGF0aW9uLnJ1bih2YWxpZGF0aW9uQ29uZmlnLCBwdWxsUmVxdWVzdCksXG4gICAgYnJlYWtpbmdDaGFuZ2VJbmZvVmFsaWRhdGlvbi5ydW4odmFsaWRhdGlvbkNvbmZpZywgY29tbWl0c0luUHIsIGxhYmVscyksXG4gICAgcGFzc2luZ0NpVmFsaWRhdGlvbi5ydW4odmFsaWRhdGlvbkNvbmZpZywgcHVsbFJlcXVlc3QpLFxuICAgIGVuZm9yY2VkU3RhdHVzZXNWYWxpZGF0aW9uLnJ1bih2YWxpZGF0aW9uQ29uZmlnLCBwdWxsUmVxdWVzdCwgbmdEZXZDb25maWcucHVsbFJlcXVlc3QpLFxuICAgIGlzb2xhdGVkU2VwYXJhdGVGaWxlc1ZhbGlkYXRpb24ucnVuKFxuICAgICAgdmFsaWRhdGlvbkNvbmZpZyxcbiAgICAgIG5nRGV2Q29uZmlnLFxuICAgICAgcHVsbFJlcXVlc3QubnVtYmVyLFxuICAgICAgZ2l0Q2xpZW50LFxuICAgICksXG4gICAgZW5mb3JjZVRlc3RlZFZhbGlkYXRpb24ucnVuKHZhbGlkYXRpb25Db25maWcsIHB1bGxSZXF1ZXN0LCBnaXRDbGllbnQpLFxuICBdO1xuXG4gIGlmIChhY3RpdmVSZWxlYXNlVHJhaW5zICE9PSBudWxsKSB7XG4gICAgdmFsaWRhdGlvblJlc3VsdHMucHVzaChcbiAgICAgIGNoYW5nZXNBbGxvd0ZvclRhcmdldExhYmVsVmFsaWRhdGlvbi5ydW4oXG4gICAgICAgIHZhbGlkYXRpb25Db25maWcsXG4gICAgICAgIGNvbW1pdHNJblByLFxuICAgICAgICB0YXJnZXQubGFiZWwsXG4gICAgICAgIG5nRGV2Q29uZmlnLnB1bGxSZXF1ZXN0LFxuICAgICAgICBhY3RpdmVSZWxlYXNlVHJhaW5zLFxuICAgICAgICBsYWJlbHMsXG4gICAgICApLFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gYXdhaXQgUHJvbWlzZS5hbGwodmFsaWRhdGlvblJlc3VsdHMpLnRoZW4oKHJlc3VsdHMpID0+IHtcbiAgICByZXR1cm4gcmVzdWx0cy5maWx0ZXIoXG4gICAgICA8KHJlc3VsdDogbnVsbCB8IFB1bGxSZXF1ZXN0VmFsaWRhdGlvbkZhaWx1cmUpID0+IHJlc3VsdCBpcyBQdWxsUmVxdWVzdFZhbGlkYXRpb25GYWlsdXJlPihcbiAgICAgICAgKChyZXN1bHQpID0+IHJlc3VsdCAhPT0gbnVsbClcbiAgICAgICksXG4gICAgKTtcbiAgfSk7XG59XG4iXX0=