{"version":3,"file":"assert-passing-ci.js","sourceRoot":"","sources":["assert-passing-ci.ts"],"names":[],"mappings":"AAQA,OAAO,EACL,yBAAyB,EAEzB,iBAAiB,GAClB,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAAC,2BAA2B,EAAE,qBAAqB,EAAC,MAAM,wBAAwB,CAAC;AAI1F,MAAM,CAAC,MAAM,mBAAmB,GAAG,2BAA2B,CAC5D,EAAC,IAAI,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,IAAI,EAAC,EAClD,GAAG,EAAE,CAAC,UAAU,CACjB,CAAC;AAEF,MAAM,UAAW,SAAQ,qBAAqB;IAC5C,MAAM,CAAC,WAAkC;QACvC,MAAM,EAAC,cAAc,EAAE,QAAQ,EAAC,GAAG,yBAAyB,CAAC,WAAW,CAAC,CAAC;QAM1E,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC,KAAK,SAAS,EAAE,CAAC;YACpE,MAAM,IAAI,CAAC,YAAY,CACrB,8FAA8F,CAC/F,CAAC;QACJ,CAAC;QACD,IAAI,cAAc,KAAK,iBAAiB,CAAC,OAAO,EAAE,CAAC;YACjD,MAAM,IAAI,CAAC,YAAY,CAAC,yCAAyC,CAAC,CAAC;QACrE,CAAC;QACD,IAAI,cAAc,KAAK,iBAAiB,CAAC,OAAO,EAAE,CAAC;YACjD,MAAM,IAAI,CAAC,YAAY,CAAC,yCAAyC,CAAC,CAAC;QACrE,CAAC;IACH,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  getStatusesForPullRequest,\n  PullRequestFromGithub,\n  PullRequestStatus,\n} from '../fetch-pull-request.js';\nimport {createPullRequestValidation, PullRequestValidation} from './validation-config.js';\n\n/** Assert the pull request has a passing combined CI status. */\n// TODO: update typings to make sure portability is properly handled for windows build.\nexport const passingCiValidation = createPullRequestValidation(\n  {name: 'assertPassingCi', canBeForceIgnored: true},\n  () => Validation,\n);\n\nclass Validation extends PullRequestValidation {\n  assert(pullRequest: PullRequestFromGithub) {\n    const {combinedStatus, statuses} = getStatusesForPullRequest(pullRequest);\n\n    // TODO(josephperrott): Find a way to not need to do this kind of detection.\n    // Because its not possible to determine if workflow is pending approval or if all checks and\n    // statuses have run, we use the `CI / lint (pull_request)` as a marker for if the expected\n    // checks have run already.  If they have not yet run, we mark the combined status as missing.\n    if (statuses.find((status) => status.name === 'lint') === undefined) {\n      throw this._createError(\n        'Pull request is missing expected status checks. Check the pull request for pending workflows',\n      );\n    }\n    if (combinedStatus === PullRequestStatus.PENDING) {\n      throw this._createError('Pull request has pending status checks.');\n    }\n    if (combinedStatus === PullRequestStatus.FAILING) {\n      throw this._createError('Pull request has failing status checks.');\n    }\n  }\n}\n"]}