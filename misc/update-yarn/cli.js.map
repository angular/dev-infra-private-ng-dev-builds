{"version":3,"file":"cli.js","sourceRoot":"","sources":["cli.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {readdirSync, unlinkSync} from 'fs';\nimport {join} from 'path';\nimport {Argv, CommandModule} from 'yargs';\nimport {ChildProcess} from '../../utils/child-process.js';\n\nimport {Log} from '../../utils/logging.js';\nimport {Spinner} from '../../utils/spinner.js';\nimport {AuthenticatedGitClient} from '../../utils/git/authenticated-git-client.js';\nimport {addGithubTokenOption} from '../../utils/git/github-yargs.js';\nimport {getYarnPathFromNpmGlobalBinaries} from '../../utils/resolve-yarn-bin.js';\nimport {getRepositoryGitUrl} from '../../utils/git/github-urls.js';\n\nasync function builder(argv: Argv) {\n  return addGithubTokenOption(argv);\n}\n\n/** Environment object enabling the usage of yarn-path to determine the new version. */\nconst useYarnPathEnv = {\n  ...process.env,\n  YARN_IGNORE_PATH: '0',\n};\n\n/** Environment object to prevent running husky workflow. */\nconst skipHuskyEnv = {\n  ...process.env,\n  HUSKY: '0',\n};\n\nasync function handler() {\n  /**\n   * Process command that refers to the global Yarn installation.\n   *\n   * Note that we intend to use the global Yarn command here as this allows us to let Yarn\n   * respect the `.yarnrc` file, allowing us to check if the update has completed properly.\n   * Just using `yarn` does not necessarily resolve to the global Yarn version as Yarn-initiated\n   * sub-processes will have a modified `process.env.PATH` that directly points to the Yarn\n   * version that spawned the sub-process.\n   */\n  const yarnGlobalBin = (await getYarnPathFromNpmGlobalBinaries()) ?? 'yarn';\n  /** Instance of the local git client. */\n  const git = await AuthenticatedGitClient.get();\n  /** The main branch name of the repository. */\n  const mainBranchName = git.mainBranchName;\n  /** The original branch or ref before the command was invoked. */\n  const originalBranchOrRef = git.getCurrentBranchOrRevision();\n\n  if (git.hasUncommittedChanges()) {\n    Log.error('Found changes in the local repository. Make sure there are no uncommitted files.');\n    process.exitCode = 1;\n    return;\n  }\n\n  /** A spinner instance. */\n  const spinner = new Spinner('');\n  try {\n    spinner.update(`Fetching the latest primary branch from upstream: \"${mainBranchName}\"`);\n    git.run(['fetch', '-q', git.getRepoGitUrl(), mainBranchName]);\n    git.checkout('FETCH_HEAD', false);\n\n    spinner.update('Removing previous yarn version.');\n    const yarnReleasesDir = join(git.baseDir, '.yarn/releases');\n    readdirSync(yarnReleasesDir).forEach((file) => unlinkSync(join(yarnReleasesDir, file)));\n\n    spinner.update('Updating yarn version.');\n    ChildProcess.spawnSync(yarnGlobalBin, ['policies', 'set-version', 'latest']);\n\n    spinner.update('Confirming the version of yarn was updated.');\n\n    const newYarnVersion = ChildProcess.spawnSync(yarnGlobalBin, ['-v'], {\n      env: useYarnPathEnv,\n    }).stdout.trim();\n\n    if (git.run(['status', '--porcelain']).stdout.length === 0) {\n      spinner.complete();\n      Log.error('Yarn already up to date');\n      process.exitCode = 0;\n      return;\n    }\n    /** The title for the PR. */\n    const title = `build: update to yarn v${newYarnVersion}`;\n    /** The body for the PR. */\n    const body = `Update to the latest version of yarn, ${newYarnVersion}.`;\n    /** The commit message for the change. */\n    const commitMessage = `${title}\\n\\n${body}`;\n    /** The name of the branch to use on remote. */\n    const branchName = `yarn-update-v${newYarnVersion}`;\n    /** The fork of the user */\n    const userFork = await git.getForkOfAuthenticatedUser();\n    /** The name of the owner for remote branch on Github. */\n    const {owner: localOwner} = userFork;\n\n    spinner.update('Staging yarn vendoring files and creating commit');\n    git.run(['add', '.yarn/releases/**', '.yarnrc']);\n    git.run(['commit', '-q', '--no-verify', '-m', commitMessage], {env: skipHuskyEnv});\n\n    spinner.update('Pushing commit changes to github.');\n    git.run([\n      'push',\n      '-q',\n      getRepositoryGitUrl(userFork, git.githubToken),\n      '--force-with-lease',\n      `HEAD:refs/heads/${branchName}`,\n    ]);\n\n    spinner.update('Creating a PR for the changes.');\n    const {number} = (\n      await git.github.pulls.create({\n        ...git.remoteParams,\n        title,\n        body,\n        base: mainBranchName,\n        head: `${localOwner}:${branchName}`,\n      })\n    ).data;\n\n    spinner.complete();\n    Log.info(`Created PR #${number} to update to yarn v${newYarnVersion}`);\n  } catch (e) {\n    spinner.complete();\n    Log.error('Aborted yarn update do to errors:');\n    Log.error(e);\n    process.exitCode = 1;\n    git.checkout(originalBranchOrRef, true);\n  } finally {\n    git.checkout(originalBranchOrRef, true);\n  }\n}\n\n/** CLI command module. */\nexport const UpdateYarnCommandModule: CommandModule = {\n  builder,\n  handler,\n  command: 'update-yarn',\n  describe: 'Automatically update the vendored yarn version in the repository and create a PR',\n};\n"]}