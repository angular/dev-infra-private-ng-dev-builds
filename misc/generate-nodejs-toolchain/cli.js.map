{"version":3,"file":"cli.js","sourceRoot":"","sources":["cli.ts"],"names":[],"mappings":"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","sourcesContent":["import https from 'node:https';\nimport {Log} from '../../utils/logging.js';\nimport {Arguments, Argv, CommandModule} from 'yargs';\n\ninterface RepositoryInfo {\n  filename: string;\n  sha: string;\n  type: string;\n}\n\ninterface NodeVersionData {\n  version: string;\n  repositories: RepositoryInfo[];\n}\n\n/** Command line options. */\nexport interface GenerateNodeJsToolchainOptions {\n  nodeJsVersion: string;\n}\n\nfunction builder(argv: Argv): Argv<GenerateNodeJsToolchainOptions> {\n  return argv\n    .positional('nodeJsVersion', {\n      type: 'string',\n      demandOption: true,\n    })\n    .check(({nodeJsVersion}) => {\n      if (!/^\\d+\\.\\d+\\.\\d+$/.test(nodeJsVersion)) {\n        throw new Error(\n          `Invalid version format \"${nodeJsVersion}\". Expected X.Y.Z (Example: 22.11.0)`,\n        );\n      }\n\n      return true;\n    });\n}\n\n/** CLI command module. */\nexport const GeneratedNodeJsToolchainModule: CommandModule<{}, GenerateNodeJsToolchainOptions> = {\n  builder,\n  handler,\n  command: 'generate-nodejs-toolchain <nodeJsVersion>',\n  describe: 'Generates a Bazel toolchain definition for a specific Node.js version.',\n};\n\nconst REPOSITORY_TYPES: Record<string, string> = {\n  'darwin-arm64.tar.gz': 'darwin_arm64',\n  'darwin-x64.tar.gz': 'darwin_amd64',\n  'linux-x64.tar.xz': 'linux_amd64',\n  'linux-arm64.tar.xz': 'linux_arm64',\n  'linux-s390x.tar.xz': 'linux_s390x',\n  'win-x64.zip': 'windows_amd64',\n  'linux-ppc64le.tar.xz': 'linux_ppc64le',\n};\n\nfunction getText(url: string): Promise<string> {\n  return new Promise<string>((resolve, reject) => {\n    const request = https.get(url, (res) => {\n      if (res.statusCode !== 200) {\n        return reject(\n          new Error(`Failed to get ${url}. Status Code: ${res.statusCode ?? 'unknown'}`),\n        );\n      }\n\n      const body: string[] = [];\n      res.on('data', (chunk) => body.push(chunk));\n      res.on('end', () => resolve(body.join('')));\n    });\n\n    request.on('error', (err) => reject(err));\n  });\n}\n\nasync function getNodeJsRepositories(version: string): Promise<NodeVersionData> {\n  const text = await getText(`https://nodejs.org/dist/v${version}/SHASUMS256.txt`);\n\n  const repositories: RepositoryInfo[] = text\n    .split('\\n')\n    .filter(Boolean) // Remove empty lines\n    .map((line: string): RepositoryInfo | undefined => {\n      const [sha, filename] = line.trim().split(/\\s+/);\n      if (!filename) {\n        return undefined;\n      }\n\n      // Extract the part of the filename that matches REPOSITORY_TYPES keys\n      // Example: \"node-v22.2.0-darwin-arm64.tar.gz\" -> \"darwin-arm64.tar.gz\"\n      const fileTypeSuffix = filename.replace(/^node-v[\\d.]+-/, '');\n      const type = REPOSITORY_TYPES[fileTypeSuffix];\n\n      return type ? {filename, sha, type} : undefined;\n    })\n    .filter((repo): repo is RepositoryInfo => repo !== undefined);\n\n  return {\n    version,\n    repositories,\n  };\n}\n\nasync function handler({nodeJsVersion}: Arguments<GenerateNodeJsToolchainOptions>): Promise<void> {\n  try {\n    const {version, repositories} = await getNodeJsRepositories(nodeJsVersion);\n    if (!repositories?.length) {\n      Log.error(\n        `  ✘   Could not find any downloadable files for Node.js version ${version}. ` +\n          `Please check if the version exists and has published binaries at https://nodejs.org/dist/v${version}/`,\n      );\n      process.exit(1);\n    }\n\n    const [majorVersion] = version.split('.');\n    console.log(`nodejs_register_toolchains(`);\n    console.log(`    name = \"node${majorVersion}\",`);\n    console.log(`    node_repositories = {`);\n\n    for (const {filename, sha, type} of repositories) {\n      // Remove file extension (.zip, .tar.xr .tar.gz etc...)\n      const strippedFilename = filename.replace(/(\\.tar)?\\.[^.]+$/, '');\n      console.log(\n        `        \"${version}-${type}\": (\"${filename}\", \"${strippedFilename}\", \"${sha}\"),`,\n      );\n    }\n\n    console.log(`    },`);\n    console.log(`    node_version = \"${version}\",`);\n    console.log(`)\\n`);\n  } catch (error) {\n    Log.error(`  ✘  Aborted due to an error:\\n${error}`);\n    process.exit(1);\n  }\n}\n"]}