{"version":3,"file":"update-generated-files.js","sourceRoot":"","sources":["update-generated-files.ts"],"names":[],"mappings":"AAQA,OAAO,EAAC,YAAY,EAAC,MAAM,8BAA8B,CAAC;AAC1D,OAAO,EAAC,OAAO,EAAC,MAAM,wBAAwB,CAAC;AAC/C,OAAO,EAAC,WAAW,EAAC,MAAM,0BAA0B,CAAC;AACrD,OAAO,EAAC,KAAK,EAAE,GAAG,EAAC,MAAM,wBAAwB,CAAC;AAElD,MAAM,CAAC,KAAK,UAAU,0BAA0B;IAC9C,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,yCAAyC,CAAC,CAAC;IAEvE,IAAI,CAAC;QAEH,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,KAAK,CACrC,WAAW,EAAE,EACb;YACE,OAAO;YACP,sEAAsE;YACtE,UAAU;YACV,OAAO;SACR,EACD,EAAC,IAAI,EAAE,QAAQ,EAAC,CACjB,CAAC;QAEF,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACxB,MAAM,IAAI,KAAK,CAAC,qBAAqB,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;QACxD,CAAC;QAED,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAEpD,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACtC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;QAC/C,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;QAErB,OAAO,CAAC,MAAM,CAAC,SAAS,OAAO,CAAC,MAAM,mCAAmC,CAAC,CAAC;QAG3E,MAAM,YAAY,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAC,IAAI,EAAE,QAAQ,EAAC,CAAC,CAAC;QAGxF,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,OAAO,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC;YAC9C,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;YAC5B,OAAO,CAAC,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC,OAAO,OAAO,CAAC,MAAM,oBAAoB,CAAC,CAAC;YACpE,MAAM,YAAY,GAAG,MAAM,YAAY,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE;gBAC5E,IAAI,EAAE,QAAQ;aACf,CAAC,CAAC;YACH,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC9B,MAAM,IAAI,KAAK,CAAC,oCAAoC,MAAM,GAAG,CAAC,CAAC;YACjE,CAAC;QACH,CAAC;QAED,OAAO,CAAC,QAAQ,EAAE,CAAC;QACnB,GAAG,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,kCAAkC,OAAO,CAAC,MAAM,WAAW,CAAC,CAAC;IACtF,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,OAAO,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC;QAC1C,MAAM,CAAC,CAAC;IACV,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChildProcess} from '../../utils/child-process.js';\nimport {Spinner} from '../../utils/spinner.js';\nimport {getBazelBin} from '../../utils/bazel-bin.js';\nimport {green, Log} from '../../utils/logging.js';\n\nexport async function updateGeneratedFileTargets(): Promise<void> {\n  const spinner = new Spinner('Querying for all generated file targets');\n\n  try {\n    // Query for all of the generated file targets\n    const result = await ChildProcess.spawn(\n      getBazelBin(),\n      [\n        'query',\n        `\"kind(nodejs_binary, //...) intersect attr(name, '.update$', //...)\"`,\n        '--output',\n        'label',\n      ],\n      {mode: 'silent'},\n    );\n\n    if (result.status !== 0) {\n      throw new Error(`Unexpected error: ${result.stderr}`);\n    }\n\n    const targets = result.stdout.trim().split(/\\r?\\n/);\n\n    Log.debug.group('Discovered Targets');\n    targets.forEach((target) => Log.debug(target));\n    Log.debug.groupEnd();\n\n    spinner.update(`Found ${targets.length} generated file targets to update`);\n\n    // Build all of the generated file targets in parallel.\n    await ChildProcess.spawn(getBazelBin(), ['build', targets.join(' ')], {mode: 'silent'});\n\n    // Individually run the generated file update targets.\n    for (let idx = 0; idx < targets.length; idx++) {\n      const target = targets[idx];\n      spinner.update(`${idx + 1} of ${targets.length} updates completed`);\n      const updateResult = await ChildProcess.spawn(getBazelBin(), ['run', target], {\n        mode: 'silent',\n      });\n      if (updateResult.status !== 0) {\n        throw new Error(`Unexpected error while updating: ${target}.`);\n      }\n    }\n\n    spinner.complete();\n    Log.info(` ${green('âœ”')}  Updated all generated files (${targets.length} targets)`);\n  } catch (e) {\n    spinner.failure('An error has occurred.');\n    throw e;\n  }\n}\n"]}