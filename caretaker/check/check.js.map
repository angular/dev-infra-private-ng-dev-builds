{"version":3,"file":"check.js","sourceRoot":"","sources":["check.ts"],"names":[],"mappings":"AAQA,OAAO,EAAC,sBAAsB,EAAC,MAAM,6CAA6C,CAAC;AACnF,OAAO,EAAC,uBAAuB,EAAE,SAAS,EAAC,MAAM,uBAAuB,CAAC;AACzE,OAAO,EAAC,0BAA0B,EAAC,MAAM,uBAAuB,CAAC;AAEjE,OAAO,EAAC,QAAQ,EAAC,MAAM,SAAS,CAAC;AACjC,OAAO,EAAC,QAAQ,EAAC,MAAM,SAAS,CAAC;AACjC,OAAO,EAAC,mBAAmB,EAAC,MAAM,aAAa,CAAC;AAChD,OAAO,EAAC,cAAc,EAAC,MAAM,eAAe,CAAC;AAG7C,MAAM,UAAU,GAAG,CAAC,mBAAmB,EAAE,cAAc,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;AAG7E,MAAM,CAAC,KAAK,UAAU,oBAAoB;IAExC,MAAM,MAAM,GAAG,MAAM,SAAS,EAAE,CAAC;IACjC,0BAA0B,CAAC,MAAM,CAAC,CAAC;IACnC,uBAAuB,CAAC,MAAM,CAAC,CAAC;IAGhC,MAAM,GAAG,GAAG,MAAM,sBAAsB,CAAC,GAAG,EAAE,CAAC;IAG/C,MAAM,qBAAqB,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC;IAKlF,MAAM,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAwB,CAAC,CAAC,CAAC;IAE1F,KAAK,MAAM,MAAM,IAAI,qBAAqB,EAAE,CAAC;QAC3C,MAAM,MAAM,CAAC,eAAe,EAAE,CAAC;IACjC,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AuthenticatedGitClient} from '../../utils/git/authenticated-git-client.js';\nimport {assertValidGithubConfig, getConfig} from '../../utils/config.js';\nimport {assertValidCaretakerConfig} from '../../utils/config.js';\n\nimport {CiModule} from './ci.js';\nimport {G3Module} from './g3.js';\nimport {GithubQueriesModule} from './github.js';\nimport {ServicesModule} from './services.js';\n\n/** List of modules checked for the caretaker check command. */\nconst moduleList = [GithubQueriesModule, ServicesModule, CiModule, G3Module];\n\n/** Check the status of services which Angular caretakers need to monitor. */\nexport async function checkServiceStatuses() {\n  /** The configuration for the caretaker commands. */\n  const config = await getConfig();\n  assertValidCaretakerConfig(config);\n  assertValidGithubConfig(config);\n\n  /** An authenticated git client instance. */\n  const git = await AuthenticatedGitClient.get();\n\n  /** List of instances of Caretaker Check modules */\n  const caretakerCheckModules = moduleList.map((module) => new module(git, config));\n\n  // Module's `data` is casted as Promise<unknown> because the data types of the `module`'s `data`\n  // promises do not match typings, however our usage here is only to determine when the promise\n  // resolves.\n  await Promise.all(caretakerCheckModules.map((module) => module.data as Promise<unknown>));\n\n  for (const module of caretakerCheckModules) {\n    await module.printToTerminal();\n  }\n}\n"]}