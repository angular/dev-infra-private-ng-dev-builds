/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { AuthenticatedGitClient } from '../../utils/git/authenticated-git-client.js';
import { assertValidGithubConfig, getConfig } from '../../utils/config.js';
import { assertValidCaretakerConfig } from '../../utils/config.js';
import { CiModule } from './ci.js';
import { G3Module } from './g3.js';
import { GithubQueriesModule } from './github.js';
import { ServicesModule } from './services.js';
/** List of modules checked for the caretaker check command. */
const moduleList = [GithubQueriesModule, ServicesModule, CiModule, G3Module];
/** Check the status of services which Angular caretakers need to monitor. */
export async function checkServiceStatuses() {
    /** The configuration for the caretaker commands. */
    const config = await getConfig();
    assertValidCaretakerConfig(config);
    assertValidGithubConfig(config);
    /** An authenticated git client instance. */
    const git = await AuthenticatedGitClient.get();
    /** List of instances of Caretaker Check modules */
    const caretakerCheckModules = moduleList.map((module) => new module(git, config));
    // Module's `data` is casted as Promise<unknown> because the data types of the `module`'s `data`
    // promises do not match typings, however our usage here is only to determine when the promise
    // resolves.
    await Promise.all(caretakerCheckModules.map((module) => module.data));
    for (const module of caretakerCheckModules) {
        await module.printToTerminal();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9uZy1kZXYvY2FyZXRha2VyL2NoZWNrL2NoZWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLDZDQUE2QyxDQUFDO0FBQ25GLE9BQU8sRUFBQyx1QkFBdUIsRUFBRSxTQUFTLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUN6RSxPQUFPLEVBQUMsMEJBQTBCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUVqRSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBQ2pDLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFDakMsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQ2hELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFN0MsK0RBQStEO0FBQy9ELE1BQU0sVUFBVSxHQUFHLENBQUMsbUJBQW1CLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUU3RSw2RUFBNkU7QUFDN0UsTUFBTSxDQUFDLEtBQUssVUFBVSxvQkFBb0I7SUFDeEMsb0RBQW9EO0lBQ3BELE1BQU0sTUFBTSxHQUFHLE1BQU0sU0FBUyxFQUFFLENBQUM7SUFDakMsMEJBQTBCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFaEMsNENBQTRDO0lBQzVDLE1BQU0sR0FBRyxHQUFHLE1BQU0sc0JBQXNCLENBQUMsR0FBRyxFQUFFLENBQUM7SUFFL0MsbURBQW1EO0lBQ25ELE1BQU0scUJBQXFCLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxNQUFNLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFFbEYsZ0dBQWdHO0lBQ2hHLDhGQUE4RjtJQUM5RixZQUFZO0lBQ1osTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQXdCLENBQUMsQ0FBQyxDQUFDO0lBRTFGLEtBQUssTUFBTSxNQUFNLElBQUkscUJBQXFCLEVBQUUsQ0FBQztRQUMzQyxNQUFNLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUNqQyxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge0F1dGhlbnRpY2F0ZWRHaXRDbGllbnR9IGZyb20gJy4uLy4uL3V0aWxzL2dpdC9hdXRoZW50aWNhdGVkLWdpdC1jbGllbnQuanMnO1xuaW1wb3J0IHthc3NlcnRWYWxpZEdpdGh1YkNvbmZpZywgZ2V0Q29uZmlnfSBmcm9tICcuLi8uLi91dGlscy9jb25maWcuanMnO1xuaW1wb3J0IHthc3NlcnRWYWxpZENhcmV0YWtlckNvbmZpZ30gZnJvbSAnLi4vLi4vdXRpbHMvY29uZmlnLmpzJztcblxuaW1wb3J0IHtDaU1vZHVsZX0gZnJvbSAnLi9jaS5qcyc7XG5pbXBvcnQge0czTW9kdWxlfSBmcm9tICcuL2czLmpzJztcbmltcG9ydCB7R2l0aHViUXVlcmllc01vZHVsZX0gZnJvbSAnLi9naXRodWIuanMnO1xuaW1wb3J0IHtTZXJ2aWNlc01vZHVsZX0gZnJvbSAnLi9zZXJ2aWNlcy5qcyc7XG5cbi8qKiBMaXN0IG9mIG1vZHVsZXMgY2hlY2tlZCBmb3IgdGhlIGNhcmV0YWtlciBjaGVjayBjb21tYW5kLiAqL1xuY29uc3QgbW9kdWxlTGlzdCA9IFtHaXRodWJRdWVyaWVzTW9kdWxlLCBTZXJ2aWNlc01vZHVsZSwgQ2lNb2R1bGUsIEczTW9kdWxlXTtcblxuLyoqIENoZWNrIHRoZSBzdGF0dXMgb2Ygc2VydmljZXMgd2hpY2ggQW5ndWxhciBjYXJldGFrZXJzIG5lZWQgdG8gbW9uaXRvci4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjaGVja1NlcnZpY2VTdGF0dXNlcygpIHtcbiAgLyoqIFRoZSBjb25maWd1cmF0aW9uIGZvciB0aGUgY2FyZXRha2VyIGNvbW1hbmRzLiAqL1xuICBjb25zdCBjb25maWcgPSBhd2FpdCBnZXRDb25maWcoKTtcbiAgYXNzZXJ0VmFsaWRDYXJldGFrZXJDb25maWcoY29uZmlnKTtcbiAgYXNzZXJ0VmFsaWRHaXRodWJDb25maWcoY29uZmlnKTtcblxuICAvKiogQW4gYXV0aGVudGljYXRlZCBnaXQgY2xpZW50IGluc3RhbmNlLiAqL1xuICBjb25zdCBnaXQgPSBhd2FpdCBBdXRoZW50aWNhdGVkR2l0Q2xpZW50LmdldCgpO1xuXG4gIC8qKiBMaXN0IG9mIGluc3RhbmNlcyBvZiBDYXJldGFrZXIgQ2hlY2sgbW9kdWxlcyAqL1xuICBjb25zdCBjYXJldGFrZXJDaGVja01vZHVsZXMgPSBtb2R1bGVMaXN0Lm1hcCgobW9kdWxlKSA9PiBuZXcgbW9kdWxlKGdpdCwgY29uZmlnKSk7XG5cbiAgLy8gTW9kdWxlJ3MgYGRhdGFgIGlzIGNhc3RlZCBhcyBQcm9taXNlPHVua25vd24+IGJlY2F1c2UgdGhlIGRhdGEgdHlwZXMgb2YgdGhlIGBtb2R1bGVgJ3MgYGRhdGFgXG4gIC8vIHByb21pc2VzIGRvIG5vdCBtYXRjaCB0eXBpbmdzLCBob3dldmVyIG91ciB1c2FnZSBoZXJlIGlzIG9ubHkgdG8gZGV0ZXJtaW5lIHdoZW4gdGhlIHByb21pc2VcbiAgLy8gcmVzb2x2ZXMuXG4gIGF3YWl0IFByb21pc2UuYWxsKGNhcmV0YWtlckNoZWNrTW9kdWxlcy5tYXAoKG1vZHVsZSkgPT4gbW9kdWxlLmRhdGEgYXMgUHJvbWlzZTx1bmtub3duPikpO1xuXG4gIGZvciAoY29uc3QgbW9kdWxlIG9mIGNhcmV0YWtlckNoZWNrTW9kdWxlcykge1xuICAgIGF3YWl0IG1vZHVsZS5wcmludFRvVGVybWluYWwoKTtcbiAgfVxufVxuIl19