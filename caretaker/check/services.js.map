{"version":3,"file":"services.js","sourceRoot":"","sources":["services.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {bold, green, Log, red} from '../../utils/logging.js';\nimport {BaseModule} from './base.js';\n\ninterface ServiceConfig {\n  name: string;\n  url: string;\n  prettyUrl: string;\n}\n\n/**\n * Status HTTP responses which are commonly used by services like GitHub.\n * See for example: https://www.githubstatus.com/api.\n */\ninterface StatusHttpResponse {\n  page: {\n    updated_at: string;\n  };\n  status: {\n    description: string;\n    indicator: 'none' | 'minor' | 'major' | 'critical';\n  };\n}\n\n/** The results of checking the status of a service */\ninterface StatusCheckResult {\n  name: string;\n  status: 'passing' | 'failing';\n  description: string;\n  lastUpdated: Date;\n  statusUrl: string;\n}\n\n/** List of services Angular relies on. */\nexport const services: ServiceConfig[] = [\n  {\n    prettyUrl: 'https://status.saucelabs.com',\n    url: 'https://status.saucelabs.com/api/v2/status.json',\n    name: 'Saucelabs',\n  },\n  {\n    prettyUrl: 'https://status.npmjs.org/',\n    url: 'https://status.npmjs.org/api/v2/status.json',\n    name: 'Npm',\n  },\n  {\n    prettyUrl: 'https://www.githubstatus.com',\n    url: 'https://www.githubstatus.com/api/v2/status.json',\n    name: 'Github',\n  },\n];\n\nexport class ServicesModule extends BaseModule<StatusCheckResult[]> {\n  override async retrieveData() {\n    return Promise.all(services.map((service) => this.getStatusFromStandardApi(service)));\n  }\n\n  override async printToTerminal() {\n    const statuses = await this.data;\n    const serviceNameMinLength = Math.max(...statuses.map((service) => service.name.length));\n    Log.info.group(bold('Service Statuses'));\n    for (const status of statuses) {\n      const name = status.name.padEnd(serviceNameMinLength);\n      if (status.status === 'passing') {\n        Log.info(`${name} ${green('✔')}`);\n      } else {\n        Log.info.group(`${name} ${red('✘')} (Updated: ${status.lastUpdated.toLocaleString()})`);\n        Log.info(`  Details: ${status.description}`);\n        Log.info(`  Status URL: ${status.statusUrl}`);\n        Log.info.groupEnd();\n      }\n    }\n    Log.info.groupEnd();\n    Log.info();\n  }\n\n  /** Retrieve the status information for a service which uses a standard API response. */\n  async getStatusFromStandardApi(service: ServiceConfig): Promise<StatusCheckResult> {\n    try {\n      const result = (await fetch(service.url).then((r) => r.json())) as StatusHttpResponse;\n      const status = result.status.indicator === 'none' ? 'passing' : 'failing';\n      return {\n        name: service.name,\n        statusUrl: service.prettyUrl,\n        status,\n        description: result.status.description,\n        lastUpdated: new Date(result.page.updated_at),\n      };\n    } catch {\n      return {\n        name: service.name,\n        statusUrl: service.prettyUrl,\n        status: 'failing',\n        description: `Unable to retrieve status from ${service.name}`,\n        lastUpdated: new Date(),\n      };\n    }\n  }\n}\n"]}