{"version":3,"file":"github.js","sourceRoot":"","sources":["github.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {alias, onUnion, params, types} from 'typed-graphqlify';\n\nimport {bold, Log} from '../../utils/logging.js';\nimport {CaretakerConfig} from '../../utils/config.js';\nimport {BaseModule} from './base.js';\n\n/** A list of generated results for a github query. */\ntype GithubQueryResults = {\n  queryName: string;\n  count: number;\n  queryUrl: string;\n  matchedUrls: string[];\n}[];\n\n/** The fragment for a result from Github's api for a Github query. */\nconst GithubQueryResultFragment = {\n  issueCount: types.number,\n  nodes: [\n    {\n      ...onUnion({\n        PullRequest: {\n          url: types.string,\n        },\n        Issue: {\n          url: types.string,\n        },\n      }),\n    },\n  ],\n};\n\n/** An object containing results of multiple queries.  */\ntype GithubQueryResult = {\n  [key: string]: typeof GithubQueryResultFragment;\n};\n\n/**\n * Cap the returned issues in the queries to an arbitrary 20. At that point, caretaker has a lot\n * of work to do and showing more than that isn't really useful.\n */\nconst MAX_RETURNED_ISSUES = 20;\n\nexport class GithubQueriesModule extends BaseModule<GithubQueryResults | void> {\n  override async retrieveData() {\n    // Non-null assertion is used here as the check for undefined immediately follows to confirm the\n    // assertion.  Typescript's type filtering does not seem to work as needed to understand\n    // whether githubQueries is undefined or not.\n    let queries = this.config.caretaker?.githubQueries!;\n    if (queries === undefined || queries.length === 0) {\n      Log.debug('No github queries defined in the configuration, skipping');\n      return;\n    }\n\n    /** The results of the generated github query. */\n    const queryResult = await this.git.github.graphql(this.buildGraphqlQuery(queries));\n    const results = Object.values(queryResult);\n\n    const {owner, name: repo} = this.git.remoteConfig;\n\n    return results.map((result, i) => {\n      const query = queries[i];\n      const queryURLParam = encodeURIComponent(query.query);\n\n      return {\n        queryName: query.name,\n        count: result.issueCount,\n        queryUrl: `https://github.com/${owner}/${repo}/issues?q=${queryURLParam}`,\n        matchedUrls: result.nodes.map((node) => node.url),\n      };\n    });\n  }\n\n  /** Build a Graphql query statement for the provided queries. */\n  private buildGraphqlQuery(queries: NonNullable<CaretakerConfig['githubQueries']>) {\n    /** The query object for graphql. */\n    const graphqlQuery: GithubQueryResult = {};\n    const {owner, name: repo} = this.git.remoteConfig;\n    /** The Github search filter for the configured repository. */\n    const repoFilter = `repo:${owner}/${repo}`;\n\n    queries.forEach(({name, query}) => {\n      /** The name of the query, with spaces removed to match Graphql requirements. */\n      const queryKey = alias(name.replace(/ /g, ''), 'search');\n      graphqlQuery[queryKey] = params(\n        {\n          type: 'ISSUE',\n          first: MAX_RETURNED_ISSUES,\n          query: `\"${repoFilter} ${query.replace(/\\\"/g, '\\\\\"')}\"`,\n        },\n        {...GithubQueryResultFragment},\n      );\n    });\n\n    return graphqlQuery;\n  }\n\n  override async printToTerminal() {\n    const queryResults = await this.data;\n    if (!queryResults) {\n      return;\n    }\n    Log.info.group(bold('Github Tasks'));\n    const minQueryNameLength = Math.max(...queryResults.map((result) => result.queryName.length));\n    for (const queryResult of queryResults) {\n      Log.info(`${queryResult.queryName.padEnd(minQueryNameLength)}  ${queryResult.count}`);\n\n      if (queryResult.count > 0) {\n        Log.info.group(queryResult.queryUrl);\n        queryResult.matchedUrls.forEach((url) => Log.info(`- ${url}`));\n        if (queryResult.count > MAX_RETURNED_ISSUES) {\n          Log.info(`... ${queryResult.count - MAX_RETURNED_ISSUES} additional matches`);\n        }\n        Log.info.groupEnd();\n      }\n    }\n    Log.info.groupEnd();\n    Log.info();\n  }\n}\n"]}