{"version":3,"file":"prettier.js","sourceRoot":"","sources":["prettier.ts"],"names":[],"mappings":"AAQA,OAAO,EAAC,IAAI,EAAC,MAAM,MAAM,CAAC;AAE1B,OAAO,EAAC,YAAY,EAAC,MAAM,8BAA8B,CAAC;AAC1D,OAAO,EAAC,GAAG,EAAC,MAAM,wBAAwB,CAAC;AAE3C,OAAO,EAAC,SAAS,EAAC,MAAM,qBAAqB,CAAC;AAK9C,MAAM,OAAO,QAAS,SAAQ,SAAS;IAAvC;;QACW,SAAI,GAAG,UAAU,CAAC;QAElB,mBAAc,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,4BAA4B,CAAC,CAAC;QAEtE,uBAAkB,GAAG;YAC5B,mBAAmB;YACnB,mBAAmB;YACnB,mBAAmB;YACnB,iBAAiB;SAClB,CAAC;QAMM,eAAU,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;YAC1C,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,EAAE;gBAC1C,oBAAoB;gBACpB,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,UAAU,CAAC;aAChC,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE;YAClB,CAAC,CAAC,EAAE,CAAC;QAEE,YAAO,GAAG;YACjB,KAAK,EAAE;gBACL,YAAY,EAAE,YAAY,IAAI,CAAC,UAAU,UAAU;gBACnD,QAAQ,EAAE,CAAC,CAAS,EAAE,IAA6B,EAAE,MAAc,EAAE,EAAE;oBACrE,OAAO,IAAI,KAAK,CAAC,CAAC;gBACpB,CAAC;aACF;YACD,MAAM,EAAE;gBACN,YAAY,EAAE,YAAY,IAAI,CAAC,UAAU,UAAU;gBACnD,QAAQ,EAAE,CAAC,IAAY,EAAE,IAA6B,EAAE,CAAS,EAAE,MAAc,EAAE,EAAE;oBACnF,IAAI,IAAI,KAAK,CAAC,EAAE,CAAC;wBACf,GAAG,CAAC,KAAK,CAAC,8BAA8B,IAAI,EAAE,CAAC,CAAC;wBAChD,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;wBAClB,GAAG,CAAC,KAAK,EAAE,CAAC;wBACZ,OAAO,IAAI,CAAC;oBACd,CAAC;oBACD,OAAO,KAAK,CAAC;gBACf,CAAC;aACF;SACF,CAAC;IACJ,CAAC;CAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {join} from 'path';\n\nimport {ChildProcess} from '../../utils/child-process.js';\nimport {Log} from '../../utils/logging.js';\n\nimport {Formatter} from './base-formatter.js';\n\n/**\n * Formatter for running prettier against Typescript and Javascript files.\n */\nexport class Prettier extends Formatter {\n  override name = 'prettier';\n\n  override binaryFilePath = join(this.git.baseDir, 'node_modules/.bin/prettier');\n\n  override defaultFileMatcher = [\n    '**/*.{js,cjs,mjs}',\n    '**/*.{ts,cts,mts}',\n    '**/*.{json,json5}',\n    '**/*.{yml,yaml}',\n  ];\n\n  /**\n   * The configuration path of the prettier config, obtained during construction to prevent needing\n   * to discover it repeatedly for each execution.\n   */\n  private configPath = this.config['prettier']\n    ? ChildProcess.spawnSync(this.binaryFilePath, [\n        '--find-config-path',\n        join(process.cwd(), 'dummy.js'),\n      ]).stdout.trim()\n    : '';\n\n  override actions = {\n    check: {\n      commandFlags: `--config ${this.configPath} --check`,\n      callback: (_: string, code: number | NodeJS.Signals, stdout: string) => {\n        return code !== 0;\n      },\n    },\n    format: {\n      commandFlags: `--config ${this.configPath} --write`,\n      callback: (file: string, code: number | NodeJS.Signals, _: string, stderr: string) => {\n        if (code !== 0) {\n          Log.error(`Error running prettier on: ${file}`);\n          Log.error(stderr);\n          Log.error();\n          return true;\n        }\n        return false;\n      },\n    },\n  };\n}\n"]}