{"version":3,"file":"buildifier.js","sourceRoot":"","sources":["buildifier.ts"],"names":[],"mappings":"AAQA,OAAO,EAAC,IAAI,EAAC,MAAM,MAAM,CAAC;AAE1B,OAAO,EAAC,GAAG,EAAC,MAAM,wBAAwB,CAAC;AAE3C,OAAO,EAAC,SAAS,EAAC,MAAM,qBAAqB,CAAC;AAK9C,MAAM,OAAO,UAAW,SAAQ,SAAS;IAAzC;;QACW,SAAI,GAAG,YAAY,CAAC;QAEpB,mBAAc,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,8BAA8B,CAAC,CAAC;QAExE,uBAAkB,GAAG,CAAC,UAAU,EAAE,YAAY,EAAE,cAAc,EAAE,UAAU,CAAC,CAAC;QAE5E,YAAO,GAAG;YACjB,KAAK,EAAE;gBACL,YAAY,EAAE,GAAG,kBAAkB,yCAAyC;gBAC5E,QAAQ,EAAE,CAAC,CAAS,EAAE,IAA6B,EAAE,MAAc,EAAE,EAAE;oBAErE,MAAM,GAAG,MAAM,IAAI,IAAI,CAAC;oBACxB,OAAO,IAAI,KAAK,CAAC,IAAI,CAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAwB,CAAC,OAAO,CAAC;gBAC3E,CAAC;aACF;YACD,MAAM,EAAE;gBACN,YAAY,EAAE,GAAG,kBAAkB,wBAAwB;gBAC3D,QAAQ,EAAE,CAAC,IAAY,EAAE,IAA6B,EAAE,CAAS,EAAE,MAAc,EAAE,EAAE;oBACnF,IAAI,IAAI,KAAK,CAAC,EAAE,CAAC;wBACf,GAAG,CAAC,KAAK,CAAC,gCAAgC,IAAI,EAAE,CAAC,CAAC;wBAClD,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;wBAClB,GAAG,CAAC,KAAK,EAAE,CAAC;wBACZ,OAAO,IAAI,CAAC;oBACd,CAAC;oBACD,OAAO,KAAK,CAAC;gBACf,CAAC;aACF;SACF,CAAC;IACJ,CAAC;CAAA;AAGD,MAAM,kBAAkB,GACtB,sEAAsE;IACtE,6EAA6E;IAC7E,6EAA6E;IAC7E,uFAAuF;IACvF,qEAAqE,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {join} from 'path';\n\nimport {Log} from '../../utils/logging.js';\n\nimport {Formatter} from './base-formatter.js';\n\n/**\n * Formatter for running buildifier against bazel related files.\n */\nexport class Buildifier extends Formatter {\n  override name = 'buildifier';\n\n  override binaryFilePath = join(this.git.baseDir, 'node_modules/.bin/buildifier');\n\n  override defaultFileMatcher = ['**/*.bzl', '**/*.bazel', '**/WORKSPACE', '**/BUILD'];\n\n  override actions = {\n    check: {\n      commandFlags: `${BAZEL_WARNING_FLAG} --lint=warn --mode=check --format=json`,\n      callback: (_: string, code: number | NodeJS.Signals, stdout: string) => {\n        // For cases where `stdout` is empty, we instead use an empty object to still allow parsing.\n        stdout = stdout || '{}';\n        return code !== 0 || !(JSON.parse(stdout) as {success: boolean}).success;\n      },\n    },\n    format: {\n      commandFlags: `${BAZEL_WARNING_FLAG} --lint=fix --mode=fix`,\n      callback: (file: string, code: number | NodeJS.Signals, _: string, stderr: string) => {\n        if (code !== 0) {\n          Log.error(`Error running buildifier on: ${file}`);\n          Log.error(stderr);\n          Log.error();\n          return true;\n        }\n        return false;\n      },\n    },\n  };\n}\n\n// The warning flag for buildifier copied from angular/angular's usage.\nconst BAZEL_WARNING_FLAG =\n  `--warnings=attr-cfg,attr-license,attr-non-empty,attr-output-default,` +\n  `attr-single-file,ctx-args,depset-iteration,depset-union,dict-concatenation,` +\n  `duplicated-name,filetype,git-repository,http-archive,integer-division,load,` +\n  `native-build,native-package,output-group,package-name,package-on-top,positional-args,` +\n  `redefined-variable,repository-name,string-iteration,unused-variable`;\n"]}