{"version":3,"file":"base-formatter.js","sourceRoot":"","sources":["base-formatter.ts"],"names":[],"mappings":"AA+BA,MAAM,OAAgB,SAAS;IAqB7B,YACY,GAAc,EACd,MAAoB;QADpB,QAAG,GAAH,GAAG,CAAW;QACd,WAAM,GAAN,MAAM,CAAc;IAC7B,CAAC;IAMJ,UAAU,CAAC,MAAuB;QAChC,QAAQ,MAAM,EAAE,CAAC;YACf,KAAK,OAAO;gBACV,OAAO,GAAG,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC;YACrE,KAAK,QAAQ;gBACX,OAAO,GAAG,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;YACtE;gBACE,MAAM,KAAK,CAAC,qBAAqB,CAAC,CAAC;QACvC,CAAC;IACH,CAAC;IAMD,WAAW,CAAC,MAAuB;QACjC,QAAQ,MAAM,EAAE,CAAC;YACf,KAAK,OAAO;gBACV,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC;YACrC,KAAK,QAAQ;gBACX,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC;YACtC;gBACE,MAAM,KAAK,CAAC,qBAAqB,CAAC,CAAC;QACvC,CAAC;IACH,CAAC;IAGD,SAAS;QACP,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClC,CAAC;IAGD,cAAc;QACZ,OAAO,IAAI,CAAC,wBAAwB,EAAE,IAAI,IAAI,CAAC,kBAAkB,CAAC;IACpE,CAAC;IAKO,wBAAwB;QAC9B,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/C,IAAI,OAAO,eAAe,KAAK,SAAS,EAAE,CAAC;YACzC,OAAO,SAAS,CAAC;QACnB,CAAC;QACD,OAAO,eAAe,CAAC,QAAQ,CAAC;IAClC,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {GitClient} from '../../utils/git/git-client.js';\nimport {FormatConfig} from '../config.js';\n\n// A callback to determine if the formatter run found a failure in formatting.\nexport type CallbackFunc = (\n  file: string,\n  code: number | NodeJS.Signals,\n  stdout: string,\n  stderr: string,\n) => boolean;\n\n// The actions a formatter can take.\nexport type FormatterAction = 'check' | 'format';\n\n// The metadata needed for running one of the `FormatterAction`s on a file.\ninterface FormatterActionMetadata {\n  commandFlags: string;\n  callback: CallbackFunc;\n}\n\n/**\n * The base class for formatters to run against provided files.\n */\nexport abstract class Formatter {\n  /**\n   * The name of the formatter, this is used for identification in logging and for enabling and\n   * configuring the formatter in the config.\n   */\n  abstract name: string;\n\n  /** The full path file location of the formatter binary. */\n  abstract binaryFilePath: string;\n\n  /** Metadata for each `FormatterAction` available to the formatter. */\n  abstract actions: {\n    // An action performing a check of format without making any changes.\n    check: FormatterActionMetadata;\n    // An action to format files in place.\n    format: FormatterActionMetadata;\n  };\n\n  /** The default matchers for the formatter for filtering files to be formatted. */\n  abstract defaultFileMatcher: string[];\n\n  constructor(\n    protected git: GitClient,\n    protected config: FormatConfig,\n  ) {}\n\n  /**\n   * Retrieve the command to execute the provided action, including both the binary\n   * and command line flags.\n   */\n  commandFor(action: FormatterAction) {\n    switch (action) {\n      case 'check':\n        return `${this.binaryFilePath} ${this.actions.check.commandFlags}`;\n      case 'format':\n        return `${this.binaryFilePath} ${this.actions.format.commandFlags}`;\n      default:\n        throw Error('Unknown action type');\n    }\n  }\n\n  /**\n   * Retrieve the callback for the provided action to determine if an action\n   * failed in formatting.\n   */\n  callbackFor(action: FormatterAction) {\n    switch (action) {\n      case 'check':\n        return this.actions.check.callback;\n      case 'format':\n        return this.actions.format.callback;\n      default:\n        throw Error('Unknown action type');\n    }\n  }\n\n  /** Whether the formatter is enabled in the provided config. */\n  isEnabled() {\n    return !!this.config[this.name];\n  }\n\n  /** Retrieve the active file matcher for the formatter. */\n  getFileMatcher() {\n    return this.getFileMatcherFromConfig() || this.defaultFileMatcher;\n  }\n\n  /**\n   * Retrieves the file matcher from the config provided to the constructor if provided.\n   */\n  private getFileMatcherFromConfig(): string[] | undefined {\n    const formatterConfig = this.config[this.name];\n    if (typeof formatterConfig === 'boolean') {\n      return undefined;\n    }\n    return formatterConfig.matchers;\n  }\n}\n"]}