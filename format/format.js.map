{"version":3,"file":"format.js","sourceRoot":"","sources":["format.ts"],"names":[],"mappings":"AAQA,OAAO,EAAC,KAAK,EAAE,GAAG,EAAC,MAAM,qBAAqB,CAAC;AAC/C,OAAO,EAAC,MAAM,EAAC,MAAM,oBAAoB,CAAC;AAE1C,OAAO,EAAC,sBAAsB,EAAC,MAAM,4BAA4B,CAAC;AAOlE,MAAM,CAAC,KAAK,UAAU,WAAW,CAAC,KAAe;IAE/C,IAAI,QAAQ,GAAG,MAAM,sBAAsB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IAE7D,IAAI,QAAQ,KAAK,KAAK,EAAE,CAAC;QACvB,GAAG,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC;QAC7C,OAAO,CAAC,CAAC;IACX,CAAC;IAGD,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QAC1B,GAAG,CAAC,KAAK,CAAC,6CAA6C,CAAC,CAAC;QACzD,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAC,QAAQ,EAAE,OAAO,EAAC,EAAE,EAAE;YACvC,GAAG,CAAC,IAAI,CAAC,OAAO,QAAQ,KAAK,OAAO,EAAE,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QACH,GAAG,CAAC,KAAK,CAAC,2DAA2D,CAAC,CAAC;QACvE,OAAO,CAAC,CAAC;IACX,CAAC;IACD,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC,CAAC;IAC3C,OAAO,CAAC,CAAC;AACX,CAAC;AAOD,MAAM,CAAC,KAAK,UAAU,UAAU,CAAC,KAAe;IAE9C,MAAM,QAAQ,GAAG,MAAM,sBAAsB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IAE9D,IAAI,QAAQ,KAAK,KAAK,EAAE,CAAC;QACvB,GAAG,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC;QACnD,OAAO,CAAC,CAAC;IACX,CAAC;IAED,IAAI,QAAQ,CAAC,MAAM,EAAE,CAAC;QAEpB,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,0CAA0C,CAAC,CAAC;QAC3D,KAAK,MAAM,EAAC,QAAQ,EAAC,IAAI,QAAQ,EAAE,CAAC;YAClC,GAAG,CAAC,IAAI,CAAC,OAAO,QAAQ,EAAE,CAAC,CAAC;QAC9B,CAAC;QACD,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;QACpB,GAAG,CAAC,IAAI,EAAE,CAAC;QAGX,IAAI,YAAY,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;YACvB,YAAY,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,EAAC,OAAO,EAAE,uBAAuB,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC;QACzF,CAAC;QAED,IAAI,YAAY,EAAE,CAAC;YAEjB,OAAO,CAAC,MAAM,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACnE,CAAC;aAAM,CAAC;YAEN,GAAG,CAAC,IAAI,EAAE,CAAC;YACX,GAAG,CAAC,IAAI,CAAC,uDAAuD,CAAC,CAAC;YAClE,GAAG,CAAC,IAAI,CAAC,8BAA8B,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YACpF,OAAO,CAAC,CAAC;QACX,CAAC;IACH,CAAC;SAAM,CAAC;QACN,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,mCAAmC,CAAC,CAAC,CAAC;QACrD,OAAO,CAAC,CAAC;IACX,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {green, Log} from '../utils/logging.js';\nimport {Prompt} from '../utils/prompt.js';\n\nimport {runFormatterInParallel} from './run-commands-parallel.js';\n\n/**\n * Format provided files in place.\n *\n * @returns a status code indicating whether the formatting run was successful.\n */\nexport async function formatFiles(files: string[]): Promise<1 | 0> {\n  // Whether any files failed to format.\n  let failures = await runFormatterInParallel(files, 'format');\n\n  if (failures === false) {\n    Log.info('No files matched for formatting.');\n    return 0;\n  }\n\n  // The process should exit as a failure if any of the files failed to format.\n  if (failures.length !== 0) {\n    Log.error(`The following files could not be formatted:`);\n    failures.forEach(({filePath, message}) => {\n      Log.info(`  • ${filePath}: ${message}`);\n    });\n    Log.error(`Formatting failed, see errors above for more information.`);\n    return 1;\n  }\n  Log.info(green(`✔  Formatting complete.`));\n  return 0;\n}\n\n/**\n * Check provided files for formatting correctness.\n *\n * @returns a status code indicating whether the format check run was successful.\n */\nexport async function checkFiles(files: string[]) {\n  // Files which are currently not formatted correctly.\n  const failures = await runFormatterInParallel(files, 'check');\n\n  if (failures === false) {\n    Log.info('No files matched for formatting check.');\n    return 0;\n  }\n\n  if (failures.length) {\n    // Provide output expressing which files are failing formatting.\n    Log.warn.group('\\nThe following files are out of format:');\n    for (const {filePath} of failures) {\n      Log.warn(`  • ${filePath}`);\n    }\n    Log.warn.groupEnd();\n    Log.warn();\n\n    // If the command is run in a non-CI environment, prompt to format the files immediately.\n    let runFormatter = false;\n    if (!process.env['CI']) {\n      runFormatter = await Prompt.confirm({message: 'Format the files now?', default: true});\n    }\n\n    if (runFormatter) {\n      // Format the failing files as requested.\n      return (await formatFiles(failures.map((f) => f.filePath))) || 0;\n    } else {\n      // Inform user how to format files in the future.\n      Log.info();\n      Log.info(`To format the failing file run the following command:`);\n      Log.info(`  pnpm ng-dev format files ${failures.map((f) => f.filePath).join(' ')}`);\n      return 1;\n    }\n  } else {\n    Log.info(green('✔  All files correctly formatted.'));\n    return 0;\n  }\n}\n"]}