{"version":3,"file":"changed.js","sourceRoot":"","sources":["changed.ts"],"names":[],"mappings":"AAUA,OAAO,EAAC,SAAS,EAAC,MAAM,4BAA4B,CAAC;AACrD,OAAO,EAAC,UAAU,EAAE,WAAW,EAAC,MAAM,aAAa,CAAC;AASpD,SAAS,OAAO,CAAC,IAAU;IACzB,OAAO,IAAI;SACR,MAAM,CAAC,OAAO,EAAE;QACf,IAAI,EAAE,SAAS;QACf,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK;QACzC,WAAW,EAAE,wEAAwE;KACtF,CAAC;SACD,UAAU,CAAC,UAAU,EAAE,EAAC,IAAI,EAAE,QAAQ,EAAC,CAAC,CAAC;AAC9C,CAAC;AAGD,KAAK,UAAU,OAAO,CAAC,EAAC,QAAQ,EAAE,KAAK,EAAqB;IAC1D,MAAM,GAAG,GAAG,MAAM,SAAS,CAAC,GAAG,EAAE,CAAC;IAClC,MAAM,GAAG,GAAG,QAAQ,IAAI,GAAG,CAAC,cAAc,CAAC;IAC3C,MAAM,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,WAAW,CAAC;IACtD,MAAM,oBAAoB,GAAG,GAAG,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;IAC3D,OAAO,CAAC,QAAQ,GAAG,MAAM,YAAY,CAAC,oBAAoB,CAAC,CAAC;AAC9D,CAAC;AAGD,MAAM,CAAC,MAAM,aAAa,GAA+B;IACvD,OAAO;IACP,OAAO;IACP,OAAO,EAAE,oBAAoB;IAC7B,QAAQ,EAAE,+DAA+D;CAC1E,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Argv, Arguments, CommandModule} from 'yargs';\n\nimport {GitClient} from '../utils/git/git-client.js';\nimport {checkFiles, formatFiles} from './format.js';\n\n/** Command line options. */\nexport interface Options {\n  shaOrRef?: string;\n  check: boolean;\n}\n\n/** Yargs command builder for the command. */\nfunction builder(argv: Argv): Argv<Options> {\n  return argv\n    .option('check', {\n      type: 'boolean',\n      default: process.env['CI'] ? true : false,\n      description: 'Run the formatter to check formatting rather than updating code format',\n    })\n    .positional('shaOrRef', {type: 'string'});\n}\n\n/** Yargs command handler for the command. */\nasync function handler({shaOrRef, check}: Arguments<Options>) {\n  const git = await GitClient.get();\n  const sha = shaOrRef || git.mainBranchName;\n  const executionCmd = check ? checkFiles : formatFiles;\n  const allChangedFilesSince = git.allChangesFilesSince(sha);\n  process.exitCode = await executionCmd(allChangedFilesSince);\n}\n\n/** CLI command module. */\nexport const ChangedModule: CommandModule<{}, Options> = {\n  builder,\n  handler,\n  command: 'changed [shaOrRef]',\n  describe: 'Run the formatter on files changed since the provided sha/ref',\n};\n"]}