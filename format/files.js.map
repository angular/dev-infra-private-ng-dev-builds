{"version":3,"file":"files.js","sourceRoot":"","sources":["files.ts"],"names":[],"mappings":"AAUA,OAAO,EAAC,UAAU,EAAE,WAAW,EAAC,MAAM,aAAa,CAAC;AACpD,OAAO,IAAI,MAAM,WAAW,CAAC;AAS7B,SAAS,OAAO,CAAC,IAAU;IACzB,OAAO,IAAI;SACR,MAAM,CAAC,OAAO,EAAE;QACf,IAAI,EAAE,SAAS;QACf,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK;QACzC,WAAW,EAAE,wEAAwE;KACtF,CAAC;SACD,UAAU,CAAC,OAAO,EAAE,EAAC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,YAAY,EAAE,IAAI,EAAC,CAAC,CAAC;AAC5E,CAAC;AAGD,KAAK,UAAU,OAAO,CAAC,EAAC,KAAK,EAAE,KAAK,EAAqB;IACvD,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAC7B,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,EACpD,EAAC,SAAS,EAAE,IAAI,EAAC,CAClB,CAAC;IACF,MAAM,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,WAAW,CAAC;IACtD,OAAO,CAAC,QAAQ,GAAG,MAAM,YAAY,CAAC,aAAa,CAAC,CAAC;AACvD,CAAC;AAGD,MAAM,CAAC,MAAM,WAAW,GAA+B;IACrD,OAAO;IACP,OAAO;IACP,OAAO,EAAE,iBAAiB;IAC1B,QAAQ,EAAE,qCAAqC;CAChD,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Argv, Arguments, CommandModule} from 'yargs';\n\nimport {checkFiles, formatFiles} from './format.js';\nimport glob from 'fast-glob';\n\n/** Command line options. */\nexport interface Options {\n  files: string[];\n  check: boolean;\n}\n\n/** Yargs command builder for the command. */\nfunction builder(argv: Argv): Argv<Options> {\n  return argv\n    .option('check', {\n      type: 'boolean',\n      default: process.env['CI'] ? true : false,\n      description: 'Run the formatter to check formatting rather than updating code format',\n    })\n    .positional('files', {array: true, type: 'string', demandOption: true});\n}\n\n/** Yargs command handler for the command. */\nasync function handler({files, check}: Arguments<Options>) {\n  const expandedFiles = glob.sync(\n    files.map((file) => file.replace(/\\/...$/, '/**/*')),\n    {onlyFiles: true},\n  );\n  const executionCmd = check ? checkFiles : formatFiles;\n  process.exitCode = await executionCmd(expandedFiles);\n}\n\n/** CLI command module. */\nexport const FilesModule: CommandModule<{}, Options> = {\n  builder,\n  handler,\n  command: 'files <files..>',\n  describe: 'Run the formatter on provided files',\n};\n"]}