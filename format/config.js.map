{"version":3,"file":"config.js","sourceRoot":"","sources":["config.ts"],"names":[],"mappings":"AAQA,OAAO,EAAC,qBAAqB,EAAc,MAAM,oBAAoB,CAAC;AAWtE,MAAM,UAAU,uBAAuB,CACrC,MAA2C;IAG3C,MAAM,MAAM,GAAa,EAAE,CAAC;IAC5B,IAAI,MAAM,CAAC,MAAM,KAAK,SAAS,EAAE,CAAC;QAChC,MAAM,IAAI,qBAAqB,CAAC,uCAAuC,CAAC,CAAC;IAC3E,CAAC;IAED,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,MAAO,CAAC,EAAE,CAAC;QAC1D,QAAQ,OAAO,KAAK,EAAE,CAAC;YACrB,KAAK,SAAS;gBACZ,MAAM;YACR,KAAK,QAAQ;gBACX,oBAAoB,CAAC,GAAG,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;gBACzC,MAAM;YACR;gBACE,MAAM,CAAC,IAAI,CAAC,WAAW,GAAG,wCAAwC,CAAC,CAAC;QACxE,CAAC;IACH,CAAC;IACD,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;QAClB,MAAM,IAAI,qBAAqB,CAAC,gCAAgC,EAAE,MAAM,CAAC,CAAC;IAC5E,CAAC;AACH,CAAC;AAGD,SAAS,oBAAoB,CAAC,GAAW,EAAE,MAA0B,EAAE,MAAgB;IACrF,IAAI,MAAM,CAAC,QAAQ,KAAK,SAAS,EAAE,CAAC;QAClC,MAAM,CAAC,IAAI,CAAC,mBAAmB,GAAG,kBAAkB,CAAC,CAAC;IACxD,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ConfigValidationError, NgDevConfig} from '../utils/config.js';\n\ninterface Formatter {\n  matchers: string[];\n}\n\nexport interface FormatConfig {\n  [key: string]: boolean | Formatter;\n}\n\n/** Retrieve and validate the config as `FormatConfig`. */\nexport function assertValidFormatConfig<T extends NgDevConfig>(\n  config: T & Partial<{format: FormatConfig}>,\n): asserts config is T & {format: FormatConfig} {\n  // List of errors encountered validating the config.\n  const errors: string[] = [];\n  if (config.format === undefined) {\n    throw new ConfigValidationError(`No configuration defined for \"format\"`);\n  }\n\n  for (const [key, value] of Object.entries(config.format!)) {\n    switch (typeof value) {\n      case 'boolean':\n        break;\n      case 'object':\n        checkFormatterConfig(key, value, errors);\n        break;\n      default:\n        errors.push(`\"format.${key}\" is not a boolean or Formatter object`);\n    }\n  }\n  if (errors.length) {\n    throw new ConfigValidationError('Invalid \"format\" configuration', errors);\n  }\n}\n\n/** Validate an individual Formatter config. */\nfunction checkFormatterConfig(key: string, config: Partial<Formatter>, errors: string[]) {\n  if (config.matchers === undefined) {\n    errors.push(`Missing \"format.${key}.matchers\" value`);\n  }\n}\n"]}