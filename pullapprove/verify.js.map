{"version":3,"file":"verify.js","sourceRoot":"","sources":["verify.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {readFileSync} from 'fs';\nimport {resolve} from 'path';\n\nimport {Log} from '../utils/logging.js';\nimport {GitClient} from '../utils/git/git-client.js';\nimport {logGroup, logHeader} from './logging.js';\nimport {getGroupsFromYaml} from './parse-yaml.js';\n\nexport async function verify() {\n  const git = await GitClient.get();\n  /** Full path to PullApprove config file */\n  const PULL_APPROVE_YAML_PATH = resolve(git.baseDir, '.pullapprove.yml');\n  /** All tracked files in the repository. */\n  const REPO_FILES = git.allFiles();\n  /** The pull approve config file. */\n  const pullApproveYamlRaw = readFileSync(PULL_APPROVE_YAML_PATH, 'utf8');\n  /** All of the groups defined in the pullapprove yaml. */\n  const groups = getGroupsFromYaml(pullApproveYamlRaw);\n  /**\n   * PullApprove groups without conditions. These are skipped in the verification\n   * as those would always be active and cause zero unmatched files.\n   */\n  const groupsSkipped = groups.filter((group) => !group.conditions.length);\n  /** PullApprove groups with conditions. */\n  const groupsWithConditions = groups.filter((group) => !!group.conditions.length);\n  /** Files which are matched by at least one group. */\n  const matchedFiles: string[] = [];\n  /** Files which are not matched by at least one group. */\n  const unmatchedFiles: string[] = [];\n\n  // Test each file in the repo against each group for being matched.\n  REPO_FILES.forEach((file: string) => {\n    if (groupsWithConditions.filter((group) => group.testFile(file)).length) {\n      matchedFiles.push(file);\n    } else {\n      unmatchedFiles.push(file);\n    }\n  });\n  /** Results for each group */\n  const resultsByGroup = groupsWithConditions.map((group) => group.getResults());\n  /**\n   * Whether all group condition lines match at least one file and all files\n   * are matched by at least one group.\n   */\n  const allGroupConditionsValid =\n    resultsByGroup.every((r) => !r.unmatchedCount) && !unmatchedFiles.length;\n  /** Whether all groups have at least one reviewer user or team defined.  */\n  const groupsWithoutReviewers = groups.filter(\n    (group) => Object.keys(group.reviewers).length === 0,\n  );\n  /** The overall result of the verifcation. */\n  const overallResult = allGroupConditionsValid && groupsWithoutReviewers.length === 0;\n\n  /**\n   * Overall result\n   */\n  logHeader('Overall Result');\n  if (overallResult) {\n    Log.info('PullApprove verification succeeded!');\n  } else {\n    Log.info(`PullApprove verification failed.`);\n    Log.info();\n    Log.info(`Please update '.pullapprove.yml' to ensure that all necessary`);\n    Log.info(`files/directories have owners and all patterns that appear in`);\n    Log.info(`the file correspond to actual files/directories in the repo.`);\n  }\n  /** Reviewers check */\n  logHeader(`Group Reviewers Check`);\n  if (groupsWithoutReviewers.length === 0) {\n    Log.info('All group contain at least one reviewer user or team.');\n  } else {\n    Log.info.group(\n      `Discovered ${groupsWithoutReviewers.length} group(s) without a reviewer defined`,\n    );\n    groupsWithoutReviewers.forEach((g) => Log.info(g.groupName));\n    Log.info.groupEnd();\n  }\n  /**\n   * File by file Summary\n   */\n  logHeader('PullApprove results by file');\n  Log.info.group(`Matched Files (${matchedFiles.length} files)`);\n  matchedFiles.forEach((file) => Log.debug(file));\n  Log.info.groupEnd();\n  Log.info.group(`Unmatched Files (${unmatchedFiles.length} files)`);\n  unmatchedFiles.forEach((file) => Log.info(file));\n  Log.info.groupEnd();\n  /**\n   * Group by group Summary\n   */\n  logHeader('PullApprove results by group');\n  Log.info.group(`Groups skipped (${groupsSkipped.length} groups)`);\n  groupsSkipped.forEach((group) => Log.debug(`${group.groupName}`));\n  Log.info.groupEnd();\n  const matchedGroups = resultsByGroup.filter((group) => !group.unmatchedCount);\n  Log.info.group(`Matched conditions by Group (${matchedGroups.length} groups)`);\n  matchedGroups.forEach((group) => logGroup(group, 'matchedConditions', Log.debug));\n  Log.info.groupEnd();\n  const unmatchedGroups = resultsByGroup.filter((group) => group.unmatchedCount);\n  Log.info.group(`Unmatched conditions by Group (${unmatchedGroups.length} groups)`);\n  unmatchedGroups.forEach((group) => logGroup(group, 'unmatchedConditions'));\n  Log.info.groupEnd();\n  const unverifiableConditionsInGroups = resultsByGroup.filter(\n    (group) => group.unverifiableConditions.length > 0,\n  );\n  Log.info.group(\n    `Unverifiable conditions by Group (${unverifiableConditionsInGroups.length} groups)`,\n  );\n  unverifiableConditionsInGroups.forEach((group) => logGroup(group, 'unverifiableConditions'));\n  Log.info.groupEnd();\n\n  // Provide correct exit code based on verification success.\n  process.exit(overallResult ? 0 : 1);\n}\n"]}