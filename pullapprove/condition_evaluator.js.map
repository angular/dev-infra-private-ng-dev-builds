{"version":3,"file":"condition_evaluator.js","sourceRoot":"","sources":["condition_evaluator.ts"],"names":[],"mappings":"AAQA,OAAO,EAAC,qBAAqB,EAAE,sBAAsB,EAAC,MAAM,yBAAyB,CAAC;AAItF,OAAO,EAAC,eAAe,EAAC,MAAM,YAAY,CAAC;AAC3C,OAAO,EAAC,eAAe,EAAC,MAAM,IAAI,CAAC;AASnC,MAAM,0BAA0B,GAAW,CAAC,GAAG,EAAE;IAC/C,MAAM,OAAO,GAAG;QACd,KAAK,EAAE,CAAC,KAAY,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM;QACrC,oBAAoB,EAAE,CAAC,KAA6B,EAAE,QAAkB,EAAE,EAAE;YAG1E,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1F,CAAC;KACF,CAAC;IAGF,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,QAAQ,EAAE;QACvC,GAAG,EAAE,GAAG,EAAE;YACR,MAAM,CAAC,GAAQ,IAAI,MAAM,EAAE,CAAC;YAC5B,CAAC,CAAC,UAAU,GAAG,IAAI,CAAC;YACpB,OAAO,CAAC,CAAC;QACX,CAAC;KACF,CAAC,CAAC;IAEH,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC,EAAE,CAAC;AAML,MAAM,UAAU,0BAA0B,CACxC,IAAY;IAEZ,MAAM,YAAY,GAAG;;gBAEP,uBAAuB,CAAC,IAAI,CAAC;;GAE1C,CAAC;IACF,MAAM,YAAY,GAAG,eAAe,CAAC,YAAY,EAAE,0BAA0B,CAAC,CAAC;IAE/E,OAAO,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;QACvB,MAAM,MAAM,GAAG,YAAY,CACzB,IAAI,sBAAsB,CAAC,GAAG,KAAK,CAAC,EACpC,IAAI,qBAAqB,CAAC,GAAG,MAAM,CAAC,CACrC,CAAC;QAIF,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC;YAC1B,OAAO,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC;QAC7B,CAAC;QACD,OAAO,CAAC,CAAC,MAAM,CAAC;IAClB,CAAC,CAAC;AACJ,CAAC;AAUD,SAAS,uBAAuB,CAAC,UAAkB;IACjD,OAAO,UAAU;SACd,OAAO,CAAC,4BAA4B,EAAE,kBAAkB,CAAC;SACzD,OAAO,CAAC,oBAAoB,EAAE,wCAAwC,CAAC;SACvE,OAAO,CAAC,wBAAwB,EAAE,kBAAkB,CAAC;SACrD,OAAO,CAAC,oBAAoB,EAAE,iBAAiB,CAAC;SAChD,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;AAC7B,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PullApproveGroupArray, PullApproveStringArray} from './pullapprove_arrays.js';\n\nimport {PullApproveAuthorStateDependencyError} from './condition_errors.js';\nimport {PullApproveGroup} from './group.js';\nimport {getOrCreateGlob} from './utils.js';\nimport {runInNewContext} from 'vm';\n\n/**\n * Context object that will be used as global context in condition evaluation.\n *\n * Conditions can use various helpers that PullApprove provides. We try to\n * mock them here. Consult the official docs for more details:\n * https://docs.pullapprove.com/config/conditions.\n */\nconst conditionEvaluationContext: object = (() => {\n  const context = {\n    'len': (value: any[]) => value.length,\n    'contains_any_globs': (files: PullApproveStringArray, patterns: string[]) => {\n      // Note: Do not always create globs for the same pattern again. This method\n      // could be called for each source file. Creating glob's is expensive.\n      return files.some((f) => patterns.some((pattern) => getOrCreateGlob(pattern).match(f)));\n    },\n  };\n\n  // We cannot process references to `author` in conditions.\n  Object.defineProperty(context, 'author', {\n    get: () => {\n      const x: any = new String();\n      x.matchesAny = true;\n      return x;\n    },\n  });\n\n  return context;\n})();\n\n/**\n * Converts a given condition to a function that accepts a set of files. The returned\n * function can be called to check if the set of files matches the condition.\n */\nexport function convertConditionToFunction(\n  expr: string,\n): (files: string[], groups: PullApproveGroup[]) => boolean {\n  const jsExpression = `\n    (files, groups) => {\n      return (${transformExpressionToJs(expr)});\n    }\n  `;\n  const isMatchingFn = runInNewContext(jsExpression, conditionEvaluationContext);\n\n  return (files, groups) => {\n    const result = isMatchingFn(\n      new PullApproveStringArray(...files),\n      new PullApproveGroupArray(...groups),\n    );\n\n    // If an array is returned, we consider the condition as active if the array is not\n    // empty. This matches PullApprove's condition evaluation that is based on Python.\n    if (Array.isArray(result)) {\n      return result.length !== 0;\n    }\n    return !!result;\n  };\n}\n\n/**\n * Transforms a condition expression from PullApprove that is based on python\n * so that it can be run inside JavaScript. Current transformations:\n *\n *   1. `aExpr not in bExpr` --> `!bExpr.includes(aExpr)`\n *   2. `aExpr in bExpr`     --> `bExpr.includes(aExpr`)\n *   3. `not expr`           --> `!expr`\n */\nfunction transformExpressionToJs(expression: string): string {\n  return expression\n    .replace(/^(.+)\\s+not in\\s+(\\[.+\\])$/, '!$2.includes($1)')\n    .replace(/^(.+)\\s+in\\s+(.+)$/, '$2.some(x => $1.matchesAny || $1 == x)')\n    .replace(/^(.+)\\s+not in\\s+(.+)$/, '!$2.includes($1)')\n    .replace(/^(.+)\\s+in\\s+(.+)$/, '$2.includes($1)')\n    .replace(/not\\s+/g, '!');\n}\n"]}