/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Log } from '../utils/logging.js';
/** Create logs for each pullapprove group result. */
export function logGroup(group, conditionsToPrint, printMessageFn = Log.info) {
    const conditions = group[conditionsToPrint];
    printMessageFn.group(`[${group.groupName}]`);
    if (conditions.length) {
        conditions.forEach((groupCondition) => {
            const count = groupCondition.matchedFiles.size;
            if (conditionsToPrint === 'unverifiableConditions') {
                printMessageFn(`${groupCondition.expression}`);
            }
            else {
                printMessageFn(`${count} ${count === 1 ? 'match' : 'matches'} - ${groupCondition.expression}`);
            }
        });
        printMessageFn.groupEnd();
    }
}
/** Logs a header within a text drawn box. */
export function logHeader(...params) {
    const totalWidth = 80;
    const fillWidth = totalWidth - 2;
    const headerText = params.join(' ').substr(0, fillWidth);
    const leftSpace = Math.ceil((fillWidth - headerText.length) / 2);
    const rightSpace = fillWidth - leftSpace - headerText.length;
    const fill = (count, content) => content.repeat(count);
    Log.info(`┌${fill(fillWidth, '─')}┐`);
    Log.info(`│${fill(leftSpace, ' ')}${headerText}${fill(rightSpace, ' ')}│`);
    Log.info(`└${fill(fillWidth, '─')}┘`);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2luZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL25nLWRldi9wdWxsYXBwcm92ZS9sb2dnaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQVF4QyxxREFBcUQ7QUFDckQsTUFBTSxVQUFVLFFBQVEsQ0FDdEIsS0FBNkIsRUFDN0IsaUJBQW9DLEVBQ3BDLGNBQWMsR0FBRyxHQUFHLENBQUMsSUFBSTtJQUV6QixNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUM1QyxjQUFjLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDN0MsSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDdEIsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLGNBQWMsRUFBRSxFQUFFO1lBQ3BDLE1BQU0sS0FBSyxHQUFHLGNBQWMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO1lBQy9DLElBQUksaUJBQWlCLEtBQUssd0JBQXdCLEVBQUUsQ0FBQztnQkFDbkQsY0FBYyxDQUFDLEdBQUcsY0FBYyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7WUFDakQsQ0FBQztpQkFBTSxDQUFDO2dCQUNOLGNBQWMsQ0FDWixHQUFHLEtBQUssSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVMsTUFBTSxjQUFjLENBQUMsVUFBVSxFQUFFLENBQy9FLENBQUM7WUFDSixDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxjQUFjLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDNUIsQ0FBQztBQUNILENBQUM7QUFFRCw2Q0FBNkM7QUFDN0MsTUFBTSxVQUFVLFNBQVMsQ0FBQyxHQUFHLE1BQWdCO0lBQzNDLE1BQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQztJQUN0QixNQUFNLFNBQVMsR0FBRyxVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBQ2pDLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUN6RCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNqRSxNQUFNLFVBQVUsR0FBRyxTQUFTLEdBQUcsU0FBUyxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUM7SUFDN0QsTUFBTSxJQUFJLEdBQUcsQ0FBQyxLQUFhLEVBQUUsT0FBZSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXZFLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN0QyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsR0FBRyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDM0UsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3hDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQ1xuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtMb2d9IGZyb20gJy4uL3V0aWxzL2xvZ2dpbmcuanMnO1xuaW1wb3J0IHtQdWxsQXBwcm92ZUdyb3VwUmVzdWx0fSBmcm9tICcuL2dyb3VwLmpzJztcblxudHlwZSBDb25kaXRpb25Hcm91cGluZyA9IGtleW9mIFBpY2s8XG4gIFB1bGxBcHByb3ZlR3JvdXBSZXN1bHQsXG4gICdtYXRjaGVkQ29uZGl0aW9ucycgfCAndW5tYXRjaGVkQ29uZGl0aW9ucycgfCAndW52ZXJpZmlhYmxlQ29uZGl0aW9ucydcbj47XG5cbi8qKiBDcmVhdGUgbG9ncyBmb3IgZWFjaCBwdWxsYXBwcm92ZSBncm91cCByZXN1bHQuICovXG5leHBvcnQgZnVuY3Rpb24gbG9nR3JvdXAoXG4gIGdyb3VwOiBQdWxsQXBwcm92ZUdyb3VwUmVzdWx0LFxuICBjb25kaXRpb25zVG9QcmludDogQ29uZGl0aW9uR3JvdXBpbmcsXG4gIHByaW50TWVzc2FnZUZuID0gTG9nLmluZm8sXG4pIHtcbiAgY29uc3QgY29uZGl0aW9ucyA9IGdyb3VwW2NvbmRpdGlvbnNUb1ByaW50XTtcbiAgcHJpbnRNZXNzYWdlRm4uZ3JvdXAoYFske2dyb3VwLmdyb3VwTmFtZX1dYCk7XG4gIGlmIChjb25kaXRpb25zLmxlbmd0aCkge1xuICAgIGNvbmRpdGlvbnMuZm9yRWFjaCgoZ3JvdXBDb25kaXRpb24pID0+IHtcbiAgICAgIGNvbnN0IGNvdW50ID0gZ3JvdXBDb25kaXRpb24ubWF0Y2hlZEZpbGVzLnNpemU7XG4gICAgICBpZiAoY29uZGl0aW9uc1RvUHJpbnQgPT09ICd1bnZlcmlmaWFibGVDb25kaXRpb25zJykge1xuICAgICAgICBwcmludE1lc3NhZ2VGbihgJHtncm91cENvbmRpdGlvbi5leHByZXNzaW9ufWApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJpbnRNZXNzYWdlRm4oXG4gICAgICAgICAgYCR7Y291bnR9ICR7Y291bnQgPT09IDEgPyAnbWF0Y2gnIDogJ21hdGNoZXMnfSAtICR7Z3JvdXBDb25kaXRpb24uZXhwcmVzc2lvbn1gLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHByaW50TWVzc2FnZUZuLmdyb3VwRW5kKCk7XG4gIH1cbn1cblxuLyoqIExvZ3MgYSBoZWFkZXIgd2l0aGluIGEgdGV4dCBkcmF3biBib3guICovXG5leHBvcnQgZnVuY3Rpb24gbG9nSGVhZGVyKC4uLnBhcmFtczogc3RyaW5nW10pIHtcbiAgY29uc3QgdG90YWxXaWR0aCA9IDgwO1xuICBjb25zdCBmaWxsV2lkdGggPSB0b3RhbFdpZHRoIC0gMjtcbiAgY29uc3QgaGVhZGVyVGV4dCA9IHBhcmFtcy5qb2luKCcgJykuc3Vic3RyKDAsIGZpbGxXaWR0aCk7XG4gIGNvbnN0IGxlZnRTcGFjZSA9IE1hdGguY2VpbCgoZmlsbFdpZHRoIC0gaGVhZGVyVGV4dC5sZW5ndGgpIC8gMik7XG4gIGNvbnN0IHJpZ2h0U3BhY2UgPSBmaWxsV2lkdGggLSBsZWZ0U3BhY2UgLSBoZWFkZXJUZXh0Lmxlbmd0aDtcbiAgY29uc3QgZmlsbCA9IChjb3VudDogbnVtYmVyLCBjb250ZW50OiBzdHJpbmcpID0+IGNvbnRlbnQucmVwZWF0KGNvdW50KTtcblxuICBMb2cuaW5mbyhg4pSMJHtmaWxsKGZpbGxXaWR0aCwgJ+KUgCcpfeKUkGApO1xuICBMb2cuaW5mbyhg4pSCJHtmaWxsKGxlZnRTcGFjZSwgJyAnKX0ke2hlYWRlclRleHR9JHtmaWxsKHJpZ2h0U3BhY2UsICcgJyl94pSCYCk7XG4gIExvZy5pbmZvKGDilJQke2ZpbGwoZmlsbFdpZHRoLCAn4pSAJyl94pSYYCk7XG59XG4iXX0=