{"version":3,"file":"utils.js","sourceRoot":"","sources":["utils.ts"],"names":[],"mappings":"AAOA,OAAO,EAAC,SAAS,EAAC,MAAM,WAAW,CAAC;AAGpC,MAAM,YAAY,GAAG,IAAI,GAAG,EAAqB,CAAC;AAMlD,MAAM,UAAU,eAAe,CAAC,OAAe;IAC7C,IAAI,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC;QAC9B,OAAO,YAAY,CAAC,GAAG,CAAC,OAAO,CAAE,CAAC;IACpC,CAAC;IACD,MAAM,IAAI,GAAG,IAAI,SAAS,CAAC,OAAO,EAAE,EAAC,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAC,CAAC,CAAC;IAClE,YAAY,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAChC,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Minimatch} from 'minimatch';\n\n/** Map that holds patterns and their corresponding Minimatch globs. */\nconst patternCache = new Map<string, Minimatch>();\n\n/**\n * Gets a glob for the given pattern. The cached glob will be returned\n * if available. Otherwise a new glob will be created and cached.\n */\nexport function getOrCreateGlob(pattern: string) {\n  if (patternCache.has(pattern)) {\n    return patternCache.get(pattern)!;\n  }\n  const glob = new Minimatch(pattern, {dot: false, nobrace: false});\n  patternCache.set(pattern, glob);\n  return glob;\n}\n"]}