/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { readFileSync } from 'fs';
import { resolve } from 'path';
import { Log } from '../utils/logging.js';
import { GitClient } from '../utils/git/git-client.js';
import { logGroup, logHeader } from './logging.js';
import { getGroupsFromYaml } from './parse-yaml.js';
export async function verify() {
    const git = await GitClient.get();
    /** Full path to PullApprove config file */
    const PULL_APPROVE_YAML_PATH = resolve(git.baseDir, '.pullapprove.yml');
    /** All tracked files in the repository. */
    const REPO_FILES = git.allFiles();
    /** The pull approve config file. */
    const pullApproveYamlRaw = readFileSync(PULL_APPROVE_YAML_PATH, 'utf8');
    /** All of the groups defined in the pullapprove yaml. */
    const groups = getGroupsFromYaml(pullApproveYamlRaw);
    /**
     * PullApprove groups without conditions. These are skipped in the verification
     * as those would always be active and cause zero unmatched files.
     */
    const groupsSkipped = groups.filter((group) => !group.conditions.length);
    /** PullApprove groups with conditions. */
    const groupsWithConditions = groups.filter((group) => !!group.conditions.length);
    /** Files which are matched by at least one group. */
    const matchedFiles = [];
    /** Files which are not matched by at least one group. */
    const unmatchedFiles = [];
    // Test each file in the repo against each group for being matched.
    REPO_FILES.forEach((file) => {
        if (groupsWithConditions.filter((group) => group.testFile(file)).length) {
            matchedFiles.push(file);
        }
        else {
            unmatchedFiles.push(file);
        }
    });
    /** Results for each group */
    const resultsByGroup = groupsWithConditions.map((group) => group.getResults());
    /**
     * Whether all group condition lines match at least one file and all files
     * are matched by at least one group.
     */
    const allGroupConditionsValid = resultsByGroup.every((r) => !r.unmatchedCount) && !unmatchedFiles.length;
    /** Whether all groups have at least one reviewer user or team defined.  */
    const groupsWithoutReviewers = groups.filter((group) => Object.keys(group.reviewers).length === 0);
    /** The overall result of the verifcation. */
    const overallResult = allGroupConditionsValid && groupsWithoutReviewers.length === 0;
    /**
     * Overall result
     */
    logHeader('Overall Result');
    if (overallResult) {
        Log.info('PullApprove verification succeeded!');
    }
    else {
        Log.info(`PullApprove verification failed.`);
        Log.info();
        Log.info(`Please update '.pullapprove.yml' to ensure that all necessary`);
        Log.info(`files/directories have owners and all patterns that appear in`);
        Log.info(`the file correspond to actual files/directories in the repo.`);
    }
    /** Reviewers check */
    logHeader(`Group Reviewers Check`);
    if (groupsWithoutReviewers.length === 0) {
        Log.info('All group contain at least one reviewer user or team.');
    }
    else {
        Log.info.group(`Discovered ${groupsWithoutReviewers.length} group(s) without a reviewer defined`);
        groupsWithoutReviewers.forEach((g) => Log.info(g.groupName));
        Log.info.groupEnd();
    }
    /**
     * File by file Summary
     */
    logHeader('PullApprove results by file');
    Log.info.group(`Matched Files (${matchedFiles.length} files)`);
    matchedFiles.forEach((file) => Log.debug(file));
    Log.info.groupEnd();
    Log.info.group(`Unmatched Files (${unmatchedFiles.length} files)`);
    unmatchedFiles.forEach((file) => Log.info(file));
    Log.info.groupEnd();
    /**
     * Group by group Summary
     */
    logHeader('PullApprove results by group');
    Log.info.group(`Groups skipped (${groupsSkipped.length} groups)`);
    groupsSkipped.forEach((group) => Log.debug(`${group.groupName}`));
    Log.info.groupEnd();
    const matchedGroups = resultsByGroup.filter((group) => !group.unmatchedCount);
    Log.info.group(`Matched conditions by Group (${matchedGroups.length} groups)`);
    matchedGroups.forEach((group) => logGroup(group, 'matchedConditions', Log.debug));
    Log.info.groupEnd();
    const unmatchedGroups = resultsByGroup.filter((group) => group.unmatchedCount);
    Log.info.group(`Unmatched conditions by Group (${unmatchedGroups.length} groups)`);
    unmatchedGroups.forEach((group) => logGroup(group, 'unmatchedConditions'));
    Log.info.groupEnd();
    const unverifiableConditionsInGroups = resultsByGroup.filter((group) => group.unverifiableConditions.length > 0);
    Log.info.group(`Unverifiable conditions by Group (${unverifiableConditionsInGroups.length} groups)`);
    unverifiableConditionsInGroups.forEach((group) => logGroup(group, 'unverifiableConditions'));
    Log.info.groupEnd();
    // Provide correct exit code based on verification success.
    process.exit(overallResult ? 0 : 1);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyaWZ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbmctZGV2L3B1bGxhcHByb3ZlL3ZlcmlmeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFDSCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sSUFBSSxDQUFDO0FBQ2hDLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFFN0IsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQ3hDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQztBQUNyRCxPQUFPLEVBQUMsUUFBUSxFQUFFLFNBQVMsRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUNqRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUVsRCxNQUFNLENBQUMsS0FBSyxVQUFVLE1BQU07SUFDMUIsTUFBTSxHQUFHLEdBQUcsTUFBTSxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDbEMsMkNBQTJDO0lBQzNDLE1BQU0sc0JBQXNCLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztJQUN4RSwyQ0FBMkM7SUFDM0MsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2xDLG9DQUFvQztJQUNwQyxNQUFNLGtCQUFrQixHQUFHLFlBQVksQ0FBQyxzQkFBc0IsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN4RSx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsaUJBQWlCLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUNyRDs7O09BR0c7SUFDSCxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDekUsMENBQTBDO0lBQzFDLE1BQU0sb0JBQW9CLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDakYscURBQXFEO0lBQ3JELE1BQU0sWUFBWSxHQUFhLEVBQUUsQ0FBQztJQUNsQyx5REFBeUQ7SUFDekQsTUFBTSxjQUFjLEdBQWEsRUFBRSxDQUFDO0lBRXBDLG1FQUFtRTtJQUNuRSxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBWSxFQUFFLEVBQUU7UUFDbEMsSUFBSSxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUN4RSxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFCLENBQUM7YUFBTSxDQUFDO1lBQ04sY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QixDQUFDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDSCw2QkFBNkI7SUFDN0IsTUFBTSxjQUFjLEdBQUcsb0JBQW9CLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUMvRTs7O09BR0c7SUFDSCxNQUFNLHVCQUF1QixHQUMzQixjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUM7SUFDM0UsMkVBQTJFO0lBQzNFLE1BQU0sc0JBQXNCLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FDMUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQ3JELENBQUM7SUFDRiw2Q0FBNkM7SUFDN0MsTUFBTSxhQUFhLEdBQUcsdUJBQXVCLElBQUksc0JBQXNCLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztJQUVyRjs7T0FFRztJQUNILFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzVCLElBQUksYUFBYSxFQUFFLENBQUM7UUFDbEIsR0FBRyxDQUFDLElBQUksQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO0lBQ2xELENBQUM7U0FBTSxDQUFDO1FBQ04sR0FBRyxDQUFDLElBQUksQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO1FBQzdDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNYLEdBQUcsQ0FBQyxJQUFJLENBQUMsK0RBQStELENBQUMsQ0FBQztRQUMxRSxHQUFHLENBQUMsSUFBSSxDQUFDLCtEQUErRCxDQUFDLENBQUM7UUFDMUUsR0FBRyxDQUFDLElBQUksQ0FBQyw4REFBOEQsQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFDRCxzQkFBc0I7SUFDdEIsU0FBUyxDQUFDLHVCQUF1QixDQUFDLENBQUM7SUFDbkMsSUFBSSxzQkFBc0IsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDeEMsR0FBRyxDQUFDLElBQUksQ0FBQyx1REFBdUQsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7U0FBTSxDQUFDO1FBQ04sR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQ1osY0FBYyxzQkFBc0IsQ0FBQyxNQUFNLHNDQUFzQyxDQUNsRixDQUFDO1FBQ0Ysc0JBQXNCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQzdELEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUNEOztPQUVHO0lBQ0gsU0FBUyxDQUFDLDZCQUE2QixDQUFDLENBQUM7SUFDekMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLFlBQVksQ0FBQyxNQUFNLFNBQVMsQ0FBQyxDQUFDO0lBQy9ELFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNoRCxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3BCLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLG9CQUFvQixjQUFjLENBQUMsTUFBTSxTQUFTLENBQUMsQ0FBQztJQUNuRSxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDakQsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNwQjs7T0FFRztJQUNILFNBQVMsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0lBQzFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLG1CQUFtQixhQUFhLENBQUMsTUFBTSxVQUFVLENBQUMsQ0FBQztJQUNsRSxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNsRSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3BCLE1BQU0sYUFBYSxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzlFLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxhQUFhLENBQUMsTUFBTSxVQUFVLENBQUMsQ0FBQztJQUMvRSxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLG1CQUFtQixFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ2xGLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDcEIsTUFBTSxlQUFlLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQy9FLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGtDQUFrQyxlQUFlLENBQUMsTUFBTSxVQUFVLENBQUMsQ0FBQztJQUNuRixlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLHFCQUFxQixDQUFDLENBQUMsQ0FBQztJQUMzRSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3BCLE1BQU0sOEJBQThCLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FDMUQsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUNuRCxDQUFDO0lBQ0YsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQ1oscUNBQXFDLDhCQUE4QixDQUFDLE1BQU0sVUFBVSxDQUNyRixDQUFDO0lBQ0YsOEJBQThCLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLHdCQUF3QixDQUFDLENBQUMsQ0FBQztJQUM3RixHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBRXBCLDJEQUEyRDtJQUMzRCxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTENcbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQge3JlYWRGaWxlU3luY30gZnJvbSAnZnMnO1xuaW1wb3J0IHtyZXNvbHZlfSBmcm9tICdwYXRoJztcblxuaW1wb3J0IHtMb2d9IGZyb20gJy4uL3V0aWxzL2xvZ2dpbmcuanMnO1xuaW1wb3J0IHtHaXRDbGllbnR9IGZyb20gJy4uL3V0aWxzL2dpdC9naXQtY2xpZW50LmpzJztcbmltcG9ydCB7bG9nR3JvdXAsIGxvZ0hlYWRlcn0gZnJvbSAnLi9sb2dnaW5nLmpzJztcbmltcG9ydCB7Z2V0R3JvdXBzRnJvbVlhbWx9IGZyb20gJy4vcGFyc2UteWFtbC5qcyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB2ZXJpZnkoKSB7XG4gIGNvbnN0IGdpdCA9IGF3YWl0IEdpdENsaWVudC5nZXQoKTtcbiAgLyoqIEZ1bGwgcGF0aCB0byBQdWxsQXBwcm92ZSBjb25maWcgZmlsZSAqL1xuICBjb25zdCBQVUxMX0FQUFJPVkVfWUFNTF9QQVRIID0gcmVzb2x2ZShnaXQuYmFzZURpciwgJy5wdWxsYXBwcm92ZS55bWwnKTtcbiAgLyoqIEFsbCB0cmFja2VkIGZpbGVzIGluIHRoZSByZXBvc2l0b3J5LiAqL1xuICBjb25zdCBSRVBPX0ZJTEVTID0gZ2l0LmFsbEZpbGVzKCk7XG4gIC8qKiBUaGUgcHVsbCBhcHByb3ZlIGNvbmZpZyBmaWxlLiAqL1xuICBjb25zdCBwdWxsQXBwcm92ZVlhbWxSYXcgPSByZWFkRmlsZVN5bmMoUFVMTF9BUFBST1ZFX1lBTUxfUEFUSCwgJ3V0ZjgnKTtcbiAgLyoqIEFsbCBvZiB0aGUgZ3JvdXBzIGRlZmluZWQgaW4gdGhlIHB1bGxhcHByb3ZlIHlhbWwuICovXG4gIGNvbnN0IGdyb3VwcyA9IGdldEdyb3Vwc0Zyb21ZYW1sKHB1bGxBcHByb3ZlWWFtbFJhdyk7XG4gIC8qKlxuICAgKiBQdWxsQXBwcm92ZSBncm91cHMgd2l0aG91dCBjb25kaXRpb25zLiBUaGVzZSBhcmUgc2tpcHBlZCBpbiB0aGUgdmVyaWZpY2F0aW9uXG4gICAqIGFzIHRob3NlIHdvdWxkIGFsd2F5cyBiZSBhY3RpdmUgYW5kIGNhdXNlIHplcm8gdW5tYXRjaGVkIGZpbGVzLlxuICAgKi9cbiAgY29uc3QgZ3JvdXBzU2tpcHBlZCA9IGdyb3Vwcy5maWx0ZXIoKGdyb3VwKSA9PiAhZ3JvdXAuY29uZGl0aW9ucy5sZW5ndGgpO1xuICAvKiogUHVsbEFwcHJvdmUgZ3JvdXBzIHdpdGggY29uZGl0aW9ucy4gKi9cbiAgY29uc3QgZ3JvdXBzV2l0aENvbmRpdGlvbnMgPSBncm91cHMuZmlsdGVyKChncm91cCkgPT4gISFncm91cC5jb25kaXRpb25zLmxlbmd0aCk7XG4gIC8qKiBGaWxlcyB3aGljaCBhcmUgbWF0Y2hlZCBieSBhdCBsZWFzdCBvbmUgZ3JvdXAuICovXG4gIGNvbnN0IG1hdGNoZWRGaWxlczogc3RyaW5nW10gPSBbXTtcbiAgLyoqIEZpbGVzIHdoaWNoIGFyZSBub3QgbWF0Y2hlZCBieSBhdCBsZWFzdCBvbmUgZ3JvdXAuICovXG4gIGNvbnN0IHVubWF0Y2hlZEZpbGVzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIC8vIFRlc3QgZWFjaCBmaWxlIGluIHRoZSByZXBvIGFnYWluc3QgZWFjaCBncm91cCBmb3IgYmVpbmcgbWF0Y2hlZC5cbiAgUkVQT19GSUxFUy5mb3JFYWNoKChmaWxlOiBzdHJpbmcpID0+IHtcbiAgICBpZiAoZ3JvdXBzV2l0aENvbmRpdGlvbnMuZmlsdGVyKChncm91cCkgPT4gZ3JvdXAudGVzdEZpbGUoZmlsZSkpLmxlbmd0aCkge1xuICAgICAgbWF0Y2hlZEZpbGVzLnB1c2goZmlsZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVubWF0Y2hlZEZpbGVzLnB1c2goZmlsZSk7XG4gICAgfVxuICB9KTtcbiAgLyoqIFJlc3VsdHMgZm9yIGVhY2ggZ3JvdXAgKi9cbiAgY29uc3QgcmVzdWx0c0J5R3JvdXAgPSBncm91cHNXaXRoQ29uZGl0aW9ucy5tYXAoKGdyb3VwKSA9PiBncm91cC5nZXRSZXN1bHRzKCkpO1xuICAvKipcbiAgICogV2hldGhlciBhbGwgZ3JvdXAgY29uZGl0aW9uIGxpbmVzIG1hdGNoIGF0IGxlYXN0IG9uZSBmaWxlIGFuZCBhbGwgZmlsZXNcbiAgICogYXJlIG1hdGNoZWQgYnkgYXQgbGVhc3Qgb25lIGdyb3VwLlxuICAgKi9cbiAgY29uc3QgYWxsR3JvdXBDb25kaXRpb25zVmFsaWQgPVxuICAgIHJlc3VsdHNCeUdyb3VwLmV2ZXJ5KChyKSA9PiAhci51bm1hdGNoZWRDb3VudCkgJiYgIXVubWF0Y2hlZEZpbGVzLmxlbmd0aDtcbiAgLyoqIFdoZXRoZXIgYWxsIGdyb3VwcyBoYXZlIGF0IGxlYXN0IG9uZSByZXZpZXdlciB1c2VyIG9yIHRlYW0gZGVmaW5lZC4gICovXG4gIGNvbnN0IGdyb3Vwc1dpdGhvdXRSZXZpZXdlcnMgPSBncm91cHMuZmlsdGVyKFxuICAgIChncm91cCkgPT4gT2JqZWN0LmtleXMoZ3JvdXAucmV2aWV3ZXJzKS5sZW5ndGggPT09IDAsXG4gICk7XG4gIC8qKiBUaGUgb3ZlcmFsbCByZXN1bHQgb2YgdGhlIHZlcmlmY2F0aW9uLiAqL1xuICBjb25zdCBvdmVyYWxsUmVzdWx0ID0gYWxsR3JvdXBDb25kaXRpb25zVmFsaWQgJiYgZ3JvdXBzV2l0aG91dFJldmlld2Vycy5sZW5ndGggPT09IDA7XG5cbiAgLyoqXG4gICAqIE92ZXJhbGwgcmVzdWx0XG4gICAqL1xuICBsb2dIZWFkZXIoJ092ZXJhbGwgUmVzdWx0Jyk7XG4gIGlmIChvdmVyYWxsUmVzdWx0KSB7XG4gICAgTG9nLmluZm8oJ1B1bGxBcHByb3ZlIHZlcmlmaWNhdGlvbiBzdWNjZWVkZWQhJyk7XG4gIH0gZWxzZSB7XG4gICAgTG9nLmluZm8oYFB1bGxBcHByb3ZlIHZlcmlmaWNhdGlvbiBmYWlsZWQuYCk7XG4gICAgTG9nLmluZm8oKTtcbiAgICBMb2cuaW5mbyhgUGxlYXNlIHVwZGF0ZSAnLnB1bGxhcHByb3ZlLnltbCcgdG8gZW5zdXJlIHRoYXQgYWxsIG5lY2Vzc2FyeWApO1xuICAgIExvZy5pbmZvKGBmaWxlcy9kaXJlY3RvcmllcyBoYXZlIG93bmVycyBhbmQgYWxsIHBhdHRlcm5zIHRoYXQgYXBwZWFyIGluYCk7XG4gICAgTG9nLmluZm8oYHRoZSBmaWxlIGNvcnJlc3BvbmQgdG8gYWN0dWFsIGZpbGVzL2RpcmVjdG9yaWVzIGluIHRoZSByZXBvLmApO1xuICB9XG4gIC8qKiBSZXZpZXdlcnMgY2hlY2sgKi9cbiAgbG9nSGVhZGVyKGBHcm91cCBSZXZpZXdlcnMgQ2hlY2tgKTtcbiAgaWYgKGdyb3Vwc1dpdGhvdXRSZXZpZXdlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgTG9nLmluZm8oJ0FsbCBncm91cCBjb250YWluIGF0IGxlYXN0IG9uZSByZXZpZXdlciB1c2VyIG9yIHRlYW0uJyk7XG4gIH0gZWxzZSB7XG4gICAgTG9nLmluZm8uZ3JvdXAoXG4gICAgICBgRGlzY292ZXJlZCAke2dyb3Vwc1dpdGhvdXRSZXZpZXdlcnMubGVuZ3RofSBncm91cChzKSB3aXRob3V0IGEgcmV2aWV3ZXIgZGVmaW5lZGAsXG4gICAgKTtcbiAgICBncm91cHNXaXRob3V0UmV2aWV3ZXJzLmZvckVhY2goKGcpID0+IExvZy5pbmZvKGcuZ3JvdXBOYW1lKSk7XG4gICAgTG9nLmluZm8uZ3JvdXBFbmQoKTtcbiAgfVxuICAvKipcbiAgICogRmlsZSBieSBmaWxlIFN1bW1hcnlcbiAgICovXG4gIGxvZ0hlYWRlcignUHVsbEFwcHJvdmUgcmVzdWx0cyBieSBmaWxlJyk7XG4gIExvZy5pbmZvLmdyb3VwKGBNYXRjaGVkIEZpbGVzICgke21hdGNoZWRGaWxlcy5sZW5ndGh9IGZpbGVzKWApO1xuICBtYXRjaGVkRmlsZXMuZm9yRWFjaCgoZmlsZSkgPT4gTG9nLmRlYnVnKGZpbGUpKTtcbiAgTG9nLmluZm8uZ3JvdXBFbmQoKTtcbiAgTG9nLmluZm8uZ3JvdXAoYFVubWF0Y2hlZCBGaWxlcyAoJHt1bm1hdGNoZWRGaWxlcy5sZW5ndGh9IGZpbGVzKWApO1xuICB1bm1hdGNoZWRGaWxlcy5mb3JFYWNoKChmaWxlKSA9PiBMb2cuaW5mbyhmaWxlKSk7XG4gIExvZy5pbmZvLmdyb3VwRW5kKCk7XG4gIC8qKlxuICAgKiBHcm91cCBieSBncm91cCBTdW1tYXJ5XG4gICAqL1xuICBsb2dIZWFkZXIoJ1B1bGxBcHByb3ZlIHJlc3VsdHMgYnkgZ3JvdXAnKTtcbiAgTG9nLmluZm8uZ3JvdXAoYEdyb3VwcyBza2lwcGVkICgke2dyb3Vwc1NraXBwZWQubGVuZ3RofSBncm91cHMpYCk7XG4gIGdyb3Vwc1NraXBwZWQuZm9yRWFjaCgoZ3JvdXApID0+IExvZy5kZWJ1ZyhgJHtncm91cC5ncm91cE5hbWV9YCkpO1xuICBMb2cuaW5mby5ncm91cEVuZCgpO1xuICBjb25zdCBtYXRjaGVkR3JvdXBzID0gcmVzdWx0c0J5R3JvdXAuZmlsdGVyKChncm91cCkgPT4gIWdyb3VwLnVubWF0Y2hlZENvdW50KTtcbiAgTG9nLmluZm8uZ3JvdXAoYE1hdGNoZWQgY29uZGl0aW9ucyBieSBHcm91cCAoJHttYXRjaGVkR3JvdXBzLmxlbmd0aH0gZ3JvdXBzKWApO1xuICBtYXRjaGVkR3JvdXBzLmZvckVhY2goKGdyb3VwKSA9PiBsb2dHcm91cChncm91cCwgJ21hdGNoZWRDb25kaXRpb25zJywgTG9nLmRlYnVnKSk7XG4gIExvZy5pbmZvLmdyb3VwRW5kKCk7XG4gIGNvbnN0IHVubWF0Y2hlZEdyb3VwcyA9IHJlc3VsdHNCeUdyb3VwLmZpbHRlcigoZ3JvdXApID0+IGdyb3VwLnVubWF0Y2hlZENvdW50KTtcbiAgTG9nLmluZm8uZ3JvdXAoYFVubWF0Y2hlZCBjb25kaXRpb25zIGJ5IEdyb3VwICgke3VubWF0Y2hlZEdyb3Vwcy5sZW5ndGh9IGdyb3VwcylgKTtcbiAgdW5tYXRjaGVkR3JvdXBzLmZvckVhY2goKGdyb3VwKSA9PiBsb2dHcm91cChncm91cCwgJ3VubWF0Y2hlZENvbmRpdGlvbnMnKSk7XG4gIExvZy5pbmZvLmdyb3VwRW5kKCk7XG4gIGNvbnN0IHVudmVyaWZpYWJsZUNvbmRpdGlvbnNJbkdyb3VwcyA9IHJlc3VsdHNCeUdyb3VwLmZpbHRlcihcbiAgICAoZ3JvdXApID0+IGdyb3VwLnVudmVyaWZpYWJsZUNvbmRpdGlvbnMubGVuZ3RoID4gMCxcbiAgKTtcbiAgTG9nLmluZm8uZ3JvdXAoXG4gICAgYFVudmVyaWZpYWJsZSBjb25kaXRpb25zIGJ5IEdyb3VwICgke3VudmVyaWZpYWJsZUNvbmRpdGlvbnNJbkdyb3Vwcy5sZW5ndGh9IGdyb3VwcylgLFxuICApO1xuICB1bnZlcmlmaWFibGVDb25kaXRpb25zSW5Hcm91cHMuZm9yRWFjaCgoZ3JvdXApID0+IGxvZ0dyb3VwKGdyb3VwLCAndW52ZXJpZmlhYmxlQ29uZGl0aW9ucycpKTtcbiAgTG9nLmluZm8uZ3JvdXBFbmQoKTtcblxuICAvLyBQcm92aWRlIGNvcnJlY3QgZXhpdCBjb2RlIGJhc2VkIG9uIHZlcmlmaWNhdGlvbiBzdWNjZXNzLlxuICBwcm9jZXNzLmV4aXQob3ZlcmFsbFJlc3VsdCA/IDAgOiAxKTtcbn1cbiJdfQ==