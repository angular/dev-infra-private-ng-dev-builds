{"version":3,"file":"logging.js","sourceRoot":"","sources":["logging.ts"],"names":[],"mappings":"AAQA,OAAO,EAAC,GAAG,EAAC,MAAM,qBAAqB,CAAC;AASxC,MAAM,UAAU,QAAQ,CACtB,KAA6B,EAC7B,iBAAoC,EACpC,cAAc,GAAG,GAAG,CAAC,IAAI;IAEzB,MAAM,UAAU,GAAG,KAAK,CAAC,iBAAiB,CAAC,CAAC;IAC5C,cAAc,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC;IAC7C,IAAI,UAAU,CAAC,MAAM,EAAE,CAAC;QACtB,UAAU,CAAC,OAAO,CAAC,CAAC,cAAc,EAAE,EAAE;YACpC,MAAM,KAAK,GAAG,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC;YAC/C,IAAI,iBAAiB,KAAK,wBAAwB,EAAE,CAAC;gBACnD,cAAc,CAAC,GAAG,cAAc,CAAC,UAAU,EAAE,CAAC,CAAC;YACjD,CAAC;iBAAM,CAAC;gBACN,cAAc,CACZ,GAAG,KAAK,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,MAAM,cAAc,CAAC,UAAU,EAAE,CAC/E,CAAC;YACJ,CAAC;QACH,CAAC,CAAC,CAAC;QACH,cAAc,CAAC,QAAQ,EAAE,CAAC;IAC5B,CAAC;AACH,CAAC;AAGD,MAAM,UAAU,SAAS,CAAC,GAAG,MAAgB;IAC3C,MAAM,UAAU,GAAG,EAAE,CAAC;IACtB,MAAM,SAAS,GAAG,UAAU,GAAG,CAAC,CAAC;IACjC,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;IACzD,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,SAAS,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;IACjE,MAAM,UAAU,GAAG,SAAS,GAAG,SAAS,GAAG,UAAU,CAAC,MAAM,CAAC;IAC7D,MAAM,IAAI,GAAG,CAAC,KAAa,EAAE,OAAe,EAAE,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAEvE,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;IACtC,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,GAAG,UAAU,GAAG,IAAI,CAAC,UAAU,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;IAC3E,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;AACxC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Log} from '../utils/logging.js';\nimport {PullApproveGroupResult} from './group.js';\n\ntype ConditionGrouping = keyof Pick<\n  PullApproveGroupResult,\n  'matchedConditions' | 'unmatchedConditions' | 'unverifiableConditions'\n>;\n\n/** Create logs for each pullapprove group result. */\nexport function logGroup(\n  group: PullApproveGroupResult,\n  conditionsToPrint: ConditionGrouping,\n  printMessageFn = Log.info,\n) {\n  const conditions = group[conditionsToPrint];\n  printMessageFn.group(`[${group.groupName}]`);\n  if (conditions.length) {\n    conditions.forEach((groupCondition) => {\n      const count = groupCondition.matchedFiles.size;\n      if (conditionsToPrint === 'unverifiableConditions') {\n        printMessageFn(`${groupCondition.expression}`);\n      } else {\n        printMessageFn(\n          `${count} ${count === 1 ? 'match' : 'matches'} - ${groupCondition.expression}`,\n        );\n      }\n    });\n    printMessageFn.groupEnd();\n  }\n}\n\n/** Logs a header within a text drawn box. */\nexport function logHeader(...params: string[]) {\n  const totalWidth = 80;\n  const fillWidth = totalWidth - 2;\n  const headerText = params.join(' ').substr(0, fillWidth);\n  const leftSpace = Math.ceil((fillWidth - headerText.length) / 2);\n  const rightSpace = fillWidth - leftSpace - headerText.length;\n  const fill = (count: number, content: string) => content.repeat(count);\n\n  Log.info(`┌${fill(fillWidth, '─')}┐`);\n  Log.info(`│${fill(leftSpace, ' ')}${headerText}${fill(rightSpace, ' ')}│`);\n  Log.info(`└${fill(fillWidth, '─')}┘`);\n}\n"]}