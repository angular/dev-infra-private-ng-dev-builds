{"version":3,"file":"group.js","sourceRoot":"","sources":["group.ts"],"names":[],"mappings":"AAQA,OAAO,EACL,qCAAqC,EACrC,oCAAoC,GACrC,MAAM,uBAAuB,CAAC;AAG/B,OAAO,EAAC,0BAA0B,EAAC,MAAM,0BAA0B,CAAC;AACpE,OAAO,EAAC,GAAG,EAAC,MAAM,qBAAqB,CAAC;AA0BxC,MAAM,OAAO,gBAAgB;IAM3B,YACS,SAAiB,EACxB,MAA8B,EACrB,kBAAsC,EAAE;QAF1C,cAAS,GAAT,SAAS,CAAQ;QAEf,oBAAe,GAAf,eAAe,CAAyB;QAP1C,eAAU,GAAqB,EAAE,CAAC;QASzC,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;QAChC,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,IAAI,EAAC,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAC,CAAC;IAC9D,CAAC;IAEO,kBAAkB,CAAC,MAA8B;QACvD,IAAI,MAAM,CAAC,UAAU,EAAE,CAAC;YACtB,OAAO,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE;gBAC7C,MAAM,UAAU,GAAG,SAAS,CAAC,IAAI,EAAE,CAAC;gBAEpC,IAAI,CAAC;oBACH,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;wBACnB,UAAU;wBACV,OAAO,EAAE,0BAA0B,CAAC,UAAU,CAAC;wBAC/C,YAAY,EAAE,IAAI,GAAG,EAAE;wBACvB,YAAY,EAAE,KAAK;qBACpB,CAAC,CAAC;gBACL,CAAC;gBAAC,OAAO,CAAC,EAAE,CAAC;oBACX,GAAG,CAAC,KAAK,CAAC,uCAAuC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;oBACnE,GAAG,CAAC,KAAK,CAAC,MAAM,UAAU,EAAE,CAAC,CAAC;oBAC9B,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;oBACvB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAClB,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAMD,QAAQ,CAAC,QAAgB;QACvB,IAAI,gBAAgB,GAAmB,IAAI,CAAC;QAE5C,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;YACxC,MAAM,EAAC,YAAY,EAAE,OAAO,EAAE,UAAU,EAAC,GAAG,SAAS,CAAC;YACtD,IAAI,CAAC;gBACH,MAAM,WAAW,GAAG,OAAO,CAAC,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;gBAE9D,IAAI,WAAW,EAAE,CAAC;oBAChB,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBAC7B,CAAC;gBAED,gBAAgB,GAAG,CAAC,gBAAgB,IAAI,IAAI,CAAC,IAAI,WAAW,CAAC;YAC/D,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBAGX,IAAI,CAAC,YAAY,qCAAqC,EAAE,CAAC;oBACvD,SAAS,CAAC,YAAY,GAAG,IAAI,CAAC;oBAC9B,gBAAgB,GAAG,KAAK,CAAC;gBAC3B,CAAC;qBAKI,IAAI,CAAC,YAAY,oCAAoC,EAAE,CAAC;oBAC3D,SAAS,CAAC,YAAY,GAAG,IAAI,CAAC;gBAChC,CAAC;qBAAM,CAAC;oBACN,MAAM,UAAU,GACd,wCAAwC;wBACxC,aAAa,IAAI,CAAC,SAAS,YAAY;wBACvC,MAAM,UAAU,EAAE,CAAC;oBACrB,GAAG,CAAC,KAAK,CAAC,UAAU,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;oBACzC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAClB,CAAC;YACH,CAAC;QACH,CAAC;QAID,OAAO,gBAAgB,KAAK,IAAI,CAAC;IACnC,CAAC;IAGD,UAAU;QACR,MAAM,iBAAiB,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;QACjF,MAAM,mBAAmB,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAChD,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,YAAY,CACpD,CAAC;QACF,MAAM,sBAAsB,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC;QAC7E,OAAO;YACL,iBAAiB;YACjB,YAAY,EAAE,iBAAiB,CAAC,MAAM;YACtC,mBAAmB;YACnB,cAAc,EAAE,mBAAmB,CAAC,MAAM;YAC1C,sBAAsB;YACtB,SAAS,EAAE,IAAI,CAAC,SAAS;SAC1B,CAAC;IACJ,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  PullApproveAuthorStateDependencyError,\n  PullApproveGroupStateDependencyError,\n} from './condition_errors.js';\n\nimport {PullApproveGroupConfig} from './parse-yaml.js';\nimport {convertConditionToFunction} from './condition_evaluator.js';\nimport {Log} from '../utils/logging.js';\n\n/** A condition for a group. */\ninterface GroupCondition {\n  expression: string;\n  checkFn: (files: string[], groups: PullApproveGroup[]) => boolean;\n  matchedFiles: Set<string>;\n  unverifiable: boolean;\n}\n\ninterface GroupReviewers {\n  users?: string[];\n  teams?: string[];\n}\n\n/** Result of testing files against the group. */\nexport interface PullApproveGroupResult {\n  groupName: string;\n  matchedConditions: GroupCondition[];\n  matchedCount: number;\n  unmatchedConditions: GroupCondition[];\n  unmatchedCount: number;\n  unverifiableConditions: GroupCondition[];\n}\n\n/** A PullApprove group to be able to test files against. */\nexport class PullApproveGroup {\n  /** List of conditions for the group. */\n  readonly conditions: GroupCondition[] = [];\n  /** List of reviewers for the group. */\n  readonly reviewers: GroupReviewers;\n\n  constructor(\n    public groupName: string,\n    config: PullApproveGroupConfig,\n    readonly precedingGroups: PullApproveGroup[] = [],\n  ) {\n    this._captureConditions(config);\n    this.reviewers = config.reviewers ?? {users: [], teams: []};\n  }\n\n  private _captureConditions(config: PullApproveGroupConfig) {\n    if (config.conditions) {\n      return config.conditions.forEach((condition) => {\n        const expression = condition.trim();\n\n        try {\n          this.conditions.push({\n            expression,\n            checkFn: convertConditionToFunction(expression),\n            matchedFiles: new Set(),\n            unverifiable: false,\n          });\n        } catch (e) {\n          Log.error(`Could not parse condition in group: ${this.groupName}`);\n          Log.error(` - ${expression}`);\n          Log.error(`Error:`, e);\n          process.exit(1);\n        }\n      });\n    }\n  }\n\n  /**\n   * Tests a provided file path to determine if it would be considered matched by\n   * the pull approve group's conditions.\n   */\n  testFile(filePath: string): boolean {\n    let allConditionsMet: boolean | null = null;\n\n    for (const condition of this.conditions) {\n      const {matchedFiles, checkFn, expression} = condition;\n      try {\n        const matchesFile = checkFn([filePath], this.precedingGroups);\n\n        if (matchesFile) {\n          matchedFiles.add(filePath);\n        }\n\n        allConditionsMet = (allConditionsMet ?? true) && matchesFile;\n      } catch (e) {\n        // If a group relies on the author state, we assume this group to never match\n        // or own a file. This is a strict assumption but prevents false-positives.\n        if (e instanceof PullApproveAuthorStateDependencyError) {\n          condition.unverifiable = true;\n          allConditionsMet = false;\n        }\n        // In the case of a condition that depends on the state of groups, we want to ignore\n        // that the verification can't accurately evaluate the condition and continue processing.\n        // Other types of errors fail the verification, as conditions should otherwise be able to\n        // execute without throwing.\n        else if (e instanceof PullApproveGroupStateDependencyError) {\n          condition.unverifiable = true;\n        } else {\n          const errMessage =\n            `Condition could not be evaluated: \\n\\n` +\n            `From the [${this.groupName}] group:\\n` +\n            ` - ${expression}`;\n          Log.error(errMessage, '\\n\\n', e, '\\n\\n');\n          process.exit(1);\n        }\n      }\n    }\n\n    // A file matches the group when all conditions are met. A group is not considered\n    // as matching when all conditions have been skipped.\n    return allConditionsMet === true;\n  }\n\n  /** Retrieve the results for the Group, all matched and unmatched conditions. */\n  getResults(): PullApproveGroupResult {\n    const matchedConditions = this.conditions.filter((c) => c.matchedFiles.size > 0);\n    const unmatchedConditions = this.conditions.filter(\n      (c) => c.matchedFiles.size === 0 && !c.unverifiable,\n    );\n    const unverifiableConditions = this.conditions.filter((c) => c.unverifiable);\n    return {\n      matchedConditions,\n      matchedCount: matchedConditions.length,\n      unmatchedConditions,\n      unmatchedCount: unmatchedConditions.length,\n      unverifiableConditions,\n      groupName: this.groupName,\n    };\n  }\n}\n"]}