/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { PullApproveGroupStateDependencyError } from './condition_errors.js';
import { getOrCreateGlob } from './utils.js';
/**
 * Superset of a native array. The superset provides methods which mimic the
 * list data structure used in PullApprove for files in conditions.
 */
export class PullApproveStringArray extends Array {
    /** Returns a new array which only includes files that match the given pattern. */
    include(pattern) {
        return new PullApproveStringArray(...this.filter((s) => getOrCreateGlob(pattern).match(s)));
    }
    /** Returns a new array which only includes files that did not match the given pattern. */
    exclude(pattern) {
        return new PullApproveStringArray(...this.filter((s) => !getOrCreateGlob(pattern).match(s)));
    }
}
/**
 * Superset of a native array. The superset provides methods which mimic the
 * list data structure used in PullApprove for groups in conditions.
 */
export class PullApproveGroupArray extends Array {
    include(pattern) {
        return new PullApproveGroupArray(...this.filter((s) => s.groupName.match(pattern)));
    }
    /** Returns a new array which only includes files that did not match the given pattern. */
    exclude(pattern) {
        return new PullApproveGroupArray(...this.filter((s) => s.groupName.match(pattern)));
    }
    get approved() {
        throw new PullApproveGroupStateDependencyError();
    }
    get pending() {
        throw new PullApproveGroupStateDependencyError();
    }
    get active() {
        throw new PullApproveGroupStateDependencyError();
    }
    get inactive() {
        throw new PullApproveGroupStateDependencyError();
    }
    get rejected() {
        throw new PullApproveGroupStateDependencyError();
    }
    get names() {
        return this.map((g) => g.groupName);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVsbGFwcHJvdmVfYXJyYXlzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbmctZGV2L3B1bGxhcHByb3ZlL3B1bGxhcHByb3ZlX2FycmF5cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFHSCxPQUFPLEVBQUMsb0NBQW9DLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUMzRSxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBRTNDOzs7R0FHRztBQUNILE1BQU0sT0FBTyxzQkFBdUIsU0FBUSxLQUFhO0lBQ3ZELGtGQUFrRjtJQUNsRixPQUFPLENBQUMsT0FBZTtRQUNyQixPQUFPLElBQUksc0JBQXNCLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5RixDQUFDO0lBRUQsMEZBQTBGO0lBQzFGLE9BQU8sQ0FBQyxPQUFlO1FBQ3JCLE9BQU8sSUFBSSxzQkFBc0IsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0YsQ0FBQztDQUNGO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLHFCQUFzQixTQUFRLEtBQXVCO0lBQ2hFLE9BQU8sQ0FBQyxPQUFlO1FBQ3JCLE9BQU8sSUFBSSxxQkFBcUIsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0RixDQUFDO0lBRUQsMEZBQTBGO0lBQzFGLE9BQU8sQ0FBQyxPQUFlO1FBQ3JCLE9BQU8sSUFBSSxxQkFBcUIsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0RixDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1YsTUFBTSxJQUFJLG9DQUFvQyxFQUFFLENBQUM7SUFDbkQsQ0FBQztJQUVELElBQUksT0FBTztRQUNULE1BQU0sSUFBSSxvQ0FBb0MsRUFBRSxDQUFDO0lBQ25ELENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixNQUFNLElBQUksb0NBQW9DLEVBQUUsQ0FBQztJQUNuRCxDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1YsTUFBTSxJQUFJLG9DQUFvQyxFQUFFLENBQUM7SUFDbkQsQ0FBQztJQUVELElBQUksUUFBUTtRQUNWLE1BQU0sSUFBSSxvQ0FBb0MsRUFBRSxDQUFDO0lBQ25ELENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN0QyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQ1xuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtQdWxsQXBwcm92ZUdyb3VwfSBmcm9tICcuL2dyb3VwLmpzJztcbmltcG9ydCB7UHVsbEFwcHJvdmVHcm91cFN0YXRlRGVwZW5kZW5jeUVycm9yfSBmcm9tICcuL2NvbmRpdGlvbl9lcnJvcnMuanMnO1xuaW1wb3J0IHtnZXRPckNyZWF0ZUdsb2J9IGZyb20gJy4vdXRpbHMuanMnO1xuXG4vKipcbiAqIFN1cGVyc2V0IG9mIGEgbmF0aXZlIGFycmF5LiBUaGUgc3VwZXJzZXQgcHJvdmlkZXMgbWV0aG9kcyB3aGljaCBtaW1pYyB0aGVcbiAqIGxpc3QgZGF0YSBzdHJ1Y3R1cmUgdXNlZCBpbiBQdWxsQXBwcm92ZSBmb3IgZmlsZXMgaW4gY29uZGl0aW9ucy5cbiAqL1xuZXhwb3J0IGNsYXNzIFB1bGxBcHByb3ZlU3RyaW5nQXJyYXkgZXh0ZW5kcyBBcnJheTxzdHJpbmc+IHtcbiAgLyoqIFJldHVybnMgYSBuZXcgYXJyYXkgd2hpY2ggb25seSBpbmNsdWRlcyBmaWxlcyB0aGF0IG1hdGNoIHRoZSBnaXZlbiBwYXR0ZXJuLiAqL1xuICBpbmNsdWRlKHBhdHRlcm46IHN0cmluZyk6IFB1bGxBcHByb3ZlU3RyaW5nQXJyYXkge1xuICAgIHJldHVybiBuZXcgUHVsbEFwcHJvdmVTdHJpbmdBcnJheSguLi50aGlzLmZpbHRlcigocykgPT4gZ2V0T3JDcmVhdGVHbG9iKHBhdHRlcm4pLm1hdGNoKHMpKSk7XG4gIH1cblxuICAvKiogUmV0dXJucyBhIG5ldyBhcnJheSB3aGljaCBvbmx5IGluY2x1ZGVzIGZpbGVzIHRoYXQgZGlkIG5vdCBtYXRjaCB0aGUgZ2l2ZW4gcGF0dGVybi4gKi9cbiAgZXhjbHVkZShwYXR0ZXJuOiBzdHJpbmcpOiBQdWxsQXBwcm92ZVN0cmluZ0FycmF5IHtcbiAgICByZXR1cm4gbmV3IFB1bGxBcHByb3ZlU3RyaW5nQXJyYXkoLi4udGhpcy5maWx0ZXIoKHMpID0+ICFnZXRPckNyZWF0ZUdsb2IocGF0dGVybikubWF0Y2gocykpKTtcbiAgfVxufVxuXG4vKipcbiAqIFN1cGVyc2V0IG9mIGEgbmF0aXZlIGFycmF5LiBUaGUgc3VwZXJzZXQgcHJvdmlkZXMgbWV0aG9kcyB3aGljaCBtaW1pYyB0aGVcbiAqIGxpc3QgZGF0YSBzdHJ1Y3R1cmUgdXNlZCBpbiBQdWxsQXBwcm92ZSBmb3IgZ3JvdXBzIGluIGNvbmRpdGlvbnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBQdWxsQXBwcm92ZUdyb3VwQXJyYXkgZXh0ZW5kcyBBcnJheTxQdWxsQXBwcm92ZUdyb3VwPiB7XG4gIGluY2x1ZGUocGF0dGVybjogc3RyaW5nKTogUHVsbEFwcHJvdmVHcm91cEFycmF5IHtcbiAgICByZXR1cm4gbmV3IFB1bGxBcHByb3ZlR3JvdXBBcnJheSguLi50aGlzLmZpbHRlcigocykgPT4gcy5ncm91cE5hbWUubWF0Y2gocGF0dGVybikpKTtcbiAgfVxuXG4gIC8qKiBSZXR1cm5zIGEgbmV3IGFycmF5IHdoaWNoIG9ubHkgaW5jbHVkZXMgZmlsZXMgdGhhdCBkaWQgbm90IG1hdGNoIHRoZSBnaXZlbiBwYXR0ZXJuLiAqL1xuICBleGNsdWRlKHBhdHRlcm46IHN0cmluZyk6IFB1bGxBcHByb3ZlR3JvdXBBcnJheSB7XG4gICAgcmV0dXJuIG5ldyBQdWxsQXBwcm92ZUdyb3VwQXJyYXkoLi4udGhpcy5maWx0ZXIoKHMpID0+IHMuZ3JvdXBOYW1lLm1hdGNoKHBhdHRlcm4pKSk7XG4gIH1cblxuICBnZXQgYXBwcm92ZWQoKSB7XG4gICAgdGhyb3cgbmV3IFB1bGxBcHByb3ZlR3JvdXBTdGF0ZURlcGVuZGVuY3lFcnJvcigpO1xuICB9XG5cbiAgZ2V0IHBlbmRpbmcoKSB7XG4gICAgdGhyb3cgbmV3IFB1bGxBcHByb3ZlR3JvdXBTdGF0ZURlcGVuZGVuY3lFcnJvcigpO1xuICB9XG5cbiAgZ2V0IGFjdGl2ZSgpIHtcbiAgICB0aHJvdyBuZXcgUHVsbEFwcHJvdmVHcm91cFN0YXRlRGVwZW5kZW5jeUVycm9yKCk7XG4gIH1cblxuICBnZXQgaW5hY3RpdmUoKSB7XG4gICAgdGhyb3cgbmV3IFB1bGxBcHByb3ZlR3JvdXBTdGF0ZURlcGVuZGVuY3lFcnJvcigpO1xuICB9XG5cbiAgZ2V0IHJlamVjdGVkKCkge1xuICAgIHRocm93IG5ldyBQdWxsQXBwcm92ZUdyb3VwU3RhdGVEZXBlbmRlbmN5RXJyb3IoKTtcbiAgfVxuXG4gIGdldCBuYW1lcygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoKGcpID0+IGcuZ3JvdXBOYW1lKTtcbiAgfVxufVxuIl19