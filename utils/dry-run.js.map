{"version":3,"file":"dry-run.js","sourceRoot":"","sources":["dry-run.ts"],"names":[],"mappings":"AAcA,MAAM,UAAU,aAAa,CAAI,IAAa;IAC5C,OAAO,IAAI,CAAC,MAAM,CAAC,SAAqB,EAAE;QACxC,IAAI,EAAE,SAAS;QACf,OAAO,EAAE,KAAK;QACd,WAAW,EAAE,yBAAyB;QACtC,MAAM,EAAE,CAAC,MAAe,EAAE,EAAE;YAC1B,IAAI,MAAM,EAAE,CAAC;gBACX,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC;YAC/B,CAAC;YACD,OAAO,MAAM,CAAC;QAChB,CAAC;KACF,CAAC,CAAC;AACL,CAAC;AAGD,MAAM,UAAU,QAAQ;IACtB,OAAO,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,SAAS,CAAC;AAC9C,CAAC;AAGD,MAAM,OAAO,WAAY,SAAQ,KAAK;IACpC;QACE,KAAK,CAAC,2CAA2C,CAAC,CAAC;IACrD,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Argv} from 'yargs';\n\n/**\n * Add a --dry-run flag to the available options for the yargs argv object. When present, sets an\n * environment variable noting dry run mode.\n */\nexport function addDryRunFlag<T>(args: Argv<T>) {\n  return args.option('dry-run' as 'dryRun', {\n    type: 'boolean',\n    default: false,\n    description: 'Whether to do a dry run',\n    coerce: (dryRun: boolean) => {\n      if (dryRun) {\n        process.env['DRY_RUN'] = '1';\n      }\n      return dryRun;\n    },\n  });\n}\n\n/** Whether the current environment is in dry run mode. */\nexport function isDryRun(): boolean {\n  return process.env['DRY_RUN'] !== undefined;\n}\n\n/** Error to be thrown when a function or method is called in dryRun mode and shouldn't be. */\nexport class DryRunError extends Error {\n  constructor() {\n    super('Cannot call this function in dryRun mode.');\n  }\n}\n"]}