/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Unique error class for failures when reading from the stdin. */
export class ReadBufferFromStdinError extends Error {
}
/**
 * Reads a `Buffer` from `stdin` until the stream is closed.
 *
 * @returns a Promise resolving with the `Buffer`. Rejects with `ReadBufferFromStdinError`
 *   on unexpected read errors.
 */
export function readBufferFromStdinUntilClosed(input = process.stdin) {
    return new Promise((resolve, reject) => {
        const data = [];
        input.on('data', (chunk) => data.push(chunk));
        input.on('end', () => resolve(Buffer.concat(data)));
        input.on('error', () => reject(new ReadBufferFromStdinError()));
        input.on('timeout', () => reject(new ReadBufferFromStdinError('Unexpected timeout')));
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZC1zdGRpbi11bnRpbC1jbG9zZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9uZy1kZXYvdXRpbHMvcmVhZC1zdGRpbi11bnRpbC1jbG9zZWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsbUVBQW1FO0FBQ25FLE1BQU0sT0FBTyx3QkFBeUIsU0FBUSxLQUFLO0NBQUc7QUFFdEQ7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsOEJBQThCLENBQzVDLFFBQTJCLE9BQU8sQ0FBQyxLQUFLO0lBRXhDLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDckMsTUFBTSxJQUFJLEdBQWEsRUFBRSxDQUFDO1FBRTFCLEtBQUssQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDOUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BELEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLHdCQUF3QixFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2hFLEtBQUssQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLHdCQUF3QixDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hGLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG4vKiogVW5pcXVlIGVycm9yIGNsYXNzIGZvciBmYWlsdXJlcyB3aGVuIHJlYWRpbmcgZnJvbSB0aGUgc3RkaW4uICovXG5leHBvcnQgY2xhc3MgUmVhZEJ1ZmZlckZyb21TdGRpbkVycm9yIGV4dGVuZHMgRXJyb3Ige31cblxuLyoqXG4gKiBSZWFkcyBhIGBCdWZmZXJgIGZyb20gYHN0ZGluYCB1bnRpbCB0aGUgc3RyZWFtIGlzIGNsb3NlZC5cbiAqXG4gKiBAcmV0dXJucyBhIFByb21pc2UgcmVzb2x2aW5nIHdpdGggdGhlIGBCdWZmZXJgLiBSZWplY3RzIHdpdGggYFJlYWRCdWZmZXJGcm9tU3RkaW5FcnJvcmBcbiAqICAgb24gdW5leHBlY3RlZCByZWFkIGVycm9ycy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlYWRCdWZmZXJGcm9tU3RkaW5VbnRpbENsb3NlZChcbiAgaW5wdXQ6IE5vZGVKUy5SZWFkU3RyZWFtID0gcHJvY2Vzcy5zdGRpbixcbik6IFByb21pc2U8QnVmZmVyPiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgZGF0YTogQnVmZmVyW10gPSBbXTtcblxuICAgIGlucHV0Lm9uKCdkYXRhJywgKGNodW5rKSA9PiBkYXRhLnB1c2goY2h1bmspKTtcbiAgICBpbnB1dC5vbignZW5kJywgKCkgPT4gcmVzb2x2ZShCdWZmZXIuY29uY2F0KGRhdGEpKSk7XG4gICAgaW5wdXQub24oJ2Vycm9yJywgKCkgPT4gcmVqZWN0KG5ldyBSZWFkQnVmZmVyRnJvbVN0ZGluRXJyb3IoKSkpO1xuICAgIGlucHV0Lm9uKCd0aW1lb3V0JywgKCkgPT4gcmVqZWN0KG5ldyBSZWFkQnVmZmVyRnJvbVN0ZGluRXJyb3IoJ1VuZXhwZWN0ZWQgdGltZW91dCcpKSk7XG4gIH0pO1xufVxuIl19