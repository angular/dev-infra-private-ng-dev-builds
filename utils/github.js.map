{"version":3,"file":"github.js","sourceRoot":"","sources":["github.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {params, types} from 'typed-graphqlify';\nimport {AuthenticatedGitClient} from './git/authenticated-git-client.js';\nimport {GraphqlResponseError} from '@octokit/graphql';\n\n/**\n * Gets the given pull request from Github using the GraphQL API endpoint.\n */\nexport async function getPr<PrSchema>(\n  prSchema: PrSchema,\n  prNumber: number,\n  git: AuthenticatedGitClient,\n): Promise<PrSchema | null> {\n  /** The owner and name of the repository */\n  const {owner, name} = git.remoteConfig;\n  /** The Graphql query object to get a the PR */\n  const PR_QUERY = params(\n    {\n      $number: 'Int!', // The PR number\n      $owner: 'String!', // The organization to query for\n      $name: 'String!', // The organization to query for\n    },\n    {\n      repository: params(\n        {owner: '$owner', name: '$name'},\n        {\n          pullRequest: params({number: '$number'}, prSchema),\n        },\n      ),\n    },\n  );\n\n  try {\n    const result = await git.github.graphql(PR_QUERY, {number: prNumber, owner, name});\n    return result.repository.pullRequest;\n  } catch (e) {\n    // If we know the error is just about the pull request not being found, we explicitly\n    // return `null`. This allows convenient and graceful handling if a PR does not exist.\n    if (e instanceof GraphqlResponseError && e.errors?.every((e) => e.type === 'NOT_FOUND')) {\n      return null;\n    }\n    throw e;\n  }\n}\n\n/** Get all pending PRs from github  */\nexport async function getPendingPrs<PrSchema>(prSchema: PrSchema, git: AuthenticatedGitClient) {\n  /** The owner and name of the repository */\n  const {owner, name} = git.remoteConfig;\n  /** The Graphql query object to get a page of pending PRs */\n  const PRS_QUERY = params(\n    {\n      $first: 'Int', // How many entries to get with each request\n      $after: 'String', // The cursor to start the page at\n      $owner: 'String!', // The organization to query for\n      $name: 'String!', // The repository to query for\n    },\n    {\n      repository: params(\n        {owner: '$owner', name: '$name'},\n        {\n          pullRequests: params(\n            {\n              first: '$first',\n              after: '$after',\n              states: `OPEN`,\n            },\n            {\n              nodes: [prSchema],\n              pageInfo: {\n                hasNextPage: types.boolean,\n                endCursor: types.string,\n              },\n            },\n          ),\n        },\n      ),\n    },\n  );\n  /** The current cursor */\n  let cursor: string | undefined;\n  /** If an additional page of members is expected */\n  let hasNextPage = true;\n  /** Array of pending PRs */\n  const prs: Array<PrSchema> = [];\n\n  // For each page of the response, get the page and add it to the list of PRs\n  while (hasNextPage) {\n    const paramsValue = {\n      after: cursor || null,\n      first: 100,\n      owner,\n      name,\n    };\n    const results = (await git.github.graphql(PRS_QUERY, paramsValue)) as typeof PRS_QUERY;\n    prs.push(...results.repository.pullRequests.nodes);\n    hasNextPage = results.repository.pullRequests.pageInfo.hasNextPage;\n    cursor = results.repository.pullRequests.pageInfo.endCursor;\n  }\n  return prs;\n}\n\n/** Get all files in a PR from github  */\nexport async function getPrFiles<PrFileSchema>(\n  fileSchema: PrFileSchema,\n  prNumber: number,\n  git: AuthenticatedGitClient,\n) {\n  /** The owner and name of the repository */\n  const {owner, name} = git.remoteConfig;\n  /** The Graphql query object to get a page of pending PRs */\n  const PRS_QUERY = params(\n    {\n      $first: 'Int', // How many entries to get with each request\n      $after: 'String', // The cursor to start the page at\n      $owner: 'String!', // The organization to query for\n      $name: 'String!', // The repository to query for\n    },\n    {\n      repository: params(\n        {owner: '$owner', name: '$name'},\n        {\n          pullRequest: params(\n            {\n              number: prNumber,\n            },\n            {\n              files: params(\n                {\n                  first: '$first',\n                  after: '$after',\n                },\n                {\n                  nodes: [fileSchema],\n                  pageInfo: {\n                    hasNextPage: types.boolean,\n                    endCursor: types.string,\n                  },\n                },\n              ),\n            },\n          ),\n        },\n      ),\n    },\n  );\n  /** The current cursor */\n  let cursor: string | undefined;\n  /** If an additional page of members is expected */\n  let hasNextPage = true;\n  /** Array of pending PRs */\n  const files: Array<PrFileSchema> = [];\n\n  // For each page of the response, get the page and add it to the list of PRs\n  while (hasNextPage) {\n    const paramsValue = {\n      after: cursor || null,\n      first: 100,\n      owner,\n      name,\n    };\n    const results = await git.github.graphql(PRS_QUERY, paramsValue);\n    files.push(...results.repository.pullRequest.files.nodes);\n    hasNextPage = results.repository.pullRequest.files.pageInfo.hasNextPage;\n    cursor = results.repository.pullRequest.files.pageInfo.endCursor;\n  }\n  return files;\n}\n\n/** Get all files in a PR from github  */\nexport async function getPrComments<PrCommentsSchema>(\n  commentsSchema: PrCommentsSchema,\n  prNumber: number,\n  git: AuthenticatedGitClient,\n) {\n  /** The owner and name of the repository */\n  const {owner, name} = git.remoteConfig;\n  /** The Graphql query object to get a page of pending PRs */\n  const PRS_QUERY = params(\n    {\n      $first: 'Int', // How many entries to get with each request\n      $after: 'String', // The cursor to start the page at\n      $owner: 'String!', // The organization to query for\n      $name: 'String!', // The repository to query for\n    },\n    {\n      repository: params(\n        {owner: '$owner', name: '$name'},\n        {\n          pullRequest: params(\n            {\n              number: prNumber,\n            },\n            {\n              comments: params(\n                {\n                  first: '$first',\n                  after: '$after',\n                },\n                {\n                  nodes: [commentsSchema],\n                  pageInfo: {\n                    hasNextPage: types.boolean,\n                    endCursor: types.string,\n                  },\n                },\n              ),\n            },\n          ),\n        },\n      ),\n    },\n  );\n  /** The current cursor */\n  let cursor: string | undefined;\n  /** If an additional page of members is expected */\n  let hasNextPage = true;\n  /** Array of pending PRs */\n  const comments: Array<PrCommentsSchema> = [];\n\n  // For each page of the response, get the page and add it to the list of PRs\n  while (hasNextPage) {\n    const paramsValue = {\n      after: cursor || null,\n      first: 100,\n      owner,\n      name,\n    };\n    const results = await git.github.graphql(PRS_QUERY, paramsValue);\n    comments.push(...results.repository.pullRequest.comments.nodes);\n    hasNextPage = results.repository.pullRequest.comments.pageInfo.hasNextPage;\n    cursor = results.repository.pullRequest.comments.pageInfo.endCursor;\n  }\n  return comments;\n}\n"]}