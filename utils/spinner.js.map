{"version":3,"file":"spinner.js","sourceRoot":"","sources":["spinner.ts"],"names":[],"mappings":"AAQA,OAAO,EAAC,QAAQ,EAAE,SAAS,EAAC,MAAM,UAAU,CAAC;AAC7C,OAAO,EAAC,KAAK,EAAE,GAAG,EAAC,MAAM,cAAc,CAAC;AAGxC,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAEhC,MAAM,UAAU,GAAG,WAAW,CAAC;AAE/B,MAAM,UAAU,GAAG,WAAW,CAAC;AAE/B,MAAM,OAAO,OAAO;IAWlB,IAAY,IAAI,CAAC,IAAwB;QACvC,IAAI,CAAC,KAAK,GAAG,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC;QAChC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,uBAAuB,EAAE,EAAE,IAAI,CAAC,CAAC;IACxD,CAAC;IACD,IAAY,IAAI;QACd,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAID,YAAY,IAAa;QAnBjB,cAAS,GAAG,KAAK,CAAC;QAElB,eAAU,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QAEtE,sBAAiB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QAEvE,iCAA4B,GAAG,CAAC,CAAC;QAEjC,UAAK,GAAW,EAAE,CAAC;QAYzB,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAGD,MAAM,CAAC,IAAY;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAGD,OAAO,CAAC,IAAY;QAClB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;IACnC,CAAC;IAGD,OAAO,CAAC,IAAY;QAClB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;IACjC,CAAC;IAGD,QAAQ;QACN,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAMO,SAAS,CAAC,MAAc,EAAE,IAAY;QAC5C,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACnB,OAAO;QACT,CAAC;QACD,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC/B,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAC9B,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC3B,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IACxB,CAAC;IAGO,uBAAuB;QAC7B,IAAI,CAAC,4BAA4B;YAC/B,CAAC,IAAI,CAAC,4BAA4B,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC;QAC1E,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;IACnE,CAAC;IAMO,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC,uBAAuB,EAAE,EAAE,IAAa;QACvE,IAAI,KAAK,EAAE,CAAC;YACV,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QACzC,CAAC;IACH,CAAC;IAGO,mBAAmB,CAAC,MAAc,EAAE,IAAa;QACvD,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC5B,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,MAAM,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;QAExD,SAAS,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAC/B,CAAC;IAGO,gBAAgB,CAAC,IAAa;QACpC,IAAI,IAAI,EAAE,CAAC;YACT,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,IAAI,GAAG,CAAC,CAAC;YACnC,OAAO;QACT,CAAC;QACD,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC5B,CAAC;IAGO,UAAU;QAChB,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QACnC,CAAC;IACH,CAAC;IAGO,UAAU;QAChB,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QACnC,CAAC;IACH,CAAC;CACF","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {cursorTo, clearLine} from 'readline';\nimport {green, red} from './logging.js';\n\n/** Whether execution is in a CI environment. */\nconst IS_CI = process.env['CI'];\n/** ANSI escape code to hide cursor in terminal. */\nconst hideCursor = '\\x1b[?25l';\n/** ANSI escape code to show cursor in terminal. */\nconst showCursor = '\\x1b[?25h';\n\nexport class Spinner {\n  /** Whether the spinner is marked as completed. */\n  private completed = false;\n  /** The id of the interval being used to trigger frame printing. */\n  private intervalId = setInterval(() => this.printFrame(), IS_CI ? 2500 : 125);\n  /** The characters to iterate through to create the appearance of spinning in the spinner. */\n  private spinnerCharacters = ['⠋', '⠙', '⠹', '⠸', '⠼', '⠴', '⠦', '⠧', '⠇', '⠏'];\n  /** The index of the spinner character used in the frame. */\n  private currentSpinnerCharacterIndex = 0;\n  /** The current text of the spinner. */\n  private _text: string = '';\n  private set text(text: string | undefined) {\n    this._text = text || this._text;\n    this.printFrame(this.getNextSpinnerCharacter(), text);\n  }\n  private get text(): string {\n    return this._text;\n  }\n\n  constructor();\n  constructor(text: string);\n  constructor(text?: string) {\n    this.hideCursor();\n    this.text = text;\n  }\n\n  /** Updates the spinner text with the provided text. */\n  update(text: string) {\n    this.text = text;\n  }\n\n  /** Completes the spinner marking it as successful with a `✓`. */\n  success(text: string): void {\n    this._complete(green('✓'), text);\n  }\n\n  /** Completes the spinner marking it as failing with an `✘`. */\n  failure(text: string): void {\n    this._complete(red('✘'), text);\n  }\n\n  /** Completes the spinner. */\n  complete() {\n    this._complete('', this.text);\n  }\n\n  /**\n   * Internal implementation for completing the spinner, marking it as completed, and printing the\n   * final frame.\n   */\n  private _complete(prefix: string, text: string) {\n    if (this.completed) {\n      return;\n    }\n    clearInterval(this.intervalId);\n    this.printFrame(prefix, text);\n    process.stdout.write('\\n');\n    this.showCursor();\n    this.completed = true;\n  }\n\n  /** Get the next spinner character. */\n  private getNextSpinnerCharacter() {\n    this.currentSpinnerCharacterIndex =\n      (this.currentSpinnerCharacterIndex + 1) % this.spinnerCharacters.length;\n    return this.spinnerCharacters[this.currentSpinnerCharacterIndex];\n  }\n\n  /**\n   * Print the next frame either in CI mode or local terminal mode based on whether the script is run in a\n   * CI environment.\n   */\n  private printFrame(prefix = this.getNextSpinnerCharacter(), text?: string): void {\n    if (IS_CI) {\n      this.printNextCIFrame(text);\n    } else {\n      this.printNextLocalFrame(prefix, text);\n    }\n  }\n\n  /** Print the current text for the spinner to the terminal.  */\n  private printNextLocalFrame(prefix: string, text?: string) {\n    cursorTo(process.stdout, 0);\n    process.stdout.write(` ${prefix} ${text || this.text}`);\n    // Clear to the right of the cursor location in case the new frame is shorter than the previous.\n    clearLine(process.stdout, 1);\n  }\n\n  /** Print the next expected piece for the spinner to stdout for CI usage.  */\n  private printNextCIFrame(text?: string) {\n    if (text) {\n      process.stdout.write(`\\n${text}.`);\n      return;\n    }\n    process.stdout.write('.');\n  }\n\n  /** Hide the cursor in the terminal, only executed in local environments. */\n  private hideCursor() {\n    if (!IS_CI) {\n      process.stdout.write(hideCursor);\n    }\n  }\n\n  /** Resume showing the cursor in the terminal, only executed in local environments. */\n  private showCursor() {\n    if (!IS_CI) {\n      process.stdout.write(showCursor);\n    }\n  }\n}\n"]}