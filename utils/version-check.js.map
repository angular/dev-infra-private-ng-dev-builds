{"version":3,"file":"version-check.js","sourceRoot":"","sources":["version-check.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport lockfile from '@yarnpkg/lockfile';\nimport {parse as parseYaml} from 'yaml';\nimport {ngDevNpmPackageName, workspaceRelativePackageJsonPath} from './constants.js';\nimport {Log} from './logging.js';\nimport {tryGetPackageId} from '@pnpm/dependency-path';\n\n/**\n * Verifies that the `ng-dev` tool is up-to-date in the workspace. The check will compare\n * the local version of the tool against the requested version in the workspace lock file.\n *\n * This check is helpful ensuring that the caretaker does not accidentally run with an older\n * local version of `ng-dev` due to not running `yarn`/`pnpm` after checking out new revisions.\n *\n * @returns a boolean indicating success or failure.\n */\nexport async function verifyNgDevToolIsUpToDate(workspacePath: string): Promise<boolean> {\n  // The placeholder will be replaced by the `pkg_npm` substitutions.\n  const localVersion = `0.0.0-{SCM_HEAD_SHA}`;\n  const workspacePackageJsonFile = path.join(workspacePath, workspaceRelativePackageJsonPath);\n  const pnpmLockFile = path.join(workspacePath, 'pnpm-lock.yaml');\n  const yarnLockFile = path.join(workspacePath, 'yarn.lock');\n\n  // TODO: Clean up this logic when fully dropping Yarn\n  const isPnpmMigrated = fs.existsSync(pnpmLockFile) && !fs.existsSync(yarnLockFile);\n  const expectedVersion = isPnpmMigrated\n    ? getExpectedVersionFromPnpmLock(workspacePackageJsonFile, pnpmLockFile)\n    : getExpectedVersionFromYarnLock(workspacePackageJsonFile, yarnLockFile);\n\n  Log.debug(`Expecting the following ng-dev version: ${expectedVersion}`);\n\n  if (localVersion !== expectedVersion) {\n    Log.error('  âœ˜   Your locally installed version of the `ng-dev` tool is outdated and not');\n    Log.error('      matching with the version in the `package.json` file.');\n    Log.error('      Re-install the dependencies to ensure you are using the correct version.');\n    return false;\n  }\n\n  return true;\n}\n\nfunction getExpectedVersionFromYarnLock(workspacePackageJsonFile: string, lockFilePath: string) {\n  try {\n    const packageJson = JSON.parse(fs.readFileSync(workspacePackageJsonFile, 'utf8')) as any;\n    // If we are operating in the actual dev-infra repo, always return `true`.\n    if (packageJson.name === ngDevNpmPackageName) {\n      return true;\n    }\n\n    const lockFileContent = fs.readFileSync(lockFilePath, 'utf8');\n\n    let lockFileObject: Record<string, {version: string}>;\n    try {\n      const lockFile = lockfile.parse(lockFileContent);\n\n      if (lockFile.type !== 'success') {\n        throw Error('Unable to parse workspace lock file. Please ensure the file is valid.');\n      }\n      lockFileObject = lockFile.object as lockfile.LockFileObject;\n    } catch {\n      lockFileObject = parseYaml(lockFileContent);\n    }\n\n    const devInfraPkgVersion =\n      packageJson?.dependencies?.[ngDevNpmPackageName] ??\n      packageJson?.devDependencies?.[ngDevNpmPackageName] ??\n      packageJson?.optionalDependencies?.[ngDevNpmPackageName];\n    return lockFileObject[`${ngDevNpmPackageName}@${devInfraPkgVersion}`].version;\n  } catch (e) {\n    Log.debug('Could not find expected ng-dev version from `yarn.lock` file:', e);\n    return null;\n  }\n}\n\nfunction getExpectedVersionFromPnpmLock(workspacePackageJsonFile: string, lockFilePath: string) {\n  try {\n    const packageJson = JSON.parse(fs.readFileSync(workspacePackageJsonFile, 'utf8')) as any;\n    // If we are operating in the actual dev-infra repo, always return `true`.\n    if (packageJson.name === ngDevNpmPackageName) {\n      return true;\n    }\n\n    const lockFileContent = fs.readFileSync(lockFilePath, 'utf8');\n    const lockFile = parseYaml(lockFileContent);\n    const importers = lockFile['importers']['.'];\n    const depEntry =\n      importers.dependencies?.['@angular/ng-dev'] ??\n      importers.devDependencies?.['@angular/ng-dev'] ??\n      importers.optionalDependencies?.['@angular/ng-dev'];\n    const packageId = tryGetPackageId(depEntry.version);\n\n    return lockFile['packages'][`@angular/ng-dev@${packageId}`].version;\n  } catch (e) {\n    Log.debug('Could not find expected ng-dev version from `pnpm-lock.yaml` file:', e);\n    return null;\n  }\n}\n"]}