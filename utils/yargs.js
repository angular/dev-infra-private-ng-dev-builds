import yargs from 'yargs';
/** List of functions to be called upon command completion. */
const completedFunctions = [];
/** Register a function to be called when the command completes. */
export function registerCompletedFunction(fn) {
    completedFunctions.push(fn);
}
/**
 * Run the yargs process, as configured by the supplied function, calling a set of completion
 * functions after the command completes.
 */
export async function runParserWithCompletedFunctions(applyConfiguration) {
    let err = null;
    try {
        await applyConfiguration(yargs(process.argv.slice(2)))
            .exitProcess(false)
            .parse();
    }
    catch (e) {
        err = e;
        if ([undefined, 0].includes(process.exitCode)) {
            process.exitCode = 1;
        }
    }
    finally {
        for (const completedFunc of completedFunctions) {
            await completedFunc(err);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWFyZ3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9uZy1kZXYvdXRpbHMveWFyZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUF3QixNQUFNLE9BQU8sQ0FBQztBQUs3Qyw4REFBOEQ7QUFDOUQsTUFBTSxrQkFBa0IsR0FBa0IsRUFBRSxDQUFDO0FBRTdDLG1FQUFtRTtBQUNuRSxNQUFNLFVBQVUseUJBQXlCLENBQUMsRUFBZTtJQUN2RCxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDOUIsQ0FBQztBQUVEOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxLQUFLLFVBQVUsK0JBQStCLENBQUMsa0JBQXdDO0lBQzVGLElBQUksR0FBRyxHQUFpQixJQUFJLENBQUM7SUFDN0IsSUFBSSxDQUFDO1FBQ0gsTUFBTSxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNuRCxXQUFXLENBQUMsS0FBSyxDQUFDO2FBQ2xCLEtBQUssRUFBRSxDQUFDO0lBQ2IsQ0FBQztJQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDWCxHQUFHLEdBQUcsQ0FBVSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1lBQzlDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZCLENBQUM7SUFDSCxDQUFDO1lBQVMsQ0FBQztRQUNULEtBQUssTUFBTSxhQUFhLElBQUksa0JBQWtCLEVBQUUsQ0FBQztZQUMvQyxNQUFNLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMzQixDQUFDO0lBQ0gsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeWFyZ3MsIHtBcmd1bWVudHMsIEFyZ3Z9IGZyb20gJ3lhcmdzJztcblxuLy8gQSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgY29tbWFuZCBjb21wbGV0ZXMuXG50eXBlIENvbXBsZXRlZEZuID0gKGVycjogRXJyb3IgfCBudWxsKSA9PiBQcm9taXNlPHZvaWQ+IHwgdm9pZDtcblxuLyoqIExpc3Qgb2YgZnVuY3Rpb25zIHRvIGJlIGNhbGxlZCB1cG9uIGNvbW1hbmQgY29tcGxldGlvbi4gKi9cbmNvbnN0IGNvbXBsZXRlZEZ1bmN0aW9uczogQ29tcGxldGVkRm5bXSA9IFtdO1xuXG4vKiogUmVnaXN0ZXIgYSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgY29tbWFuZCBjb21wbGV0ZXMuICovXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJDb21wbGV0ZWRGdW5jdGlvbihmbjogQ29tcGxldGVkRm4pIHtcbiAgY29tcGxldGVkRnVuY3Rpb25zLnB1c2goZm4pO1xufVxuXG4vKipcbiAqIFJ1biB0aGUgeWFyZ3MgcHJvY2VzcywgYXMgY29uZmlndXJlZCBieSB0aGUgc3VwcGxpZWQgZnVuY3Rpb24sIGNhbGxpbmcgYSBzZXQgb2YgY29tcGxldGlvblxuICogZnVuY3Rpb25zIGFmdGVyIHRoZSBjb21tYW5kIGNvbXBsZXRlcy5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJ1blBhcnNlcldpdGhDb21wbGV0ZWRGdW5jdGlvbnMoYXBwbHlDb25maWd1cmF0aW9uOiAoYXJndjogQXJndikgPT4gQXJndikge1xuICBsZXQgZXJyOiBFcnJvciB8IG51bGwgPSBudWxsO1xuICB0cnkge1xuICAgIGF3YWl0IGFwcGx5Q29uZmlndXJhdGlvbih5YXJncyhwcm9jZXNzLmFyZ3Yuc2xpY2UoMikpKVxuICAgICAgLmV4aXRQcm9jZXNzKGZhbHNlKVxuICAgICAgLnBhcnNlKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnIgPSBlIGFzIEVycm9yO1xuICAgIGlmIChbdW5kZWZpbmVkLCAwXS5pbmNsdWRlcyhwcm9jZXNzLmV4aXRDb2RlKSkge1xuICAgICAgcHJvY2Vzcy5leGl0Q29kZSA9IDE7XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIGZvciAoY29uc3QgY29tcGxldGVkRnVuYyBvZiBjb21wbGV0ZWRGdW5jdGlvbnMpIHtcbiAgICAgIGF3YWl0IGNvbXBsZXRlZEZ1bmMoZXJyKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==