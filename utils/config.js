/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { pathToFileURL } from 'url';
import { join } from 'path';
import { Log } from './logging.js';
import { getCachedConfig, setCachedConfig } from './config-cache.js';
import { determineRepoBaseDirFromCwd } from './repo-directory.js';
/**
 * The filename expected for creating the ng-dev config, without the file
 * extension to allow either a typescript or javascript file to be used.
 */
const CONFIG_FILE_PATH = '.ng-dev/config.mjs';
/**
 * The filename expected for local user config, without the file extension to allow a typescript,
 * javascript or json file to be used.
 */
const USER_CONFIG_FILE_PATH = '.ng-dev.user';
/** The local user configuration for ng-dev. */
let userConfig = null;
/**
 * Set the cached configuration object to be loaded later. Only to be used on
 * CI and test situations in which loading from the `.ng-dev/` directory is not possible.
 */
export const setConfig = setCachedConfig;
export async function getConfig(baseDirOrAssertions) {
    let cachedConfig = getCachedConfig();
    if (cachedConfig === null) {
        let baseDir;
        if (typeof baseDirOrAssertions === 'string') {
            baseDir = baseDirOrAssertions;
        }
        else {
            baseDir = determineRepoBaseDirFromCwd();
        }
        // If the global config is not defined, load it from the file system.
        // The full path to the configuration file.
        const configPath = join(baseDir, CONFIG_FILE_PATH);
        // Read the configuration and validate it before caching it for the future.
        cachedConfig = await readConfigFile(configPath);
        // Store the newly-read configuration in the cache.
        setCachedConfig(cachedConfig);
    }
    if (Array.isArray(baseDirOrAssertions)) {
        for (const assertion of baseDirOrAssertions) {
            assertion(cachedConfig);
        }
    }
    // Return a clone of the cached global config to ensure that a new instance of the config
    // is returned each time, preventing unexpected effects of modifications to the config object.
    return { ...cachedConfig, __isNgDevConfigObject: true };
}
/**
 * Get the local user configuration from the file system, returning the already loaded copy if it is
 * defined.
 *
 * @returns The user configuration object, or an empty object if no user configuration file is
 * present. The object is an untyped object as there are no required user configurations.
 */
export async function getUserConfig() {
    // If the global config is not defined, load it from the file system.
    if (userConfig === null) {
        // The full path to the configuration file.
        const configPath = join(determineRepoBaseDirFromCwd(), USER_CONFIG_FILE_PATH);
        // Set the global config object.
        userConfig = await readConfigFile(configPath, true);
    }
    // Return a clone of the user config to ensure that a new instance of the config is returned
    // each time, preventing unexpected effects of modifications to the config object.
    return { ...userConfig };
}
/** A standard error class to thrown during assertions while validating configuration. */
export class ConfigValidationError extends Error {
    constructor(message, errors = []) {
        super(message);
        this.errors = errors;
    }
}
/** Validate th configuration has been met for the ng-dev command. */
export function assertValidGithubConfig(config) {
    const errors = [];
    // Validate the github configuration.
    if (config.github === undefined) {
        errors.push(`Github repository not configured. Set the "github" option.`);
    }
    else {
        if (config.github.name === undefined) {
            errors.push(`"github.name" is not defined`);
        }
        if (config.github.owner === undefined) {
            errors.push(`"github.owner" is not defined`);
        }
    }
    if (errors.length) {
        throw new ConfigValidationError('Invalid `github` configuration', errors);
    }
}
/** Retrieve and validate the config as `CaretakerConfig`. */
export function assertValidCaretakerConfig(config) {
    if (config.caretaker === undefined) {
        throw new ConfigValidationError(`No configuration defined for "caretaker"`);
    }
}
/**
 * Resolves and reads the specified configuration file, optionally returning an empty object
 * if the configuration file cannot be read.
 */
async function readConfigFile(configPath, returnEmptyObjectOnError = false) {
    try {
        // ESM imports expect a valid URL. On Windows, the disk name causes errors like:
        // `ERR_UNSUPPORTED_ESM_URL_SCHEME: <..> Received protocol 'c:'`
        return await import(pathToFileURL(configPath).toString());
    }
    catch (e) {
        if (returnEmptyObjectOnError) {
            Log.debug(`Could not read configuration file at ${configPath}, returning empty object instead.`);
            Log.debug(e);
            return {};
        }
        Log.error(`Could not read configuration file at ${configPath}.`);
        Log.error(e);
        process.exit(1);
    }
}
//# sourceMappingURL=data:application/json;base64,