{"version":3,"file":"logging.js","sourceRoot":"","sources":["logging.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport chalk, {ChalkInstance} from 'chalk';\nimport {copyFileSync, writeFileSync} from 'fs';\nimport {join} from 'path';\nimport {Arguments} from 'yargs';\nimport {determineRepoBaseDirFromCwd} from './repo-directory.js';\nimport {appendFile} from 'fs/promises';\nimport {stripVTControlCharacters} from 'util';\n\n/**\n * Supported levels for logging functions. Levels are mapped to\n * numbers to represent a hierarchy of logging levels.\n */\nexport enum LogLevel {\n  SILENT = 0,\n  ERROR = 1,\n  WARN = 2,\n  LOG = 3,\n  INFO = 4,\n  DEBUG = 5,\n}\n\n/** Default log level for the tool. */\nexport const DEFAULT_LOG_LEVEL = LogLevel.INFO;\n\n/** Reexport of chalk colors for convenient access. */\nexport const red = chalk.red;\nexport const reset = chalk.reset;\nexport const green = chalk.green;\nexport const yellow = chalk.yellow;\nexport const bold = chalk.bold;\nexport const blue = chalk.blue;\nexport const underline = chalk.underline;\n\n/** Class used for logging to the console and to a ng-dev log file. */\nexport abstract class Log {\n  /** Write to the console for at INFO logging level */\n  static info = buildLogLevelFunction(() => console.info, LogLevel.INFO, null);\n\n  /** Write to the console for at ERROR logging level */\n  static error = buildLogLevelFunction(() => console.error, LogLevel.ERROR, chalk.red);\n\n  /** Write to the console for at DEBUG logging level */\n  static debug = buildLogLevelFunction(() => console.debug, LogLevel.DEBUG, null);\n\n  /** Write to the console for at LOG logging level */\n  static log = buildLogLevelFunction(() => console.log, LogLevel.LOG, null);\n\n  /** Write to the console for at WARN logging level */\n  static warn = buildLogLevelFunction(() => console.warn, LogLevel.WARN, chalk.yellow);\n}\n\n/** Build an instance of a logging function for the provided level. */\nfunction buildLogLevelFunction(\n  loadCommand: () => Function,\n  level: LogLevel,\n  defaultColor: ChalkInstance | null,\n) {\n  /** Write to stdout for the LOG_LEVEL. */\n  const loggingFunction = (...values: unknown[]) => {\n    runConsoleCommand(\n      loadCommand,\n      level,\n      // For string values, apply the default color.\n      ...values.map((v) => (typeof v === 'string' && defaultColor ? defaultColor(v) : v)),\n    );\n  };\n\n  /** Start a group at the LOG_LEVEL, optionally starting it as collapsed. */\n  loggingFunction.group = (label: string, collapsed = false) => {\n    const command = collapsed ? console.groupCollapsed : console.group;\n    runConsoleCommand(() => command, level, defaultColor ? defaultColor(label) : label);\n  };\n\n  /** End the group at the LOG_LEVEL. */\n  loggingFunction.groupEnd = () => {\n    runConsoleCommand(() => console.groupEnd, level);\n  };\n\n  return loggingFunction;\n}\n\n/**\n * Run the console command provided, if the environments logging level greater than the\n * provided logging level.\n *\n * The loadCommand takes in a function which is called to retrieve the console.* function\n * to allow for jasmine spies to still work in testing.  Without this method of retrieval\n * the console.* function, the function is saved into the closure of the created logging\n * function before jasmine can spy.\n */\nfunction runConsoleCommand(loadCommand: () => Function, logLevel: LogLevel, ...text: unknown[]) {\n  if (getLogLevel() >= logLevel) {\n    loadCommand()(...text);\n  }\n  appendToLogFile(logLevel, ...text);\n}\n\n/**\n * Retrieve the log level from environment variables, if the value found\n * based on the LOG_LEVEL environment variable is undefined, return the default\n * logging level.\n */\nfunction getLogLevel(): LogLevel {\n  const logLevel = Object.keys(LogLevel).indexOf((process.env[`LOG_LEVEL`] || '').toUpperCase());\n  if (logLevel === -1) {\n    return DEFAULT_LOG_LEVEL;\n  }\n  return logLevel;\n}\n\n/**\n * The number of columns used in the prepended log level information on each line of the logging\n * output file.\n */\nconst LOG_LEVEL_COLUMNS = 7;\n/**\n * The path to the log file being written to live. Starts as undefined before being trigger for usage by\n * `captureLogOutputForCommand` which runs from yargs execution.\n */\nlet logFilePath: string | undefined = undefined;\n\n/**\n * Enable writing the logged outputs to the log file on process exit, sets initial lines from the\n * command execution, containing information about the timing and command parameters.\n *\n * This is expected to be called only once during a command run, and should be called by the\n * middleware of yargs to enable the file logging before the rest of the command parsing and\n * response is executed.\n */\nexport async function captureLogOutputForCommand(argv: Arguments) {\n  // TODO(josephperrott): remove this guard against running multiple times after\n  //   https://github.com/yargs/yargs/issues/2223 is fixed\n  if (logFilePath !== undefined) {\n    return;\n  }\n  const repoDir = determineRepoBaseDirFromCwd();\n  logFilePath = join(repoDir, '.ng-dev.log');\n  writeFileSync(logFilePath, '');\n\n  /** The date time used for timestamping when the command was invoked. */\n  const now = new Date();\n  /** Header line to separate command runs in log files. */\n  const headerLine = Array(100).fill('#').join('');\n  appendToLogFile(\n    undefined,\n    `${headerLine}\\nCommand: ${argv.$0} ${argv._.join(' ')}\\nRan at: ${now}\\n`,\n  );\n\n  // On process exit, write the logged output to the appropriate log files\n  process.on('exit', (code: number) => {\n    appendToLogFile(\n      undefined,\n      `\\n\\nCommand ran in ${new Date().getTime() - now.getTime()}ms\\nExit Code: ${code}\\n`,\n    );\n\n    // For failure codes greater than 1, the new logged lines should be written to a specific log\n    // file for the command run failure.\n    if (code > 1 && logFilePath) {\n      const errorLogFileName = `.ng-dev.err-${now.getTime()}.log`;\n      console.error(`Exit code: ${code}. Writing full log to ${errorLogFileName}`);\n      copyFileSync(logFilePath, join(repoDir, errorLogFileName));\n    }\n  });\n}\n\n/** Write the provided text to the log file, prepending each line with the log level.  */\nfunction appendToLogFile(logLevel: LogLevel | undefined, ...text: unknown[]) {\n  if (logFilePath === undefined) {\n    return;\n  }\n  if (logLevel === undefined) {\n    appendFile(logFilePath, text.join(' '));\n    return;\n  }\n\n  const logLevelText = `${LogLevel[logLevel]}:`.padEnd(LOG_LEVEL_COLUMNS);\n  appendFile(\n    logFilePath,\n    // Strip ANSI escape codes from log outputs.\n    stripVTControlCharacters(\n      text\n        .join(' ')\n        .split('\\n')\n        .map((l) => `${logLevelText} ${l}\\n`)\n        .join(''),\n    ),\n  );\n}\n"]}