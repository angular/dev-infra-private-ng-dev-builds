{"version":3,"file":"child-process.js","sourceRoot":"","sources":["child-process.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport supportsColor from 'supports-color';\nimport {\n  spawn as _spawn,\n  SpawnOptions as _SpawnOptions,\n  spawnSync as _spawnSync,\n  SpawnSyncOptions as _SpawnSyncOptions,\n  ExecOptions as _ExecOptions,\n  exec as _exec,\n  ChildProcess as _ChildProcess,\n} from 'child_process';\nimport {Log} from './logging.js';\nimport assert from 'assert';\n\nexport interface CommonCmdOpts {\n  // Stdin text to provide to the process. The raw text will be written to `stdin` and then\n  // the stream is closed. This is equivalent to the `input` option from `SpawnSyncOption`.\n  input?: string;\n  /** Console output mode. Defaults to \"enabled\". */\n  mode?: 'enabled' | 'silent' | 'on-error';\n  /** Whether to prevent exit codes being treated as failures. */\n  suppressErrorOnFailingExitCode?: boolean;\n}\n\n/** Interface describing the options for spawning a process synchronously. */\nexport interface SpawnSyncOptions\n  extends CommonCmdOpts,\n    Omit<_SpawnSyncOptions, 'shell' | 'stdio' | 'input'> {}\n\n/** Interface describing the options for spawning a process. */\nexport interface SpawnOptions extends CommonCmdOpts, Omit<_SpawnOptions, 'shell' | 'stdio'> {}\n\n/** Interface describing the options for exec-ing a process. */\nexport interface ExecOptions extends CommonCmdOpts, Omit<_ExecOptions, 'shell' | 'stdio'> {}\n\n/** Interface describing the options for spawning an interactive process. */\nexport interface SpawnInteractiveCommandOptions extends Omit<_SpawnOptions, 'shell' | 'stdio'> {}\n\n/** Interface describing the result of a spawned process. */\nexport interface SpawnResult {\n  /** Captured stdout in string format. */\n  stdout: string;\n  /** Captured stderr in string format. */\n  stderr: string;\n  /** The exit code or signal of the process. */\n  status: number | NodeJS.Signals;\n}\n\n/** Interface describing the result of an exec process. */\nexport type ExecResult = SpawnResult;\n\n/** Class holding utilities for spawning child processes. */\nexport abstract class ChildProcess {\n  /**\n   * Spawns a given command with the specified arguments inside an interactive shell. All process\n   * stdin, stdout and stderr output is printed to the current console.\n   *\n   * @returns a Promise resolving on success, and rejecting on command failure with the status code.\n   */\n  static spawnInteractive(\n    command: string,\n    args: string[],\n    options: SpawnInteractiveCommandOptions = {},\n  ) {\n    return new Promise<void>((resolve, reject) => {\n      const commandText = `${command} ${args.join(' ')}`;\n      Log.debug(`Executing command: ${commandText}`);\n      const childProcess = _spawn(command, args, {...options, shell: true, stdio: 'inherit'});\n      // The `close` event is used because the process is guaranteed to have completed writing to\n      // stdout and stderr, using the `exit` event can cause inconsistent information in stdout and\n      // stderr due to a race condition around exiting.\n      childProcess.on('close', (status) => (status === 0 ? resolve() : reject(status)));\n    });\n  }\n\n  /**\n   * Spawns a given command with the specified arguments inside a shell synchronously.\n   *\n   * @returns The command's stdout and stderr.\n   */\n  static spawnSync(command: string, args: string[], options: SpawnSyncOptions = {}): SpawnResult {\n    const commandText = `${command} ${args.join(' ')}`;\n    const env = getEnvironmentForNonInteractiveCommand(options.env);\n\n    Log.debug(`Executing command: ${commandText}`);\n\n    const {\n      status: exitCode,\n      signal,\n      stdout,\n      stderr,\n    } = _spawnSync(command, args, {...options, env, encoding: 'utf8', shell: true, stdio: 'pipe'});\n\n    /** The status of the spawn result. */\n    const status = statusFromExitCodeAndSignal(exitCode, signal);\n\n    if (status === 0 || options.suppressErrorOnFailingExitCode) {\n      return {status, stdout, stderr};\n    }\n\n    throw new Error(stderr);\n  }\n\n  /**\n   * Spawns a given command with the specified arguments inside a shell. All process stdout\n   * output is captured and returned as resolution on completion. Depending on the chosen\n   * output mode, stdout/stderr output is also printed to the console, or only on error.\n   *\n   * @returns a Promise resolving with captured stdout and stderr on success. The promise\n   *   rejects on command failure.\n   */\n  static spawn(command: string, args: string[], options: SpawnOptions = {}): Promise<SpawnResult> {\n    const commandText = `${command} ${args.join(' ')}`;\n    const env = getEnvironmentForNonInteractiveCommand(options.env);\n\n    return processAsyncCmd(\n      commandText,\n      options,\n      _spawn(command, args, {...options, env, shell: true, stdio: 'pipe'}),\n    );\n  }\n\n  /**\n   * Execs a given command with the specified arguments inside a shell. All process stdout\n   * output is captured and returned as resolution on completion. Depending on the chosen\n   * output mode, stdout/stderr output is also printed to the console, or only on error.\n   *\n   * @returns a Promise resolving with captured stdout and stderr on success. The promise\n   *   rejects on command failure.\n   */\n  static exec(command: string, options: ExecOptions = {}): Promise<SpawnResult> {\n    const env = getEnvironmentForNonInteractiveCommand(options.env);\n    return processAsyncCmd(command, options, _exec(command, {...options, env}));\n  }\n}\n\n/**\n * Convert the provided exitCode and signal to a single status code.\n *\n * During `exit` node provides either a `code` or `signal`, one of which is guaranteed to be\n * non-null.\n *\n * For more details see: https://nodejs.org/api/child_process.html#child_process_event_exit\n */\nfunction statusFromExitCodeAndSignal(exitCode: number | null, signal: NodeJS.Signals | null) {\n  return exitCode ?? signal ?? -1;\n}\n\n/**\n * Gets a process environment object with defaults that can be used for\n * spawning non-interactive child processes.\n *\n * Currently we enable `FORCE_COLOR` since non-interactive spawn's with\n * non-inherited `stdio` will not have colors enabled due to a missing TTY.\n */\nfunction getEnvironmentForNonInteractiveCommand(\n  userProvidedEnv?: NodeJS.ProcessEnv,\n): NodeJS.ProcessEnv {\n  // Pass through the color level from the TTY/process performing the `spawn` call.\n  const forceColorValue =\n    supportsColor.stdout !== false ? supportsColor.stdout.level.toString() : undefined;\n\n  return {FORCE_COLOR: forceColorValue, ...(userProvidedEnv ?? process.env)};\n}\n\n/**\n * Process the ChildProcess object created by an async command.\n */\nfunction processAsyncCmd(\n  command: string,\n  options: CommonCmdOpts,\n  childProcess: _ChildProcess,\n): Promise<SpawnResult> {\n  return new Promise((resolve, reject) => {\n    let logOutput = '';\n    let stdout = '';\n    let stderr = '';\n\n    Log.debug(`Executing command: ${command}`);\n\n    // If provided, write `input` text to the process `stdin`.\n    if (options.input !== undefined) {\n      assert(\n        childProcess.stdin,\n        'Cannot write process `input` if there is no pipe `stdin` channel.',\n      );\n      childProcess.stdin.write(options.input);\n      childProcess.stdin.end();\n    }\n\n    // Capture the stdout separately so that it can be passed as resolve value.\n    // This is useful if commands return parsable stdout.\n    childProcess.stderr?.on('data', (message) => {\n      stderr += message;\n      logOutput += message;\n      // If console output is enabled, print the message directly to the stderr. Note that\n      // we intentionally print all output to stderr as stdout should not be polluted.\n      if (options.mode === undefined || options.mode === 'enabled') {\n        process.stderr.write(message);\n      }\n    });\n\n    childProcess.stdout?.on('data', (message) => {\n      stdout += message;\n      logOutput += message;\n      // If console output is enabled, print the message directly to the stderr. Note that\n      // we intentionally print all output to stderr as stdout should not be polluted.\n      if (options.mode === undefined || options.mode === 'enabled') {\n        process.stderr.write(message);\n      }\n    });\n\n    // The `close` event is used because the process is guaranteed to have completed writing to\n    // stdout and stderr, using the `exit` event can cause inconsistent information in stdout and\n    // stderr due to a race condition around exiting.\n    childProcess.on('close', (exitCode, signal) => {\n      const exitDescription = exitCode !== null ? `exit code \"${exitCode}\"` : `signal \"${signal}\"`;\n      const printFn = options.mode === 'on-error' ? Log.error : Log.debug;\n      const status = statusFromExitCodeAndSignal(exitCode, signal);\n\n      printFn(`Command \"${command}\" completed with ${exitDescription}.`);\n      printFn(`Process output: \\n${logOutput}`);\n\n      // On success, resolve the promise. Otherwise reject with the captured stderr\n      // and stdout log output if the output mode was set to `silent`.\n      if (status === 0 || options.suppressErrorOnFailingExitCode) {\n        resolve({stdout, stderr, status});\n      } else {\n        reject(options.mode === 'silent' ? logOutput : undefined);\n      }\n    });\n  });\n}\n"]}