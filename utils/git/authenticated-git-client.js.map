{"version":3,"file":"authenticated-git-client.js","sourceRoot":"","sources":["authenticated-git-client.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertValidGithubConfig, getConfig, GithubConfig} from '../config.js';\nimport {findOwnedForksOfRepoQuery} from './graphql-queries.js';\nimport {yellow} from '../logging.js';\n\nimport {GitClient} from './git-client.js';\nimport {AuthenticatedGithubClient, GithubRepo} from './github.js';\nimport {\n  getRepositoryGitUrl,\n  GITHUB_TOKEN_GENERATE_URL,\n  GITHUB_TOKEN_SETTINGS_URL,\n} from './github-urls.js';\n\n/** Describes a function that can be used to test for given Github OAuth scopes. */\nexport type OAuthScopeTestFunction = (scopes: string[], missing: string[]) => void;\n\n/** The possible types of users which could be used for authentication. */\ntype UserType = 'bot' | 'user';\n\n/**\n * Extension of the `GitClient` with additional utilities which are useful for\n * authenticated Git client instances.\n */\nexport class AuthenticatedGitClient extends GitClient {\n  /**\n   * Regular expression that matches the provided Github token. Used for\n   * sanitizing the token from Git child process output.\n   */\n  private readonly _githubTokenRegex: RegExp = new RegExp(this.githubToken, 'g');\n\n  /** The OAuth scopes available for the provided Github token. */\n  private _cachedOauthScopes: Promise<string[]> | null = null;\n\n  /** Cached fork repositories of the authenticated user. */\n  private _cachedForkRepositories: GithubRepo[] | null = null;\n\n  /** Instance of an authenticated github client. */\n  override readonly github = new AuthenticatedGithubClient(this.githubToken);\n\n  protected constructor(\n    readonly githubToken: string,\n    readonly userType: UserType,\n    config: {github: GithubConfig},\n    baseDir?: string,\n  ) {\n    super(config, baseDir);\n  }\n\n  /** Sanitizes a given message by omitting the provided Github token if present. */\n  override sanitizeConsoleOutput(value: string): string {\n    return value.replace(this._githubTokenRegex, '<TOKEN>');\n  }\n\n  /** Git URL that resolves to the configured repository. */\n  override getRepoGitUrl() {\n    return getRepositoryGitUrl(this.remoteConfig, this.githubToken);\n  }\n\n  /**\n   * Assert the GitClient instance is using a token with permissions for the all of the\n   * provided OAuth scopes.\n   */\n  async hasOauthScopes(testFn: OAuthScopeTestFunction): Promise<true | {error: string}> {\n    // Because bot accounts do not have the same structure for OAuth scopes, we always assume they\n    // have the correct access.\n    if (this.userType === 'bot') {\n      return true;\n    }\n\n    const scopes = await this._fetchAuthScopesForToken();\n    const missingScopes: string[] = [];\n    // Test Github OAuth scopes and collect missing ones.\n    testFn(scopes, missingScopes);\n    // If no missing scopes are found, return true to indicate all OAuth Scopes are available.\n    if (missingScopes.length === 0) {\n      return true;\n    }\n\n    // Pre-constructed error message to log to the user, providing missing scopes and\n    // remediation instructions.\n    const error =\n      `The provided <TOKEN> does not have required permissions due to missing scope(s): ` +\n      `${yellow(missingScopes.join(', '))}\\n\\n` +\n      `Update the token in use at:\\n` +\n      `  ${GITHUB_TOKEN_SETTINGS_URL}\\n\\n` +\n      `Alternatively, a new token can be created at: ${GITHUB_TOKEN_GENERATE_URL}\\n`;\n\n    return {error};\n  }\n\n  /** Gets an owned fork for the configured project of the authenticated user. */\n  async getForkOfAuthenticatedUser(): Promise<GithubRepo> {\n    const forks = await this.getAllForksOfAuthenticatedUser();\n\n    if (forks.length === 0) {\n      throw Error('Unable to find fork a for currently authenticated user.');\n    }\n\n    return forks[0];\n  }\n\n  /**\n   * Finds all forks owned by the currently authenticated user in the Git client,\n   *\n   * The determined fork repositories are cached as we assume that the authenticated\n   * user will not change during execution, or that no new forks are created.\n   */\n  async getAllForksOfAuthenticatedUser(): Promise<GithubRepo[]> {\n    if (this._cachedForkRepositories !== null) {\n      return this._cachedForkRepositories;\n    }\n\n    const {owner, name} = this.remoteConfig;\n    const result = await this.github.graphql(findOwnedForksOfRepoQuery, {owner, name});\n\n    return (this._cachedForkRepositories = result.repository.forks.nodes.map((node) => ({\n      owner: node.owner.login,\n      name: node.name,\n    })));\n  }\n\n  /** Fetch the OAuth scopes for the loaded Github token. */\n  private _fetchAuthScopesForToken() {\n    // If the OAuth scopes have already been loaded, return the Promise containing them.\n    if (this._cachedOauthScopes !== null) {\n      return this._cachedOauthScopes;\n    }\n    // OAuth scopes are loaded via the /rate_limit endpoint to prevent\n    // usage of a request against that rate_limit for this lookup.\n    return (this._cachedOauthScopes = this.github.rateLimit.get().then((response) => {\n      const scopes = response.headers['x-oauth-scopes'];\n\n      // If no token is provided, or if the Github client is authenticated incorrectly,\n      // the `x-oauth-scopes` response header is not set. We error in such cases as it\n      // signifies a faulty  of the\n      if (scopes === undefined) {\n        throw Error('Unable to retrieve OAuth scopes for token provided to Git client.');\n      }\n\n      return scopes\n        .split(',')\n        .map((scope) => scope.trim())\n        .filter((scope) => scope !== '');\n    }));\n  }\n\n  /** The previously configured access token. */\n  private static _token: string | null = null;\n  /** The singleton instance of the `AuthenticatedGitClient`. */\n  private static _authenticatedInstance: Promise<AuthenticatedGitClient> | null = null;\n  /** The previously configured user type. */\n  private static _userType: 'user' | 'bot';\n\n  /**\n   * Static method to get the singleton instance of the `AuthenticatedGitClient`,\n   * creating it if it has not yet been created.\n   */\n  static override async get(): Promise<AuthenticatedGitClient> {\n    if (AuthenticatedGitClient._token === null) {\n      throw new Error('No instance of `AuthenticatedGitClient` has been configured.');\n    }\n\n    // If there is no cached authenticated instance, create one and cache the promise\n    // immediately. This avoids constructing a client twice accidentally when e.g. waiting\n    // for the configuration to be loaded.\n    if (AuthenticatedGitClient._authenticatedInstance === null) {\n      AuthenticatedGitClient._authenticatedInstance = (async (\n        token: string,\n        userType: UserType,\n      ) => {\n        return new AuthenticatedGitClient(\n          token,\n          userType,\n          await getConfig([assertValidGithubConfig]),\n        );\n      })(AuthenticatedGitClient._token, AuthenticatedGitClient._userType);\n    }\n\n    return AuthenticatedGitClient._authenticatedInstance;\n  }\n\n  /** Configures an authenticated git client. */\n  static configure(token: string, userType: UserType = 'user'): void {\n    if (AuthenticatedGitClient._token) {\n      throw Error(\n        'Unable to configure `AuthenticatedGitClient` as it has been configured already.',\n      );\n    }\n\n    AuthenticatedGitClient._token = token;\n    AuthenticatedGitClient._userType = userType;\n  }\n}\n"]}