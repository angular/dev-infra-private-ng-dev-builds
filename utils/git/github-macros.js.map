{"version":3,"file":"github-macros.js","sourceRoot":"","sources":["github-macros.ts"],"names":[],"mappings":"AAYA,KAAK,UAAU,kBAAkB,CAC/B,MAAiC,EACjC,QAAgB;IAEhB,IAAI,CAAC;QACH,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,EAAC,GAAG,EAAE,UAAU,EAAE,QAAQ,EAAC,CAAC,CAAC;QACvF,IAAK,QAAQ,CAAC,MAAiB,KAAK,GAAG,EAAE,CAAC;YACxC,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAAC,MAAM,CAAC,CAAA,CAAC;IACV,OAAO,KAAK,CAAC;AACf,CAAC;AAgCD,KAAK,UAAU,kCAAkC,CAC/C,MAAiC,EACjC,MAC2E;IAE3E,MAAM,EAAC,IAAI,EAAE,YAAY,EAAC,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IACpE,MAAM,EAAC,IAAI,EAAE,aAAa,EAAC,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;IAEjF,MAAM,OAAO,GAAG;QACd,GAAG,YAAY,CAAC,UAAU,CAAC,GAAG,CAC5B,CAAC,MAAM,EAAe,EAAE,CAAC,CAAC;YACxB,IAAI,EAAE,OAAO;YACb,IAAI,EAAE,MAAM,CAAC,IAAI;YACjB,MAAM,EAAE,MAAM,CAAC,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,UAAW,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM;YAC1E,GAAG,EAAE,MAAM,CAAC,WAAW,IAAI,EAAE;YAC7B,KAAK,EAAE,MAAM;SACd,CAAC,CACH;QACD,GAAG,aAAa,CAAC,QAAQ,CAAC,GAAG,CAC3B,CAAC,MAAM,EAAgB,EAAE,CAAC,CAAC;YACzB,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,MAAM,CAAC,OAAO;YACpB,MAAM,EAAE,MAAM,CAAC,KAAK;YACpB,WAAW,EAAE,MAAM,CAAC,WAAW,IAAI,EAAE;YACrC,GAAG,EAAE,MAAM,CAAC,UAAU,IAAI,EAAE;YAC5B,MAAM,EAAE,MAAM;SACf,CAAC,CACH;KACF,CAAC;IAGF,OAAO;QACL,MAAM,EAAE,OAAO,CAAC,MAAM,CACpB,CAAC,aAAa,EAAE,EAAC,MAAM,EAAC,EAAE,EAAE;YAC1B,IAAI,aAAa,KAAK,SAAS,IAAI,CAAC,QAAQ,EAAE,aAAa,EAAE,SAAS,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;gBACzF,OAAO,SAAS,CAAC;YACnB,CAAC;YAED,IACE,aAAa,KAAK,SAAS;gBAC3B,CAAC,SAAS,EAAE,OAAO,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,EAC/D,CAAC;gBACD,OAAO,SAAS,CAAC;YACnB,CAAC;YAED,OAAO,SAAS,CAAC;QACnB,CAAC,EACD,IAAgD,CACjD;QACD,OAAO;KACR,CAAC;AACJ,CAAC;AAED,eAAe;IACb,kCAAkC;IAClC,kBAAkB;CACnB,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AuthenticatedGithubClient} from './github.js';\nimport {RestEndpointMethodTypes} from '@octokit/rest';\n\n// TODO: sort out implementing caching if we decide to use this somewhere else\nasync function isGooglerOrgMember(\n  client: AuthenticatedGithubClient,\n  username: string,\n): Promise<boolean> {\n  try {\n    const response = await client.orgs.checkMembershipForUser({org: 'googlers', username});\n    if ((response.status as number) === 204) {\n      return true;\n    }\n  } catch {}\n  return false;\n}\n\n/** Shared base object for a derived Check or Status result. */\ninterface CheckOrStatusResult {\n  type: string;\n  name: string;\n  result: string;\n  url: string;\n}\n\n/** A derived Check result */\ninterface CheckResult extends CheckOrStatusResult {\n  type: 'check';\n  check: RestEndpointMethodTypes['checks']['listForRef']['response']['data']['check_runs'][number];\n}\n\n/** A derived Status result */\ninterface StatusResult extends CheckOrStatusResult {\n  type: 'status';\n  description: string;\n  status: RestEndpointMethodTypes['repos']['getCombinedStatusForRef']['response']['data']['statuses'][number];\n}\n\n/** The overall results of a combined Checks and Statuses check. */\nexport interface CombinedChecksAndStatusesResult {\n  result: 'pending' | 'passing' | 'failing' | null;\n  results: (CheckResult | StatusResult)[];\n}\n\n/**\n * Retrieve a combined listing of the results for a refs statuses and checks.\n */\nasync function getCombinedChecksAndStatusesForRef(\n  github: AuthenticatedGithubClient,\n  params: RestEndpointMethodTypes['checks']['listForRef']['parameters'] &\n    RestEndpointMethodTypes['repos']['getCombinedStatusForRef']['parameters'],\n): Promise<CombinedChecksAndStatusesResult> {\n  const {data: checkResults} = await github.checks.listForRef(params);\n  const {data: statusResults} = await github.repos.getCombinedStatusForRef(params);\n\n  const results = [\n    ...checkResults.check_runs.map(\n      (result): CheckResult => ({\n        type: 'check',\n        name: result.name,\n        result: result.status === 'completed' ? result.conclusion! : result.status,\n        url: result.details_url ?? '',\n        check: result,\n      }),\n    ),\n    ...statusResults.statuses.map(\n      (result): StatusResult => ({\n        type: 'status',\n        name: result.context,\n        result: result.state,\n        description: result.description ?? '',\n        url: result.target_url ?? '',\n        status: result,\n      }),\n    ),\n  ];\n\n  // TODO: Refactor away from a reducer.\n  return {\n    result: results.reduce(\n      (currentResult, {result}) => {\n        if (currentResult === 'pending' || ['queued', 'in_progress', 'pending'].includes(result)) {\n          return 'pending';\n        }\n\n        if (\n          currentResult === 'failing' ||\n          ['failure', 'error', 'timed_out', 'cancelled'].includes(result)\n        ) {\n          return 'failing';\n        }\n\n        return 'passing';\n      },\n      null as 'pending' | 'failing' | 'passing' | null,\n    ),\n    results,\n  };\n}\n\nexport default {\n  getCombinedChecksAndStatusesForRef,\n  isGooglerOrgMember,\n};\n"]}