/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Log } from '../logging.js';
import { AuthenticatedGitClient } from './authenticated-git-client.js';
import { GITHUB_TOKEN_GENERATE_URL } from './github-urls.js';
/** Sets up the `github-token` command option for the given Yargs instance. */
export function addGithubTokenOption(argv) {
    return (argv
        // 'github-token' is casted to 'githubToken' to properly set up typings to reflect the key in
        // the Argv object being camelCase rather than kebab case due to the `camel-case-expansion`
        // config: https://github.com/yargs/yargs-parser#camel-case-expansion
        .option('github-token', {
        type: 'string',
        default: '',
        defaultDescription: '<LOCAL_TOKEN>',
        description: 'Github token. If not set, token is retrieved from the environment variables.',
        // We use the coerce function as a way of allowing the user to provide the value, otherwise
        // looking for it in the environment.
        coerce: configureGitClientWithTokenOrFromEnvironment,
    }));
}
/**
 * If the github token is able to be determined, either by being provided as a parameter or being
 * present in the environment, it is used to set the configuration for the AuthenticatedGitClient.
 * Otherwise, an error is thrown.
 *
 * We explicitly return void for this function to allow this function to be used as a `coerce`
 * function for yargs. This allows for the option, `github-token` to be available for users without
 * including it in the generated types for the `Argv` object on a command, helping us to enforce
 * that the token should only be accessed from the AuthenticatedGitClient itself.
 */
export function configureGitClientWithTokenOrFromEnvironment(token) {
    const githubToken = token || (process.env.GITHUB_TOKEN ?? process.env.TOKEN);
    if (!githubToken) {
        Log.error('No Github token set. Please set the `GITHUB_TOKEN` environment variable.');
        Log.error('Alternatively, pass the `--github-token` command line flag.');
        Log.warn(`You can generate a token here: ${GITHUB_TOKEN_GENERATE_URL}`);
        throw Error('Unable to determine the Github token.');
    }
    AuthenticatedGitClient.configure(githubToken);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2l0aHViLXlhcmdzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbmctZGV2L3V0aWxzL2dpdC9naXRodWIteWFyZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUdsQyxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUNyRSxPQUFPLEVBQUMseUJBQXlCLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUUzRCw4RUFBOEU7QUFDOUUsTUFBTSxVQUFVLG9CQUFvQixDQUFJLElBQWE7SUFDbkQsT0FBTyxDQUNMLElBQUk7UUFDRiw2RkFBNkY7UUFDN0YsMkZBQTJGO1FBQzNGLHFFQUFxRTtTQUNwRSxNQUFNLENBQUMsY0FBK0IsRUFBRTtRQUN2QyxJQUFJLEVBQUUsUUFBUTtRQUNkLE9BQU8sRUFBRSxFQUFFO1FBQ1gsa0JBQWtCLEVBQUUsZUFBZTtRQUNuQyxXQUFXLEVBQUUsOEVBQThFO1FBQzNGLDJGQUEyRjtRQUMzRixxQ0FBcUM7UUFDckMsTUFBTSxFQUFFLDRDQUE0QztLQUNyRCxDQUFDLENBQ0wsQ0FBQztBQUNKLENBQUM7QUFFRDs7Ozs7Ozs7O0dBU0c7QUFDSCxNQUFNLFVBQVUsNENBQTRDLENBQUMsS0FBeUI7SUFDcEYsTUFBTSxXQUFXLEdBQUcsS0FBSyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3RSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDakIsR0FBRyxDQUFDLEtBQUssQ0FBQywwRUFBMEUsQ0FBQyxDQUFDO1FBQ3RGLEdBQUcsQ0FBQyxLQUFLLENBQUMsNkRBQTZELENBQUMsQ0FBQztRQUN6RSxHQUFHLENBQUMsSUFBSSxDQUFDLGtDQUFrQyx5QkFBeUIsRUFBRSxDQUFDLENBQUM7UUFDeEUsTUFBTSxLQUFLLENBQUMsdUNBQXVDLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsc0JBQXNCLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQ1xuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtMb2d9IGZyb20gJy4uL2xvZ2dpbmcuanMnO1xuXG5pbXBvcnQge0FyZ3Z9IGZyb20gJ3lhcmdzJztcbmltcG9ydCB7QXV0aGVudGljYXRlZEdpdENsaWVudH0gZnJvbSAnLi9hdXRoZW50aWNhdGVkLWdpdC1jbGllbnQuanMnO1xuaW1wb3J0IHtHSVRIVUJfVE9LRU5fR0VORVJBVEVfVVJMfSBmcm9tICcuL2dpdGh1Yi11cmxzLmpzJztcblxuLyoqIFNldHMgdXAgdGhlIGBnaXRodWItdG9rZW5gIGNvbW1hbmQgb3B0aW9uIGZvciB0aGUgZ2l2ZW4gWWFyZ3MgaW5zdGFuY2UuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkR2l0aHViVG9rZW5PcHRpb248VD4oYXJndjogQXJndjxUPikge1xuICByZXR1cm4gKFxuICAgIGFyZ3ZcbiAgICAgIC8vICdnaXRodWItdG9rZW4nIGlzIGNhc3RlZCB0byAnZ2l0aHViVG9rZW4nIHRvIHByb3Blcmx5IHNldCB1cCB0eXBpbmdzIHRvIHJlZmxlY3QgdGhlIGtleSBpblxuICAgICAgLy8gdGhlIEFyZ3Ygb2JqZWN0IGJlaW5nIGNhbWVsQ2FzZSByYXRoZXIgdGhhbiBrZWJhYiBjYXNlIGR1ZSB0byB0aGUgYGNhbWVsLWNhc2UtZXhwYW5zaW9uYFxuICAgICAgLy8gY29uZmlnOiBodHRwczovL2dpdGh1Yi5jb20veWFyZ3MveWFyZ3MtcGFyc2VyI2NhbWVsLWNhc2UtZXhwYW5zaW9uXG4gICAgICAub3B0aW9uKCdnaXRodWItdG9rZW4nIGFzICdnaXRodWJUb2tlbicsIHtcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIGRlZmF1bHQ6ICcnLFxuICAgICAgICBkZWZhdWx0RGVzY3JpcHRpb246ICc8TE9DQUxfVE9LRU4+JyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdHaXRodWIgdG9rZW4uIElmIG5vdCBzZXQsIHRva2VuIGlzIHJldHJpZXZlZCBmcm9tIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZXMuJyxcbiAgICAgICAgLy8gV2UgdXNlIHRoZSBjb2VyY2UgZnVuY3Rpb24gYXMgYSB3YXkgb2YgYWxsb3dpbmcgdGhlIHVzZXIgdG8gcHJvdmlkZSB0aGUgdmFsdWUsIG90aGVyd2lzZVxuICAgICAgICAvLyBsb29raW5nIGZvciBpdCBpbiB0aGUgZW52aXJvbm1lbnQuXG4gICAgICAgIGNvZXJjZTogY29uZmlndXJlR2l0Q2xpZW50V2l0aFRva2VuT3JGcm9tRW52aXJvbm1lbnQsXG4gICAgICB9KVxuICApO1xufVxuXG4vKipcbiAqIElmIHRoZSBnaXRodWIgdG9rZW4gaXMgYWJsZSB0byBiZSBkZXRlcm1pbmVkLCBlaXRoZXIgYnkgYmVpbmcgcHJvdmlkZWQgYXMgYSBwYXJhbWV0ZXIgb3IgYmVpbmdcbiAqIHByZXNlbnQgaW4gdGhlIGVudmlyb25tZW50LCBpdCBpcyB1c2VkIHRvIHNldCB0aGUgY29uZmlndXJhdGlvbiBmb3IgdGhlIEF1dGhlbnRpY2F0ZWRHaXRDbGllbnQuXG4gKiBPdGhlcndpc2UsIGFuIGVycm9yIGlzIHRocm93bi5cbiAqXG4gKiBXZSBleHBsaWNpdGx5IHJldHVybiB2b2lkIGZvciB0aGlzIGZ1bmN0aW9uIHRvIGFsbG93IHRoaXMgZnVuY3Rpb24gdG8gYmUgdXNlZCBhcyBhIGBjb2VyY2VgXG4gKiBmdW5jdGlvbiBmb3IgeWFyZ3MuIFRoaXMgYWxsb3dzIGZvciB0aGUgb3B0aW9uLCBgZ2l0aHViLXRva2VuYCB0byBiZSBhdmFpbGFibGUgZm9yIHVzZXJzIHdpdGhvdXRcbiAqIGluY2x1ZGluZyBpdCBpbiB0aGUgZ2VuZXJhdGVkIHR5cGVzIGZvciB0aGUgYEFyZ3ZgIG9iamVjdCBvbiBhIGNvbW1hbmQsIGhlbHBpbmcgdXMgdG8gZW5mb3JjZVxuICogdGhhdCB0aGUgdG9rZW4gc2hvdWxkIG9ubHkgYmUgYWNjZXNzZWQgZnJvbSB0aGUgQXV0aGVudGljYXRlZEdpdENsaWVudCBpdHNlbGYuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25maWd1cmVHaXRDbGllbnRXaXRoVG9rZW5PckZyb21FbnZpcm9ubWVudCh0b2tlbjogc3RyaW5nIHwgdW5kZWZpbmVkKTogdm9pZCB7XG4gIGNvbnN0IGdpdGh1YlRva2VuID0gdG9rZW4gfHwgKHByb2Nlc3MuZW52LkdJVEhVQl9UT0tFTiA/PyBwcm9jZXNzLmVudi5UT0tFTik7XG4gIGlmICghZ2l0aHViVG9rZW4pIHtcbiAgICBMb2cuZXJyb3IoJ05vIEdpdGh1YiB0b2tlbiBzZXQuIFBsZWFzZSBzZXQgdGhlIGBHSVRIVUJfVE9LRU5gIGVudmlyb25tZW50IHZhcmlhYmxlLicpO1xuICAgIExvZy5lcnJvcignQWx0ZXJuYXRpdmVseSwgcGFzcyB0aGUgYC0tZ2l0aHViLXRva2VuYCBjb21tYW5kIGxpbmUgZmxhZy4nKTtcbiAgICBMb2cud2FybihgWW91IGNhbiBnZW5lcmF0ZSBhIHRva2VuIGhlcmU6ICR7R0lUSFVCX1RPS0VOX0dFTkVSQVRFX1VSTH1gKTtcbiAgICB0aHJvdyBFcnJvcignVW5hYmxlIHRvIGRldGVybWluZSB0aGUgR2l0aHViIHRva2VuLicpO1xuICB9XG5cbiAgQXV0aGVudGljYXRlZEdpdENsaWVudC5jb25maWd1cmUoZ2l0aHViVG9rZW4pO1xufVxuIl19