{"version":3,"file":"github.js","sourceRoot":"","sources":["github.ts"],"names":[],"mappings":"AAUA,OAAO,EAAC,OAAO,EAAC,MAAM,eAAe,CAAC;AAGtC,OAAO,EAAC,KAAK,EAAC,MAAM,kBAAkB,CAAC;AAiBvC,MAAM,OAAO,YAAY;IAgBvB,YAAoB,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;QAd1C,aAAQ,GAAY,IAAI,OAAO,CAAC,EAAC,GAAG,IAAI,CAAC,eAAe,EAAC,CAAC,CAAC;QAE5D,UAAK,GAAqB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;QAC9C,SAAI,GAAoB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;QAC3C,UAAK,GAAqB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;QAC9C,WAAM,GAAsB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;QACjD,QAAG,GAAmB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;QACxC,cAAS,GAAyB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC;QAC1D,UAAK,GAAqB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;QAC9C,WAAM,GAAsB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;QACjD,SAAI,GAAoB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;QAC3C,aAAQ,GAAwB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;QACvD,WAAM,GAAsB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;IAEH,CAAC;CACzD;AAMD,MAAM,OAAO,yBAA0B,SAAQ,YAAY;IAMzD,YAAoB,MAAc;QAEhC,KAAK,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;QAFJ,WAAM,GAAN,MAAM,CAAQ;QAJ1B,aAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC;YAChD,OAAO,EAAE,EAAC,aAAa,EAAE,SAAS,IAAI,CAAC,MAAM,EAAE,EAAC;SACjD,CAAC,CAAC;IAKH,CAAC;IAGD,KAAK,CAAC,OAAO,CAA+B,WAAc,EAAE,SAA4B,EAAE;QACxF,OAAO,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,QAAQ,EAAE,EAAE,MAAM,CAAC,CAAM,CAAC;IAC3E,CAAC;CACF;AAGD,MAAM,UAAU,gBAAgB,CAAC,GAAY;IAC3C,OAAO,CACL,GAAG,YAAY,KAAK;QAGpB,GAAG,CAAC,WAAW,CAAC,IAAI,KAAK,cAAc;QACtC,GAA6B,CAAC,OAAO,KAAK,SAAS,CACrD,CAAC;AACJ,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport type {OctokitOptions} from '@octokit/core';\n\nimport {Octokit} from '@octokit/rest';\nimport {RequestParameters} from '@octokit/types';\nimport {RequestError} from '@octokit/request-error';\nimport {query} from 'typed-graphqlify';\n\n/**\n * An object representation of a Graphql Query to be used as a response type and\n * to generate a Graphql query string.\n */\nexport type GraphqlQueryObject = Parameters<typeof query>[1];\n\n/** Interface describing a Github repository. */\nexport interface GithubRepo {\n  /** Owner login of the repository. */\n  owner: string;\n  /** Name of the repository. */\n  name: string;\n}\n\n/** A Github client for interacting with the Github APIs. */\nexport class GithubClient {\n  /** The octokit instance actually performing API requests. */\n  protected _octokit: Octokit = new Octokit({...this._octokitOptions});\n\n  readonly pulls: Octokit['pulls'] = this._octokit.pulls;\n  readonly orgs: Octokit['orgs'] = this._octokit.orgs;\n  readonly repos: Octokit['repos'] = this._octokit.repos;\n  readonly issues: Octokit['issues'] = this._octokit.issues;\n  readonly git: Octokit['git'] = this._octokit.git;\n  readonly rateLimit: Octokit['rateLimit'] = this._octokit.rateLimit;\n  readonly teams: Octokit['teams'] = this._octokit.teams;\n  readonly search: Octokit['search'] = this._octokit.search;\n  readonly rest: Octokit['rest'] = this._octokit.rest;\n  readonly paginate: Octokit['paginate'] = this._octokit.paginate;\n  readonly checks: Octokit['checks'] = this._octokit.checks;\n\n  constructor(private _octokitOptions?: OctokitOptions) {}\n}\n\n/**\n * Extension of the `GithubClient` that provides utilities which are specific\n * to authenticated instances.\n */\nexport class AuthenticatedGithubClient extends GithubClient {\n  /** The graphql instance with authentication set during construction. */\n  private _graphql = this._octokit.graphql.defaults({\n    headers: {authorization: `token ${this._token}`},\n  });\n\n  constructor(private _token: string) {\n    // Set the token for the octokit instance.\n    super({auth: _token});\n  }\n\n  /** Perform a query using Github's Graphql API. */\n  async graphql<T extends GraphqlQueryObject>(queryObject: T, params: RequestParameters = {}) {\n    return (await this._graphql(query(queryObject).toString(), params)) as T;\n  }\n}\n\n/** Whether the given object corresponds to an Octokit API request error.  */\nexport function isGithubApiError(obj: unknown): obj is RequestError {\n  return (\n    obj instanceof Error &&\n    // Note: Cannot use `instanceof` here because Octokit may use a different\n    // version of `@octokit/request-error` due to version mismatch/hoisting.\n    obj.constructor.name === 'RequestError' &&\n    (obj as Partial<RequestError>).request !== undefined\n  );\n}\n"]}