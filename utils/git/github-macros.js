/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// TODO: sort out implementing caching if we decide to use this somewhere else
async function isGooglerOrgMember(client, username) {
    try {
        const response = await client.orgs.checkMembershipForUser({ org: 'googlers', username });
        if (response.status === 204) {
            return true;
        }
    }
    catch { }
    return false;
}
/**
 * Retrieve a combined listing of the results for a refs statuses and checks.
 */
async function getCombinedChecksAndStatusesForRef(github, params) {
    const { data: checkResults } = await github.checks.listForRef(params);
    const { data: statusResults } = await github.repos.getCombinedStatusForRef(params);
    const results = [
        ...checkResults.check_runs.map((result) => ({
            type: 'check',
            name: result.name,
            result: result.status === 'completed' ? result.conclusion : result.status,
            url: result.details_url ?? '',
            check: result,
        })),
        ...statusResults.statuses.map((result) => ({
            type: 'status',
            name: result.context,
            result: result.state,
            description: result.description ?? '',
            url: result.target_url ?? '',
            status: result,
        })),
    ];
    // TODO: Refactor away from a reducer.
    return {
        result: results.reduce((currentResult, { result }) => {
            if (currentResult === 'pending' || ['queued', 'in_progress', 'pending'].includes(result)) {
                return 'pending';
            }
            if (currentResult === 'failing' ||
                ['failure', 'error', 'timed_out', 'cancelled'].includes(result)) {
                return 'failing';
            }
            return 'passing';
        }, null),
        results,
    };
}
export default {
    getCombinedChecksAndStatusesForRef,
    isGooglerOrgMember,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2l0aHViLW1hY3Jvcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL25nLWRldi91dGlscy9naXQvZ2l0aHViLW1hY3Jvcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFLSCw4RUFBOEU7QUFDOUUsS0FBSyxVQUFVLGtCQUFrQixDQUMvQixNQUFpQyxFQUNqQyxRQUFnQjtJQUVoQixJQUFJLENBQUM7UUFDSCxNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsRUFBQyxHQUFHLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBQyxDQUFDLENBQUM7UUFDdkYsSUFBSyxRQUFRLENBQUMsTUFBaUIsS0FBSyxHQUFHLEVBQUUsQ0FBQztZQUN4QyxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7SUFDSCxDQUFDO0lBQUMsTUFBTSxDQUFDLENBQUEsQ0FBQztJQUNWLE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQTZCRDs7R0FFRztBQUNILEtBQUssVUFBVSxrQ0FBa0MsQ0FDL0MsTUFBaUMsRUFDakMsTUFDMkU7SUFFM0UsTUFBTSxFQUFDLElBQUksRUFBRSxZQUFZLEVBQUMsR0FBRyxNQUFNLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3BFLE1BQU0sRUFBQyxJQUFJLEVBQUUsYUFBYSxFQUFDLEdBQUcsTUFBTSxNQUFNLENBQUMsS0FBSyxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWpGLE1BQU0sT0FBTyxHQUFHO1FBQ2QsR0FBRyxZQUFZLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FDNUIsQ0FBQyxNQUFNLEVBQWUsRUFBRSxDQUFDLENBQUM7WUFDeEIsSUFBSSxFQUFFLE9BQU87WUFDYixJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUk7WUFDakIsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTTtZQUMxRSxHQUFHLEVBQUUsTUFBTSxDQUFDLFdBQVcsSUFBSSxFQUFFO1lBQzdCLEtBQUssRUFBRSxNQUFNO1NBQ2QsQ0FBQyxDQUNIO1FBQ0QsR0FBRyxhQUFhLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FDM0IsQ0FBQyxNQUFNLEVBQWdCLEVBQUUsQ0FBQyxDQUFDO1lBQ3pCLElBQUksRUFBRSxRQUFRO1lBQ2QsSUFBSSxFQUFFLE1BQU0sQ0FBQyxPQUFPO1lBQ3BCLE1BQU0sRUFBRSxNQUFNLENBQUMsS0FBSztZQUNwQixXQUFXLEVBQUUsTUFBTSxDQUFDLFdBQVcsSUFBSSxFQUFFO1lBQ3JDLEdBQUcsRUFBRSxNQUFNLENBQUMsVUFBVSxJQUFJLEVBQUU7WUFDNUIsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDLENBQ0g7S0FDRixDQUFDO0lBRUYsc0NBQXNDO0lBQ3RDLE9BQU87UUFDTCxNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FDcEIsQ0FBQyxhQUFhLEVBQUUsRUFBQyxNQUFNLEVBQUMsRUFBRSxFQUFFO1lBQzFCLElBQUksYUFBYSxLQUFLLFNBQVMsSUFBSSxDQUFDLFFBQVEsRUFBRSxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7Z0JBQ3pGLE9BQU8sU0FBUyxDQUFDO1lBQ25CLENBQUM7WUFFRCxJQUNFLGFBQWEsS0FBSyxTQUFTO2dCQUMzQixDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFDL0QsQ0FBQztnQkFDRCxPQUFPLFNBQVMsQ0FBQztZQUNuQixDQUFDO1lBRUQsT0FBTyxTQUFTLENBQUM7UUFDbkIsQ0FBQyxFQUNELElBQWdELENBQ2pEO1FBQ0QsT0FBTztLQUNSLENBQUM7QUFDSixDQUFDO0FBRUQsZUFBZTtJQUNiLGtDQUFrQztJQUNsQyxrQkFBa0I7Q0FDbkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge0F1dGhlbnRpY2F0ZWRHaXRodWJDbGllbnR9IGZyb20gJy4vZ2l0aHViLmpzJztcbmltcG9ydCB7UmVzdEVuZHBvaW50TWV0aG9kVHlwZXN9IGZyb20gJ0BvY3Rva2l0L3Jlc3QnO1xuXG4vLyBUT0RPOiBzb3J0IG91dCBpbXBsZW1lbnRpbmcgY2FjaGluZyBpZiB3ZSBkZWNpZGUgdG8gdXNlIHRoaXMgc29tZXdoZXJlIGVsc2VcbmFzeW5jIGZ1bmN0aW9uIGlzR29vZ2xlck9yZ01lbWJlcihcbiAgY2xpZW50OiBBdXRoZW50aWNhdGVkR2l0aHViQ2xpZW50LFxuICB1c2VybmFtZTogc3RyaW5nLFxuKTogUHJvbWlzZTxib29sZWFuPiB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQub3Jncy5jaGVja01lbWJlcnNoaXBGb3JVc2VyKHtvcmc6ICdnb29nbGVycycsIHVzZXJuYW1lfSk7XG4gICAgaWYgKChyZXNwb25zZS5zdGF0dXMgYXMgbnVtYmVyKSA9PT0gMjA0KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0gY2F0Y2gge31cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKiogU2hhcmVkIGJhc2Ugb2JqZWN0IGZvciBhIGRlcml2ZWQgQ2hlY2sgb3IgU3RhdHVzIHJlc3VsdC4gKi9cbmludGVyZmFjZSBDaGVja09yU3RhdHVzUmVzdWx0IHtcbiAgdHlwZTogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIHJlc3VsdDogc3RyaW5nO1xuICB1cmw6IHN0cmluZztcbn1cblxuLyoqIEEgZGVyaXZlZCBDaGVjayByZXN1bHQgKi9cbmludGVyZmFjZSBDaGVja1Jlc3VsdCBleHRlbmRzIENoZWNrT3JTdGF0dXNSZXN1bHQge1xuICB0eXBlOiAnY2hlY2snO1xuICBjaGVjazogUmVzdEVuZHBvaW50TWV0aG9kVHlwZXNbJ2NoZWNrcyddWydsaXN0Rm9yUmVmJ11bJ3Jlc3BvbnNlJ11bJ2RhdGEnXVsnY2hlY2tfcnVucyddW251bWJlcl07XG59XG5cbi8qKiBBIGRlcml2ZWQgU3RhdHVzIHJlc3VsdCAqL1xuaW50ZXJmYWNlIFN0YXR1c1Jlc3VsdCBleHRlbmRzIENoZWNrT3JTdGF0dXNSZXN1bHQge1xuICB0eXBlOiAnc3RhdHVzJztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgc3RhdHVzOiBSZXN0RW5kcG9pbnRNZXRob2RUeXBlc1sncmVwb3MnXVsnZ2V0Q29tYmluZWRTdGF0dXNGb3JSZWYnXVsncmVzcG9uc2UnXVsnZGF0YSddWydzdGF0dXNlcyddW251bWJlcl07XG59XG5cbi8qKiBUaGUgb3ZlcmFsbCByZXN1bHRzIG9mIGEgY29tYmluZWQgQ2hlY2tzIGFuZCBTdGF0dXNlcyBjaGVjay4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29tYmluZWRDaGVja3NBbmRTdGF0dXNlc1Jlc3VsdCB7XG4gIHJlc3VsdDogJ3BlbmRpbmcnIHwgJ3Bhc3NpbmcnIHwgJ2ZhaWxpbmcnIHwgbnVsbDtcbiAgcmVzdWx0czogKENoZWNrUmVzdWx0IHwgU3RhdHVzUmVzdWx0KVtdO1xufVxuXG4vKipcbiAqIFJldHJpZXZlIGEgY29tYmluZWQgbGlzdGluZyBvZiB0aGUgcmVzdWx0cyBmb3IgYSByZWZzIHN0YXR1c2VzIGFuZCBjaGVja3MuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldENvbWJpbmVkQ2hlY2tzQW5kU3RhdHVzZXNGb3JSZWYoXG4gIGdpdGh1YjogQXV0aGVudGljYXRlZEdpdGh1YkNsaWVudCxcbiAgcGFyYW1zOiBSZXN0RW5kcG9pbnRNZXRob2RUeXBlc1snY2hlY2tzJ11bJ2xpc3RGb3JSZWYnXVsncGFyYW1ldGVycyddICZcbiAgICBSZXN0RW5kcG9pbnRNZXRob2RUeXBlc1sncmVwb3MnXVsnZ2V0Q29tYmluZWRTdGF0dXNGb3JSZWYnXVsncGFyYW1ldGVycyddLFxuKTogUHJvbWlzZTxDb21iaW5lZENoZWNrc0FuZFN0YXR1c2VzUmVzdWx0PiB7XG4gIGNvbnN0IHtkYXRhOiBjaGVja1Jlc3VsdHN9ID0gYXdhaXQgZ2l0aHViLmNoZWNrcy5saXN0Rm9yUmVmKHBhcmFtcyk7XG4gIGNvbnN0IHtkYXRhOiBzdGF0dXNSZXN1bHRzfSA9IGF3YWl0IGdpdGh1Yi5yZXBvcy5nZXRDb21iaW5lZFN0YXR1c0ZvclJlZihwYXJhbXMpO1xuXG4gIGNvbnN0IHJlc3VsdHMgPSBbXG4gICAgLi4uY2hlY2tSZXN1bHRzLmNoZWNrX3J1bnMubWFwKFxuICAgICAgKHJlc3VsdCk6IENoZWNrUmVzdWx0ID0+ICh7XG4gICAgICAgIHR5cGU6ICdjaGVjaycsXG4gICAgICAgIG5hbWU6IHJlc3VsdC5uYW1lLFxuICAgICAgICByZXN1bHQ6IHJlc3VsdC5zdGF0dXMgPT09ICdjb21wbGV0ZWQnID8gcmVzdWx0LmNvbmNsdXNpb24hIDogcmVzdWx0LnN0YXR1cyxcbiAgICAgICAgdXJsOiByZXN1bHQuZGV0YWlsc191cmwgPz8gJycsXG4gICAgICAgIGNoZWNrOiByZXN1bHQsXG4gICAgICB9KSxcbiAgICApLFxuICAgIC4uLnN0YXR1c1Jlc3VsdHMuc3RhdHVzZXMubWFwKFxuICAgICAgKHJlc3VsdCk6IFN0YXR1c1Jlc3VsdCA9PiAoe1xuICAgICAgICB0eXBlOiAnc3RhdHVzJyxcbiAgICAgICAgbmFtZTogcmVzdWx0LmNvbnRleHQsXG4gICAgICAgIHJlc3VsdDogcmVzdWx0LnN0YXRlLFxuICAgICAgICBkZXNjcmlwdGlvbjogcmVzdWx0LmRlc2NyaXB0aW9uID8/ICcnLFxuICAgICAgICB1cmw6IHJlc3VsdC50YXJnZXRfdXJsID8/ICcnLFxuICAgICAgICBzdGF0dXM6IHJlc3VsdCxcbiAgICAgIH0pLFxuICAgICksXG4gIF07XG5cbiAgLy8gVE9ETzogUmVmYWN0b3IgYXdheSBmcm9tIGEgcmVkdWNlci5cbiAgcmV0dXJuIHtcbiAgICByZXN1bHQ6IHJlc3VsdHMucmVkdWNlKFxuICAgICAgKGN1cnJlbnRSZXN1bHQsIHtyZXN1bHR9KSA9PiB7XG4gICAgICAgIGlmIChjdXJyZW50UmVzdWx0ID09PSAncGVuZGluZycgfHwgWydxdWV1ZWQnLCAnaW5fcHJvZ3Jlc3MnLCAncGVuZGluZyddLmluY2x1ZGVzKHJlc3VsdCkpIHtcbiAgICAgICAgICByZXR1cm4gJ3BlbmRpbmcnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIGN1cnJlbnRSZXN1bHQgPT09ICdmYWlsaW5nJyB8fFxuICAgICAgICAgIFsnZmFpbHVyZScsICdlcnJvcicsICd0aW1lZF9vdXQnLCAnY2FuY2VsbGVkJ10uaW5jbHVkZXMocmVzdWx0KVxuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gJ2ZhaWxpbmcnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICdwYXNzaW5nJztcbiAgICAgIH0sXG4gICAgICBudWxsIGFzICdwZW5kaW5nJyB8ICdmYWlsaW5nJyB8ICdwYXNzaW5nJyB8IG51bGwsXG4gICAgKSxcbiAgICByZXN1bHRzLFxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdldENvbWJpbmVkQ2hlY2tzQW5kU3RhdHVzZXNGb3JSZWYsXG4gIGlzR29vZ2xlck9yZ01lbWJlcixcbn07XG4iXX0=