/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { URL } from 'url';
/** URL to the Github page where personal access tokens can be managed. */
export const GITHUB_TOKEN_SETTINGS_URL = 'https://github.com/settings/tokens';
/** URL to the Github page where personal access tokens can be generated. */
export const GITHUB_TOKEN_GENERATE_URL = 'https://github.com/settings/tokens/new';
/** Adds the provided token to the given Github HTTPs remote url. */
export function addTokenToGitHttpsUrl(githubHttpsUrl, token) {
    const url = new URL(githubHttpsUrl);
    url.password = token;
    url.username = 'x-access-token';
    return url.href;
}
/** Gets the repository Git URL for the given github config. */
export function getRepositoryGitUrl(config, githubToken) {
    if (config.useSsh) {
        return `git@github.com:${config.owner}/${config.name}.git`;
    }
    const baseHttpUrl = `https://github.com/${config.owner}/${config.name}.git`;
    if (githubToken !== undefined) {
        return addTokenToGitHttpsUrl(baseHttpUrl, githubToken);
    }
    return baseHttpUrl;
}
/** Gets a Github URL that refers to a list of recent commits within a specified branch. */
export function getListCommitsInBranchUrl(client, branchName) {
    const { owner, repo } = client.remoteParams;
    return `https://github.com/${owner}/${repo}/commits/${branchName}`;
}
/** Gets a Github URL for viewing the file contents of a specified file for the given ref. */
export function getFileContentsUrl(client, ref, relativeFilePath) {
    const { owner, repo } = client.remoteParams;
    return `https://github.com/${owner}/${repo}/blob/${ref}/${relativeFilePath}`;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2l0aHViLXVybHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9uZy1kZXYvdXRpbHMvZ2l0L2dpdGh1Yi11cmxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSxLQUFLLENBQUM7QUFLeEIsMEVBQTBFO0FBQzFFLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLG9DQUFvQyxDQUFDO0FBRTlFLDRFQUE0RTtBQUM1RSxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyx3Q0FBd0MsQ0FBQztBQUVsRixvRUFBb0U7QUFDcEUsTUFBTSxVQUFVLHFCQUFxQixDQUFDLGNBQXNCLEVBQUUsS0FBYTtJQUN6RSxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNwQyxHQUFHLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztJQUNyQixHQUFHLENBQUMsUUFBUSxHQUFHLGdCQUFnQixDQUFDO0lBQ2hDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQztBQUNsQixDQUFDO0FBRUQsK0RBQStEO0FBQy9ELE1BQU0sVUFBVSxtQkFBbUIsQ0FDakMsTUFBdUQsRUFDdkQsV0FBb0I7SUFFcEIsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDbEIsT0FBTyxrQkFBa0IsTUFBTSxDQUFDLEtBQUssSUFBSSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUM7SUFDN0QsQ0FBQztJQUNELE1BQU0sV0FBVyxHQUFHLHNCQUFzQixNQUFNLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQztJQUM1RSxJQUFJLFdBQVcsS0FBSyxTQUFTLEVBQUUsQ0FBQztRQUM5QixPQUFPLHFCQUFxQixDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBQ0QsT0FBTyxXQUFXLENBQUM7QUFDckIsQ0FBQztBQUVELDJGQUEyRjtBQUMzRixNQUFNLFVBQVUseUJBQXlCLENBQUMsTUFBaUIsRUFBRSxVQUFrQjtJQUM3RSxNQUFNLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBQyxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUM7SUFDMUMsT0FBTyxzQkFBc0IsS0FBSyxJQUFJLElBQUksWUFBWSxVQUFVLEVBQUUsQ0FBQztBQUNyRSxDQUFDO0FBRUQsNkZBQTZGO0FBQzdGLE1BQU0sVUFBVSxrQkFBa0IsQ0FBQyxNQUFpQixFQUFFLEdBQVcsRUFBRSxnQkFBd0I7SUFDekYsTUFBTSxFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUMsR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDO0lBQzFDLE9BQU8sc0JBQXNCLEtBQUssSUFBSSxJQUFJLFNBQVMsR0FBRyxJQUFJLGdCQUFnQixFQUFFLENBQUM7QUFDL0UsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge1VSTH0gZnJvbSAndXJsJztcblxuaW1wb3J0IHtHaXRodWJDb25maWd9IGZyb20gJy4uL2NvbmZpZy5qcyc7XG5pbXBvcnQge0dpdENsaWVudH0gZnJvbSAnLi9naXQtY2xpZW50LmpzJztcblxuLyoqIFVSTCB0byB0aGUgR2l0aHViIHBhZ2Ugd2hlcmUgcGVyc29uYWwgYWNjZXNzIHRva2VucyBjYW4gYmUgbWFuYWdlZC4gKi9cbmV4cG9ydCBjb25zdCBHSVRIVUJfVE9LRU5fU0VUVElOR1NfVVJMID0gJ2h0dHBzOi8vZ2l0aHViLmNvbS9zZXR0aW5ncy90b2tlbnMnO1xuXG4vKiogVVJMIHRvIHRoZSBHaXRodWIgcGFnZSB3aGVyZSBwZXJzb25hbCBhY2Nlc3MgdG9rZW5zIGNhbiBiZSBnZW5lcmF0ZWQuICovXG5leHBvcnQgY29uc3QgR0lUSFVCX1RPS0VOX0dFTkVSQVRFX1VSTCA9ICdodHRwczovL2dpdGh1Yi5jb20vc2V0dGluZ3MvdG9rZW5zL25ldyc7XG5cbi8qKiBBZGRzIHRoZSBwcm92aWRlZCB0b2tlbiB0byB0aGUgZ2l2ZW4gR2l0aHViIEhUVFBzIHJlbW90ZSB1cmwuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkVG9rZW5Ub0dpdEh0dHBzVXJsKGdpdGh1Ykh0dHBzVXJsOiBzdHJpbmcsIHRva2VuOiBzdHJpbmcpIHtcbiAgY29uc3QgdXJsID0gbmV3IFVSTChnaXRodWJIdHRwc1VybCk7XG4gIHVybC5wYXNzd29yZCA9IHRva2VuO1xuICB1cmwudXNlcm5hbWUgPSAneC1hY2Nlc3MtdG9rZW4nO1xuICByZXR1cm4gdXJsLmhyZWY7XG59XG5cbi8qKiBHZXRzIHRoZSByZXBvc2l0b3J5IEdpdCBVUkwgZm9yIHRoZSBnaXZlbiBnaXRodWIgY29uZmlnLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFJlcG9zaXRvcnlHaXRVcmwoXG4gIGNvbmZpZzogUGljazxHaXRodWJDb25maWcsICduYW1lJyB8ICdvd25lcicgfCAndXNlU3NoJz4sXG4gIGdpdGh1YlRva2VuPzogc3RyaW5nLFxuKTogc3RyaW5nIHtcbiAgaWYgKGNvbmZpZy51c2VTc2gpIHtcbiAgICByZXR1cm4gYGdpdEBnaXRodWIuY29tOiR7Y29uZmlnLm93bmVyfS8ke2NvbmZpZy5uYW1lfS5naXRgO1xuICB9XG4gIGNvbnN0IGJhc2VIdHRwVXJsID0gYGh0dHBzOi8vZ2l0aHViLmNvbS8ke2NvbmZpZy5vd25lcn0vJHtjb25maWcubmFtZX0uZ2l0YDtcbiAgaWYgKGdpdGh1YlRva2VuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gYWRkVG9rZW5Ub0dpdEh0dHBzVXJsKGJhc2VIdHRwVXJsLCBnaXRodWJUb2tlbik7XG4gIH1cbiAgcmV0dXJuIGJhc2VIdHRwVXJsO1xufVxuXG4vKiogR2V0cyBhIEdpdGh1YiBVUkwgdGhhdCByZWZlcnMgdG8gYSBsaXN0IG9mIHJlY2VudCBjb21taXRzIHdpdGhpbiBhIHNwZWNpZmllZCBicmFuY2guICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGlzdENvbW1pdHNJbkJyYW5jaFVybChjbGllbnQ6IEdpdENsaWVudCwgYnJhbmNoTmFtZTogc3RyaW5nKSB7XG4gIGNvbnN0IHtvd25lciwgcmVwb30gPSBjbGllbnQucmVtb3RlUGFyYW1zO1xuICByZXR1cm4gYGh0dHBzOi8vZ2l0aHViLmNvbS8ke293bmVyfS8ke3JlcG99L2NvbW1pdHMvJHticmFuY2hOYW1lfWA7XG59XG5cbi8qKiBHZXRzIGEgR2l0aHViIFVSTCBmb3Igdmlld2luZyB0aGUgZmlsZSBjb250ZW50cyBvZiBhIHNwZWNpZmllZCBmaWxlIGZvciB0aGUgZ2l2ZW4gcmVmLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZpbGVDb250ZW50c1VybChjbGllbnQ6IEdpdENsaWVudCwgcmVmOiBzdHJpbmcsIHJlbGF0aXZlRmlsZVBhdGg6IHN0cmluZykge1xuICBjb25zdCB7b3duZXIsIHJlcG99ID0gY2xpZW50LnJlbW90ZVBhcmFtcztcbiAgcmV0dXJuIGBodHRwczovL2dpdGh1Yi5jb20vJHtvd25lcn0vJHtyZXBvfS9ibG9iLyR7cmVmfS8ke3JlbGF0aXZlRmlsZVBhdGh9YDtcbn1cbiJdfQ==