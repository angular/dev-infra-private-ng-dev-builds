/**
 * @license
 * Copyright Google LLC
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Octokit } from '@octokit/rest';
import { query } from 'typed-graphqlify';
/** A Github client for interacting with the Github APIs. */
export class GithubClient {
    constructor(_octokitOptions) {
        this._octokitOptions = _octokitOptions;
        /** The octokit instance actually performing API requests. */
        this._octokit = new Octokit({ ...this._octokitOptions });
        this.pulls = this._octokit.pulls;
        this.orgs = this._octokit.orgs;
        this.repos = this._octokit.repos;
        this.issues = this._octokit.issues;
        this.git = this._octokit.git;
        this.rateLimit = this._octokit.rateLimit;
        this.teams = this._octokit.teams;
        this.search = this._octokit.search;
        this.rest = this._octokit.rest;
        this.paginate = this._octokit.paginate;
        this.checks = this._octokit.checks;
    }
}
/**
 * Extension of the `GithubClient` that provides utilities which are specific
 * to authenticated instances.
 */
export class AuthenticatedGithubClient extends GithubClient {
    constructor(_token) {
        // Set the token for the octokit instance.
        super({ auth: _token });
        this._token = _token;
        /** The graphql instance with authentication set during construction. */
        this._graphql = this._octokit.graphql.defaults({
            headers: { authorization: `token ${this._token}` },
        });
    }
    /** Perform a query using Github's Graphql API. */
    async graphql(queryObject, params = {}) {
        return (await this._graphql(query(queryObject).toString(), params));
    }
}
/** Whether the given object corresponds to an Octokit API request error.  */
export function isGithubApiError(obj) {
    return (obj instanceof Error &&
        // Note: Cannot use `instanceof` here because Octokit may use a different
        // version of `@octokit/request-error` due to version mismatch/hoisting.
        obj.constructor.name === 'RequestError' &&
        obj.request !== undefined);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2l0aHViLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbmctZGV2L3V0aWxzL2dpdC9naXRodWIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBSUgsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUd0QyxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFnQnZDLDREQUE0RDtBQUM1RCxNQUFNLE9BQU8sWUFBWTtJQWdCdkIsWUFBb0IsZUFBZ0M7UUFBaEMsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBZnBELDZEQUE2RDtRQUNuRCxhQUFRLEdBQUcsSUFBSSxPQUFPLENBQUMsRUFBQyxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUMsQ0FBQyxDQUFDO1FBRW5ELFVBQUssR0FBcUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7UUFDOUMsU0FBSSxHQUFvQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztRQUMzQyxVQUFLLEdBQXFCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1FBQzlDLFdBQU0sR0FBc0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7UUFDakQsUUFBRyxHQUFtQixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztRQUN4QyxjQUFTLEdBQXlCLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDO1FBQzFELFVBQUssR0FBcUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7UUFDOUMsV0FBTSxHQUFzQixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztRQUNqRCxTQUFJLEdBQW9CLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQzNDLGFBQVEsR0FBd0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7UUFDdkQsV0FBTSxHQUFzQixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztJQUVILENBQUM7Q0FDekQ7QUFFRDs7O0dBR0c7QUFDSCxNQUFNLE9BQU8seUJBQTBCLFNBQVEsWUFBWTtJQU16RCxZQUFvQixNQUFjO1FBQ2hDLDBDQUEwQztRQUMxQyxLQUFLLENBQUMsRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFDLENBQUMsQ0FBQztRQUZKLFdBQU0sR0FBTixNQUFNLENBQVE7UUFMbEMsd0VBQXdFO1FBQ2hFLGFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7WUFDaEQsT0FBTyxFQUFFLEVBQUMsYUFBYSxFQUFFLFNBQVMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFDO1NBQ2pELENBQUMsQ0FBQztJQUtILENBQUM7SUFFRCxrREFBa0Q7SUFDbEQsS0FBSyxDQUFDLE9BQU8sQ0FBK0IsV0FBYyxFQUFFLFNBQTRCLEVBQUU7UUFDeEYsT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQU0sQ0FBQztJQUMzRSxDQUFDO0NBQ0Y7QUFFRCw2RUFBNkU7QUFDN0UsTUFBTSxVQUFVLGdCQUFnQixDQUFDLEdBQVk7SUFDM0MsT0FBTyxDQUNMLEdBQUcsWUFBWSxLQUFLO1FBQ3BCLHlFQUF5RTtRQUN6RSx3RUFBd0U7UUFDeEUsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEtBQUssY0FBYztRQUN0QyxHQUE2QixDQUFDLE9BQU8sS0FBSyxTQUFTLENBQ3JELENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTENcbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB0eXBlIHtPY3Rva2l0T3B0aW9uc30gZnJvbSAnQG9jdG9raXQvY29yZSc7XG5cbmltcG9ydCB7T2N0b2tpdH0gZnJvbSAnQG9jdG9raXQvcmVzdCc7XG5pbXBvcnQge1JlcXVlc3RQYXJhbWV0ZXJzfSBmcm9tICdAb2N0b2tpdC90eXBlcyc7XG5pbXBvcnQge1JlcXVlc3RFcnJvcn0gZnJvbSAnQG9jdG9raXQvcmVxdWVzdC1lcnJvcic7XG5pbXBvcnQge3F1ZXJ5fSBmcm9tICd0eXBlZC1ncmFwaHFsaWZ5JztcblxuLyoqXG4gKiBBbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYSBHcmFwaHFsIFF1ZXJ5IHRvIGJlIHVzZWQgYXMgYSByZXNwb25zZSB0eXBlIGFuZFxuICogdG8gZ2VuZXJhdGUgYSBHcmFwaHFsIHF1ZXJ5IHN0cmluZy5cbiAqL1xuZXhwb3J0IHR5cGUgR3JhcGhxbFF1ZXJ5T2JqZWN0ID0gUGFyYW1ldGVyczx0eXBlb2YgcXVlcnk+WzFdO1xuXG4vKiogSW50ZXJmYWNlIGRlc2NyaWJpbmcgYSBHaXRodWIgcmVwb3NpdG9yeS4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgR2l0aHViUmVwbyB7XG4gIC8qKiBPd25lciBsb2dpbiBvZiB0aGUgcmVwb3NpdG9yeS4gKi9cbiAgb3duZXI6IHN0cmluZztcbiAgLyoqIE5hbWUgb2YgdGhlIHJlcG9zaXRvcnkuICovXG4gIG5hbWU6IHN0cmluZztcbn1cblxuLyoqIEEgR2l0aHViIGNsaWVudCBmb3IgaW50ZXJhY3Rpbmcgd2l0aCB0aGUgR2l0aHViIEFQSXMuICovXG5leHBvcnQgY2xhc3MgR2l0aHViQ2xpZW50IHtcbiAgLyoqIFRoZSBvY3Rva2l0IGluc3RhbmNlIGFjdHVhbGx5IHBlcmZvcm1pbmcgQVBJIHJlcXVlc3RzLiAqL1xuICBwcm90ZWN0ZWQgX29jdG9raXQgPSBuZXcgT2N0b2tpdCh7Li4udGhpcy5fb2N0b2tpdE9wdGlvbnN9KTtcblxuICByZWFkb25seSBwdWxsczogT2N0b2tpdFsncHVsbHMnXSA9IHRoaXMuX29jdG9raXQucHVsbHM7XG4gIHJlYWRvbmx5IG9yZ3M6IE9jdG9raXRbJ29yZ3MnXSA9IHRoaXMuX29jdG9raXQub3JncztcbiAgcmVhZG9ubHkgcmVwb3M6IE9jdG9raXRbJ3JlcG9zJ10gPSB0aGlzLl9vY3Rva2l0LnJlcG9zO1xuICByZWFkb25seSBpc3N1ZXM6IE9jdG9raXRbJ2lzc3VlcyddID0gdGhpcy5fb2N0b2tpdC5pc3N1ZXM7XG4gIHJlYWRvbmx5IGdpdDogT2N0b2tpdFsnZ2l0J10gPSB0aGlzLl9vY3Rva2l0LmdpdDtcbiAgcmVhZG9ubHkgcmF0ZUxpbWl0OiBPY3Rva2l0WydyYXRlTGltaXQnXSA9IHRoaXMuX29jdG9raXQucmF0ZUxpbWl0O1xuICByZWFkb25seSB0ZWFtczogT2N0b2tpdFsndGVhbXMnXSA9IHRoaXMuX29jdG9raXQudGVhbXM7XG4gIHJlYWRvbmx5IHNlYXJjaDogT2N0b2tpdFsnc2VhcmNoJ10gPSB0aGlzLl9vY3Rva2l0LnNlYXJjaDtcbiAgcmVhZG9ubHkgcmVzdDogT2N0b2tpdFsncmVzdCddID0gdGhpcy5fb2N0b2tpdC5yZXN0O1xuICByZWFkb25seSBwYWdpbmF0ZTogT2N0b2tpdFsncGFnaW5hdGUnXSA9IHRoaXMuX29jdG9raXQucGFnaW5hdGU7XG4gIHJlYWRvbmx5IGNoZWNrczogT2N0b2tpdFsnY2hlY2tzJ10gPSB0aGlzLl9vY3Rva2l0LmNoZWNrcztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9vY3Rva2l0T3B0aW9ucz86IE9jdG9raXRPcHRpb25zKSB7fVxufVxuXG4vKipcbiAqIEV4dGVuc2lvbiBvZiB0aGUgYEdpdGh1YkNsaWVudGAgdGhhdCBwcm92aWRlcyB1dGlsaXRpZXMgd2hpY2ggYXJlIHNwZWNpZmljXG4gKiB0byBhdXRoZW50aWNhdGVkIGluc3RhbmNlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIEF1dGhlbnRpY2F0ZWRHaXRodWJDbGllbnQgZXh0ZW5kcyBHaXRodWJDbGllbnQge1xuICAvKiogVGhlIGdyYXBocWwgaW5zdGFuY2Ugd2l0aCBhdXRoZW50aWNhdGlvbiBzZXQgZHVyaW5nIGNvbnN0cnVjdGlvbi4gKi9cbiAgcHJpdmF0ZSBfZ3JhcGhxbCA9IHRoaXMuX29jdG9raXQuZ3JhcGhxbC5kZWZhdWx0cyh7XG4gICAgaGVhZGVyczoge2F1dGhvcml6YXRpb246IGB0b2tlbiAke3RoaXMuX3Rva2VufWB9LFxuICB9KTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF90b2tlbjogc3RyaW5nKSB7XG4gICAgLy8gU2V0IHRoZSB0b2tlbiBmb3IgdGhlIG9jdG9raXQgaW5zdGFuY2UuXG4gICAgc3VwZXIoe2F1dGg6IF90b2tlbn0pO1xuICB9XG5cbiAgLyoqIFBlcmZvcm0gYSBxdWVyeSB1c2luZyBHaXRodWIncyBHcmFwaHFsIEFQSS4gKi9cbiAgYXN5bmMgZ3JhcGhxbDxUIGV4dGVuZHMgR3JhcGhxbFF1ZXJ5T2JqZWN0PihxdWVyeU9iamVjdDogVCwgcGFyYW1zOiBSZXF1ZXN0UGFyYW1ldGVycyA9IHt9KSB7XG4gICAgcmV0dXJuIChhd2FpdCB0aGlzLl9ncmFwaHFsKHF1ZXJ5KHF1ZXJ5T2JqZWN0KS50b1N0cmluZygpLCBwYXJhbXMpKSBhcyBUO1xuICB9XG59XG5cbi8qKiBXaGV0aGVyIHRoZSBnaXZlbiBvYmplY3QgY29ycmVzcG9uZHMgdG8gYW4gT2N0b2tpdCBBUEkgcmVxdWVzdCBlcnJvci4gICovXG5leHBvcnQgZnVuY3Rpb24gaXNHaXRodWJBcGlFcnJvcihvYmo6IHVua25vd24pOiBvYmogaXMgUmVxdWVzdEVycm9yIHtcbiAgcmV0dXJuIChcbiAgICBvYmogaW5zdGFuY2VvZiBFcnJvciAmJlxuICAgIC8vIE5vdGU6IENhbm5vdCB1c2UgYGluc3RhbmNlb2ZgIGhlcmUgYmVjYXVzZSBPY3Rva2l0IG1heSB1c2UgYSBkaWZmZXJlbnRcbiAgICAvLyB2ZXJzaW9uIG9mIGBAb2N0b2tpdC9yZXF1ZXN0LWVycm9yYCBkdWUgdG8gdmVyc2lvbiBtaXNtYXRjaC9ob2lzdGluZy5cbiAgICBvYmouY29uc3RydWN0b3IubmFtZSA9PT0gJ1JlcXVlc3RFcnJvcicgJiZcbiAgICAob2JqIGFzIFBhcnRpYWw8UmVxdWVzdEVycm9yPikucmVxdWVzdCAhPT0gdW5kZWZpbmVkXG4gICk7XG59XG4iXX0=