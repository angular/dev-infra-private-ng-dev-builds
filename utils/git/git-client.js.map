{"version":3,"file":"git-client.js","sourceRoot":"","sources":["git-client.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DryRunError, isDryRun} from '../dry-run.js';\nimport {GithubConfig, assertValidGithubConfig, getConfig} from '../config.js';\nimport {SpawnSyncOptions, SpawnSyncReturns, spawnSync} from 'child_process';\nimport {Log} from '../logging.js';\n\nimport {GithubClient} from './github.js';\nimport {getRepositoryGitUrl} from './github-urls.js';\nimport {determineRepoBaseDirFromCwd} from '../repo-directory.js';\n\n/** Error for failed Git commands. */\nexport class GitCommandError extends Error {\n  // Note: Do not expose the unsanitized arguments as a public property. NodeJS\n  // could print the properties of an error instance and leak e.g. a token.\n  constructor(client: GitClient, unsanitizedArgs: string[]) {\n    // Errors are not guaranteed to be caught. To ensure that we don't\n    // accidentally leak the Github token that might be used in a command,\n    // we sanitize the command that will be part of the error message.\n    super(`Command failed: git ${client.sanitizeConsoleOutput(unsanitizedArgs.join(' '))}`);\n  }\n}\n\n/** The options available for the `GitClient``run` and `runGraceful` methods. */\ntype GitCommandRunOptions = SpawnSyncOptions;\n\n/** Class that can be used to perform Git interactions with a given remote. **/\nexport class GitClient {\n  /** Short-hand for accessing the default remote configuration. */\n  readonly remoteConfig: GithubConfig;\n\n  /** Octokit request parameters object for targeting the configured remote. */\n  readonly remoteParams: {owner: string; repo: string};\n\n  /** Name of the primary branch of the upstream remote. */\n  readonly mainBranchName: string;\n\n  /** Instance of the Github client. */\n  readonly github = new GithubClient();\n\n  /** The configuration, containing the github specific configuration. */\n  readonly config: {github: GithubConfig};\n\n  /**\n   * Path to the Git executable. By default, `git` is assumed to exist\n   * in the shell environment (using `$PATH`).\n   */\n  readonly gitBinPath: string = 'git';\n\n  constructor(\n    /** The configuration, containing the github specific configuration. */\n    config: {github: GithubConfig},\n    /** The full path to the root of the repository base. */\n    readonly baseDir = determineRepoBaseDirFromCwd(),\n  ) {\n    this.config = config;\n    this.remoteConfig = config.github;\n    this.remoteParams = {owner: config.github.owner, repo: config.github.name};\n    this.mainBranchName = config.github.mainBranchName;\n  }\n\n  /** Executes the given git command. Throws if the command fails. */\n  run(args: string[], options?: GitCommandRunOptions): Omit<SpawnSyncReturns<string>, 'status'> {\n    const result = this.runGraceful(args, options);\n    if (result.status !== 0) {\n      throw new GitCommandError(this, args);\n    }\n    // Omit `status` from the type so that it's obvious that the status is never\n    // non-zero as explained in the method description.\n    return result as Omit<SpawnSyncReturns<string>, 'status'>;\n  }\n\n  /**\n   * Spawns a given Git command process. Does not throw if the command fails. Additionally,\n   * if there is any stderr output, the output will be printed. This makes it easier to\n   * info failed commands.\n   */\n  runGraceful(args: string[], options: GitCommandRunOptions = {}): SpawnSyncReturns<string> {\n    /** The git command to be run. */\n    const gitCommand = args[0];\n\n    if (isDryRun() && gitCommand === 'push') {\n      Log.debug(`\"git push\" is not able to be run in dryRun mode.`);\n      throw new DryRunError();\n    }\n\n    // Clear the credential helper that is used, preventing the temporary token from being saved as a\n    // valid token for future use.\n    args = ['-c', 'credential.helper=', ...args];\n    // To improve the debugging experience in case something fails, we print all executed Git\n    // commands at the DEBUG level to better understand the git actions occurring.\n    // Note that we sanitize the command before printing it to the console. We do not want to\n    // print an access token if it is contained in the command. It's common to share errors with\n    // others if the tool failed, and we do not want to leak tokens.\n    Log.debug('Executing: git', this.sanitizeConsoleOutput(args.join(' ')));\n\n    const result = spawnSync(this.gitBinPath, args, {\n      cwd: this.baseDir,\n      stdio: 'pipe',\n      ...options,\n      // Encoding is always `utf8` and not overridable. This ensures that this method\n      // always returns `string` as output instead of buffers.\n      encoding: 'utf8',\n    });\n\n    Log.debug(`Status: ${result.status}, Error: ${!!result.error}, Signal: ${result.signal}`);\n\n    if (result.status !== 0 && result.stderr !== null) {\n      // Git sometimes prints the command if it failed. This means that it could\n      // potentially leak the Github token used for accessing the remote. To avoid\n      // printing a token, we sanitize the string before printing the stderr output.\n      process.stderr.write(this.sanitizeConsoleOutput(result.stderr));\n    }\n\n    Log.debug('Stdout:', result.stdout);\n    Log.debug('Stderr:', result.stderr);\n    Log.debug('Process Error:', result.error);\n\n    if (result.error !== undefined) {\n      // Git sometimes prints the command if it failed. This means that it could\n      // potentially leak the Github token used for accessing the remote. To avoid\n      // printing a token, we sanitize the string before printing the stderr output.\n      process.stderr.write(this.sanitizeConsoleOutput(result.error.message));\n    }\n\n    return result;\n  }\n\n  /** Git URL that resolves to the configured repository. */\n  getRepoGitUrl() {\n    return getRepositoryGitUrl(this.remoteConfig);\n  }\n\n  /** Whether the given branch contains the specified SHA. */\n  hasCommit(branchName: string, sha: string): boolean {\n    return this.run(['branch', branchName, '--contains', sha]).stdout !== '';\n  }\n\n  /** Whether the local repository is configured as shallow. */\n  isShallowRepo(): boolean {\n    return this.run(['rev-parse', '--is-shallow-repository']).stdout.trim() === 'true';\n  }\n\n  /** Gets the currently checked out branch or revision. */\n  getCurrentBranchOrRevision(): string {\n    const branchName = this.run(['rev-parse', '--abbrev-ref', 'HEAD']).stdout.trim();\n    // If no branch name could be resolved. i.e. `HEAD` has been returned, then Git\n    // is currently in a detached state. In those cases, we just want to return the\n    // currently checked out revision/SHA.\n    if (branchName === 'HEAD') {\n      return this.run(['rev-parse', 'HEAD']).stdout.trim();\n    }\n    return branchName;\n  }\n\n  /** Gets whether the current Git repository has uncommitted changes. */\n  hasUncommittedChanges(): boolean {\n    // We also need to refresh the index in case some files have been touched\n    // but not modified. The diff-index command will not check contents so we\n    // manually need to refresh and cleanup the index before performing the diff.\n    // Relevant info: https://git-scm.com/docs/git-diff-index#_non_cached_mode,\n    // https://git-scm.com/docs/git-update-index and https://stackoverflow.com/a/34808299.\n    this.runGraceful(['update-index', '-q', '--refresh']);\n\n    return this.runGraceful(['diff-index', '--quiet', 'HEAD']).status !== 0;\n  }\n\n  /**\n   * Checks out a requested branch or revision, optionally cleaning the state of the repository\n   * before attempting the checking. Returns a boolean indicating whether the branch or revision\n   * was cleanly checked out.\n   */\n  checkout(branchOrRevision: string, cleanState: boolean): boolean {\n    if (cleanState) {\n      // Abort any outstanding ams.\n      this.runGraceful(['am', '--abort'], {stdio: 'ignore'});\n      // Abort any outstanding cherry-picks.\n      this.runGraceful(['cherry-pick', '--abort'], {stdio: 'ignore'});\n      // Abort any outstanding rebases.\n      this.runGraceful(['rebase', '--abort'], {stdio: 'ignore'});\n      // Clear any changes in the current repo.\n      this.runGraceful(['reset', '--hard'], {stdio: 'ignore'});\n    }\n    return this.runGraceful(['checkout', branchOrRevision], {stdio: 'ignore'}).status === 0;\n  }\n\n  /** Retrieve a list of all files in the repository changed since the provided shaOrRef. */\n  allChangesFilesSince(shaOrRef = 'HEAD'): string[] {\n    return Array.from(\n      new Set([\n        ...gitOutputAsArray(this.runGraceful(['diff', '--name-only', '--diff-filter=d', shaOrRef])),\n        ...gitOutputAsArray(this.runGraceful(['ls-files', '--others', '--exclude-standard'])),\n      ]),\n    );\n  }\n\n  /** Retrieve a list of all files currently staged in the repostitory. */\n  allStagedFiles(): string[] {\n    return gitOutputAsArray(\n      this.runGraceful(['diff', '--name-only', '--diff-filter=ACM', '--staged']),\n    );\n  }\n\n  /** Retrieve a list of all files tracked in the repository. */\n  allFiles(): string[] {\n    return gitOutputAsArray(this.runGraceful(['ls-files']));\n  }\n\n  /**\n   * Sanitizes the given console message. This method can be overridden by\n   * derived classes. e.g. to sanitize access tokens from Git commands.\n   */\n  sanitizeConsoleOutput(value: string) {\n    return value;\n  }\n\n  /** The singleton instance of the unauthenticated `GitClient`. */\n  private static _unauthenticatedInstance: Promise<GitClient> | null = null;\n\n  /**\n   * Static method to get the singleton instance of the `GitClient`,\n   * creating it, if not created yet.\n   */\n  static async get(): Promise<GitClient> {\n    // If there is no cached instance, create one and cache the promise immediately.\n    // This avoids constructing a client twice accidentally when e.g. waiting for the\n    // configuration to be loaded.\n    if (GitClient._unauthenticatedInstance === null) {\n      GitClient._unauthenticatedInstance = (async () => {\n        return new GitClient(await getConfig([assertValidGithubConfig]));\n      })();\n    }\n\n    return GitClient._unauthenticatedInstance;\n  }\n}\n\n/**\n * Takes the output from `run` and `runGraceful` and returns an array of strings for each\n * new line. Git commands typically return multiple output values for a command a set of\n * strings separated by new lines.\n *\n * Note: This is specifically created as a locally available function for usage as convenience\n * utility within `GitClient`'s methods to create outputs as array.\n */\nfunction gitOutputAsArray(gitCommandResult: SpawnSyncReturns<string>): string[] {\n  return gitCommandResult.stdout\n    .split('\\n')\n    .map((x) => x.trim())\n    .filter((x) => !!x);\n}\n"]}