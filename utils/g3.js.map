{"version":3,"file":"g3.js","sourceRoot":"","sources":["g3.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport path from 'path';\nimport {Log} from './logging.js';\nimport {CaretakerConfig, GithubConfig} from './config.js';\nimport {SyncFileMatchFn, getGoogleSyncConfig} from './g3-sync-config.js';\nimport {AuthenticatedGitClient} from './git/authenticated-git-client.js';\n\n/** Information expressing the difference between the main and g3 branches */\nexport interface G3StatsData {\n  insertions: number;\n  deletions: number;\n  files: number;\n  separateFiles: number;\n  commits: number;\n}\n\nexport class G3Stats {\n  static async retrieveDiffStats(\n    git: AuthenticatedGitClient,\n    config: {caretaker: CaretakerConfig; github: GithubConfig},\n  ): Promise<G3StatsData | undefined> {\n    const syncMatchFns = await this.getG3SyncFileMatchFns(git, config);\n    const latestSha = this.getLatestShas(git);\n\n    if (\n      syncMatchFns === null ||\n      syncMatchFns.ngMatchFn === null ||\n      syncMatchFns.separateMatchFn === null ||\n      latestSha === null\n    ) {\n      return;\n    }\n\n    return this.getDiffStats(git, latestSha.g3, latestSha.main, syncMatchFns);\n  }\n\n  /**\n   * Get git diff stats between main and g3, for all files and filtered to only g3 affecting\n   * files.\n   */\n  static getDiffStats(\n    git: AuthenticatedGitClient,\n    g3Ref: string,\n    mainRef: string,\n    syncMatchFns: {ngMatchFn: SyncFileMatchFn; separateMatchFn: SyncFileMatchFn},\n  ): G3StatsData {\n    /** The diff stats to be returned. */\n    const stats = {\n      insertions: 0,\n      deletions: 0,\n      files: 0,\n      separateFiles: 0,\n      commits: 0,\n    };\n\n    // Determine the number of commits between main and g3 refs. */\n    stats.commits = parseInt(git.run(['rev-list', '--count', `${g3Ref}..${mainRef}`]).stdout, 10);\n\n    // Get the numstat information between main and g3\n    const numStatDiff = git\n      .run(['diff', `${g3Ref}...${mainRef}`, '--numstat'])\n      .stdout // Remove the extra space after git's output.\n      .trim();\n\n    // If there is no diff, we can return early.\n    if (numStatDiff === '') {\n      return stats;\n    }\n\n    // Split each line of git output into array\n    numStatDiff\n      .split('\\n')\n      // Split each line from the git output into components parts: insertions,\n      // deletions and file name respectively\n      .map((line) => line.trim().split('\\t'))\n      // Parse number value from the insertions and deletions values\n      // Example raw line input:\n      //   10\\t5\\tsrc/file/name.ts\n      .map((line) => [Number(line[0]), Number(line[1]), line[2]] as [number, number, string])\n      // Add each line's value to the diff stats, and conditionally to the g3\n      // stats as well if the file name is included in the files synced to g3.\n      .forEach(([insertions, deletions, fileName]) => {\n        if (syncMatchFns.ngMatchFn(fileName)) {\n          stats.insertions += insertions;\n          stats.deletions += deletions;\n          stats.files += 1;\n        } else if (syncMatchFns.separateMatchFn(fileName)) {\n          stats.insertions += insertions;\n          stats.deletions += deletions;\n          stats.separateFiles += 1;\n        }\n      });\n\n    return stats;\n  }\n\n  /** Fetch and retrieve the latest sha for a specific branch. */\n  static getShaForBranchLatest(git: AuthenticatedGitClient, branch: string) {\n    // With the --exit-code flag, if no match is found an exit code of 2 is returned by the command.\n    if (git.runGraceful(['ls-remote', '--exit-code', git.getRepoGitUrl(), branch]).status === 2) {\n      Log.debug(`No '${branch}' branch exists on upstream, skipping.`);\n      return null;\n    }\n\n    // Retrieve the latest ref for the branch and return its sha.\n    git.runGraceful(['fetch', '-q', git.getRepoGitUrl(), branch]);\n    return git.runGraceful(['rev-parse', 'FETCH_HEAD']).stdout.trim();\n  }\n\n  static async getG3SyncFileMatchFns(\n    git: AuthenticatedGitClient,\n    configs: {caretaker: CaretakerConfig; github: GithubConfig},\n  ): Promise<null | {\n    ngMatchFn: SyncFileMatchFn;\n    separateMatchFn: SyncFileMatchFn;\n  }> {\n    debugger;\n    if (configs.caretaker.g3SyncConfigPath === undefined) {\n      Log.debug('No Google Sync configuration specified.');\n      return null;\n    }\n\n    const configPath = path.join(git.baseDir, configs.caretaker.g3SyncConfigPath);\n    const {ngMatchFn, separateMatchFn, config} = await getGoogleSyncConfig(configPath);\n    if (config.syncedFilePatterns.length === 0) {\n      Log.warn('Google Sync configuration does not specify any files being synced.');\n    }\n    return {ngMatchFn, separateMatchFn};\n  }\n\n  static getLatestShas(git: AuthenticatedGitClient) {\n    /** The latest sha for the g3 branch. */\n    const g3 = this.getShaForBranchLatest(git, 'g3');\n    /** The latest sha for the main branch. */\n    const main = this.getShaForBranchLatest(git, git.mainBranchName);\n\n    if (g3 === null || main === null) {\n      Log.debug(`Either the g3 or ${git.mainBranchName} was unable to be retrieved`);\n      return null;\n    }\n\n    return {g3, main};\n  }\n}\n"]}