{"version":3,"file":"read-stdin-until-closed.js","sourceRoot":"","sources":["read-stdin-until-closed.ts"],"names":[],"mappings":"AASA,MAAM,OAAO,wBAAyB,SAAQ,KAAK;CAAG;AAQtD,MAAM,UAAU,8BAA8B,CAC5C,QAA2B,OAAO,CAAC,KAAK;IAExC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACrC,MAAM,IAAI,GAAa,EAAE,CAAC;QAE1B,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QAC9C,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACpD,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,wBAAwB,EAAE,CAAC,CAAC,CAAC;QAChE,KAAK,CAAC,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,wBAAwB,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;IACxF,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Unique error class for failures when reading from the stdin. */\nexport class ReadBufferFromStdinError extends Error {}\n\n/**\n * Reads a `Buffer` from `stdin` until the stream is closed.\n *\n * @returns a Promise resolving with the `Buffer`. Rejects with `ReadBufferFromStdinError`\n *   on unexpected read errors.\n */\nexport function readBufferFromStdinUntilClosed(\n  input: NodeJS.ReadStream = process.stdin,\n): Promise<Buffer> {\n  return new Promise((resolve, reject) => {\n    const data: Buffer[] = [];\n\n    input.on('data', (chunk) => data.push(chunk));\n    input.on('end', () => resolve(Buffer.concat(data)));\n    input.on('error', () => reject(new ReadBufferFromStdinError()));\n    input.on('timeout', () => reject(new ReadBufferFromStdinError('Unexpected timeout')));\n  });\n}\n"]}