{"version":3,"file":"resolve-yarn-bin.js","sourceRoot":"","sources":["resolve-yarn-bin.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport which from 'which';\n\nimport {isNodeJSWrappedError} from './nodejs-errors.js';\nimport lockfile from '@yarnpkg/lockfile';\nimport {parse as parseYaml} from 'yaml';\nimport {ChildProcess} from './child-process.js';\nimport {Log} from './logging.js';\n\n/** Type describing a Yarn configuration and its potential properties. */\nexport interface YarnConfiguration {\n  'yarnPath': string | undefined;\n  'yarn-path': string | undefined;\n}\n\n/** Type describing a configuration with its corresponding parsing mechanism. */\nexport type ConfigWithParser = {fileName: string; parse: (c: string) => YarnConfiguration};\n\n/** Interface describing a command that will invoke Yarn. */\nexport interface YarnCommandInfo {\n  binary: string;\n  args: string[];\n  legacy?: boolean;\n}\n\n/** List of Yarn configuration files and their parsing mechanisms. */\nexport const yarnConfigFiles: ConfigWithParser[] = [\n  {fileName: '.yarnrc', parse: (c) => lockfile.parse(c).object},\n  {fileName: '.yarnrc.yml', parse: (c) => parseYaml(c)},\n];\n\n/**\n * Resolves Yarn for the given project directory.\n *\n * This function exists so that Yarn can be invoked from within Yarn-initiated processes.\n * Yarn uses some magical logic where it creates a temporary directory to make Yarn resolvable.\n * This temporary directory is then wired up in `process.env.PATH` and can break for example\n * when a command switches branches, causing the originally invoked Yarn checked-in file to\n * become unavailable.\n */\nexport async function resolveYarnScriptForProject(projectDir: string): Promise<YarnCommandInfo> {\n  let info: YarnCommandInfo | undefined;\n\n  const yarnPathFromConfig = await getYarnPathFromConfigurationIfPresent(projectDir);\n  if (yarnPathFromConfig !== null) {\n    info = {binary: 'node', args: [yarnPathFromConfig]};\n  }\n\n  if (!info) {\n    const yarnPathFromNpmBin = await getYarnPathFromNpmGlobalBinaries();\n    if (yarnPathFromNpmBin !== null) {\n      info = {binary: yarnPathFromNpmBin, args: []};\n    }\n  }\n\n  info ??= {binary: 'yarn', args: []};\n\n  const yarnVersion = await getYarnVersion(info);\n  if (yarnVersion && Number(yarnVersion.split('.')[0]) < 2) {\n    info.args.push('--silent');\n    info.legacy = true;\n  }\n\n  return info;\n}\n\n/** Gets the path to the Yarn binary from the NPM global binary directory. */\nexport async function getYarnPathFromNpmGlobalBinaries(): Promise<string | null> {\n  const npmGlobalBinPath = await getNpmGlobalBinPath();\n  if (npmGlobalBinPath === null) {\n    return null;\n  }\n  try {\n    return await which('yarn', {path: npmGlobalBinPath});\n  } catch (e) {\n    Log.debug('Could not find Yarn within NPM global binary directory. Error:', e);\n    return null;\n  }\n}\n\n/** Gets the path to the system-wide global NPM binary directory. */\nasync function getNpmGlobalBinPath(): Promise<string | null> {\n  try {\n    return (await ChildProcess.spawn('npm', ['bin', '--global'], {mode: 'silent'})).stdout.trim();\n  } catch (e) {\n    Log.debug('Could not determine NPM global binary directory. Error:', e);\n    return null;\n  }\n}\n\n/** Gets the Yarn path from the Yarn configuration if present. */\nasync function getYarnPathFromConfigurationIfPresent(projectDir: string): Promise<string | null> {\n  const yarnRc = await findAndParseYarnConfiguration(projectDir);\n  if (yarnRc === null) {\n    return null;\n  }\n\n  const yarnPath = yarnRc['yarn-path'] ?? yarnRc['yarnPath'];\n  if (yarnPath === undefined) {\n    return null;\n  }\n\n  return path.resolve(projectDir, yarnPath);\n}\n\nasync function getYarnVersion(info: YarnCommandInfo): Promise<string | null> {\n  try {\n    return (\n      await ChildProcess.spawn(info.binary, [...info.args, '--version'], {mode: 'silent'})\n    ).stdout.trim();\n  } catch (e) {\n    Log.debug('Could not determine Yarn version. Error:', e);\n    return null;\n  }\n}\n\n/** Finds and parses the Yarn configuration file for the given project. */\nasync function findAndParseYarnConfiguration(\n  projectDir: string,\n): Promise<YarnConfiguration | null> {\n  const files = await Promise.all(\n    yarnConfigFiles.map(async (entry) => ({\n      entry,\n      content: await readFileGracefully(path.join(projectDir, entry.fileName)),\n    })),\n  );\n  const config = files.find((entry) => entry.content !== null);\n  if (config === undefined) {\n    return null;\n  }\n\n  try {\n    return config.entry.parse(config.content!);\n  } catch (e) {\n    Log.debug(`Could not parse determined Yarn configuration file (${config.entry.fileName}).`);\n    Log.debug(`Error:`, e);\n    return null;\n  }\n}\n\n/**\n * Reads the specified file gracefully.\n * @returns The file contents. Null if the file does not exist.\n */\nasync function readFileGracefully(filePath: string): Promise<string | null> {\n  try {\n    return await fs.promises.readFile(filePath, 'utf8');\n  } catch (error) {\n    if (isNodeJSWrappedError(error, Error) && error.code === 'ENOENT') {\n      return null;\n    }\n    throw error;\n  }\n}\n"]}